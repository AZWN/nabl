module scopegraphs/extension

language StatixLang

// direct extensions

test extend parameter scope in same rule succeeds [[
  module test
  signature
    relations foo : string
  rules
    c : scope
    c(s) :- !foo[""] in s.
]] analysis succeeds

test extend new scope in same rule succeeds [[
  module test
  signature
    relations foo : string
  rules
    c : 
    c() :- {s} new s, !foo[""] in s.
]] analysis succeeds

test extend local scope in same rule fails [[
  module test
  signature
    relations foo : string
  rules
    c : 
    c() :- {s} !foo[""] in s.
]] analysis fails

// extension in one step

test extend parameter scope in via other constraint succeeds [[
  module test
  signature
    relations foo : string
  rules
    c0 : scope
    c0(s) :- c1(s).

    c1 : scope
    c1(s) :- !foo[""] in s.
]] analysis succeeds

test extend new scope in via other constraint succeeds [[
  module test
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} new s, c1(s).

    c1 : scope
    c1(s) :- !foo[""] in s.
]] analysis succeeds

test extend local scope in via other constraint fails [[
  module test
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} c1(s).

    c1 : scope
    c1(s) :- !foo[""] in s.
]] analysis fails

// extension in two steps

test extend parameter scope in via two other constraints succeeds [[
  module test
  signature
    relations foo : string
  rules
    c0 : scope
    c0(s) :- c1(s).

    c1 : scope
    c1(s) :- c2(s).

    c2 : scope
    c2(s) :- !foo[""] in s.
]] analysis succeeds

test extend new scope in via two other constraints succeeds [[
  module test
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} new s, c1(s).

    c1 : scope
    c1(s) :- c2(s).

    c2 : scope
    c2(s) :- !foo[""] in s.
]] analysis succeeds

test extend local scope in via two other constraints fails [[
  module test
  signature
    relations foo : string
  rules
    c0 : 
    c0() :- {s} c1(s).

    c1 : scope
    c1(s) :- c2(s).

    c2 : scope
    c2(s) :- !foo[""] in s.
]] analysis fails

// extension via sugar construct

test extend local scope via declaration sugar fails [[
  module test
  signature
    namespaces Var : string
  rules
    c : 
    c() :- {s} s -> Var{"x"@-}.
]] analysis fails

test extend local scope via functional constraint fails [[
  module test
  signature
    namespaces Var : string
  rules
    c0 : 
    c0() :- {s} c1(s) == _.

    c1 : scope -> ()
    c1(s) = () :- s -> Var{"x"@-}.
]] analysis fails

// extension via mapped predicate constraint

test new extension of non-lifted parameter of lifted predicate succeeds [[
  module test
  signature
    relations
      r : int
  rules
    cs maps c(*, list(*))
    c : scope * int
    c(s, i) :- !r[i] in s.
    
    d :
    d() :- {s} new s, cs(s, []).
]] analysis succeeds

test local extension of non-lifted parameter of lifted predicate fails [[
  module test
  signature
    relations
      r : int
  rules
    cs maps c(*, list(*))
    c : scope * int
    c(s, i) :- !r[i] in s.
    
    d :
    d() :- {s1 s2} new s1, s1 == s2, cs(s2, []).
]] analysis fails

test extension of lifted parameter of lifted predicate fails [[
  module test
  signature
    relations
      r : int
  rules
    cs maps c(list(*), list(*))
    c : scope * int
    c(s, i) :- !r[i] in s.
    
    d :
    d() :- {s1 s2} new s1, s1 == s2, cs([s2], []).
]] analysis fails


// extension via mapped functional constraint

test new extension of non-lifted parameter of lifted functional succeeds [[
  module test
  signature
    relations
      r : int
  rules
    fs maps f(*, list(*)) = list(*)
    f : scope * int -> ()
    f(s, i) = () :- !r[i] in s.
    
    d :
    d() :- {s} new s, fs(s, []) == _.
]] analysis succeeds

test local extension of non-lifted parameter of lifted functional fails [[
  module test
  signature
    relations
      r : int
  rules
    fs maps f(*, list(*)) = list(*)
    f : scope * int -> ()
    f(s, i) = () :- !r[i] in s.

    d :
    d() :- {s1 s2} new s1, s1 == s2, fs(s2, []) == _.
]] analysis fails

test extension of lifted parameter of lifted functional fails [[
  module test
  signature
    relations
      r : int
  rules
    fs maps f(list(*), list(*)) = list(*)
    f : scope * int -> ()
    f(s, i) = () :- !r[i] in s.
    
    d :
    d() :- {s1 s2} new s1, s1 == s2, fs([s2], []) == _.
]] analysis fails

// extension in test goal

test new extension in test goal succeeds [[
  resolve {s} new s, c(s, 1)
  signature
    relations
      r : int
  rules
    c : scope * int
    c(s, i) :- !r[i] in s.
]] analysis succeeds

test local extension in test goal fails [[
  resolve {s1 s2} new s1, s1 == s2, c(s2, 1)
  signature
    relations
      r : int
  rules
    c : scope * int
    c(s, i) :- !r[i] in s.
]] analysis fails

