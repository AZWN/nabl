module rules-predicate

language StatixTest

// TODO:
// - head variables visible in guard and body
// - guard variables visible in body
// - body variables not visible in guard

test nullary constraint succeeds [[
  resolve c()
  rules
    c : 
    c().
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test unary constraint succeeds [[
  resolve c(1)
  rules
    c : int
    c(i).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test binary constraint succeeds [[
  resolve c(1, 2)
  rules
    c : int * int
    c(i, j).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test non-linear binary constraint with equal args succeeds [[
  resolve c(1, 1)
  rules
    c : int * int
    c(i, i).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test non-linear binary constraint with inequal args fails [[
  resolve c(1, 2)
  rules
    c : int * int
    c(i, i).
]] analysis succeeds
   run evaluate-test to FAILS()

test inline list pattern succeeds [[
  resolve c(["x", "y"])
  rules
    c : list(string)
    c([]).
    c([x|xs]) :- c(xs).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test equal terms in different-level non-linear pattern succeeds [[
  resolve c(1, [1|_])
  rules
    c : int * list(int)
    c(i, [i|_]).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test inequal terms in different-level non-linear pattern fails [[
  resolve c(1, [2|_])
  rules
    c : int * list(int)
    c(i, [i|_]).
]] analysis succeeds
   run evaluate-test to FAILS()

test unified terms in same-level non-linear pattern succeeds [[
  resolve {i j} c([i], [j]), i == j
  rules
    c : list(string) * list(string)
    c(xs, xs).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test guard equalities on terms succeeds [[
  resolve c(["x", "y"])
  rules
    c : list(string)
    c(xs) | xs == [].
    c(xs) | {xs'} xs == [_|xs'] :- c(xs').
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test guard inequality on terms succeeds [[
  resolve c([3, 6])
  rules
    c : list(int)
    c(xs) | xs != [].
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test free variable not unified by guard [[
  resolve {x} c(x)
  rules
    c : int
    c(x) | x == 0.
]] analysis succeeds
   run evaluate-test to FAILS()

test free variable not considered inequal by guard [[
  resolve {x} c(x)
  rules
    c : int
    c(x) | x != 0.
]] analysis succeeds
   run evaluate-test to FAILS()

test wildcards in head succeeds [[
resolve c(2, 3)
rules
  c : int * int
  c(_, _).
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test wildcards in guard succeeds [[
resolve c([2])
rules
  c : list(int)
  c(xs) | xs == [_].
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test wildcards in body succeeds [[
resolve c([2])
rules
  c : list(int)
  c(xs) :- xs == [_].
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test as-pattern in head succeeds [[
resolve c([2, 3])
rules
  c : list(int)
  c(xs@[_|_]) :- xs == [2, 3].
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test as-pattern in guard succeeds [[
resolve c([2, 3])
rules
  c : list(int)
  c(xs) | xs@[_|_] == [2, 3].
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test as-pattern in body succeeds [[
resolve c([2, 3])
rules
  c : list(int)
  c(xs) :- xs@[_|_] == [2, 3].
]] analysis succeeds
   run evaluate-test to SUCCEEDS()

test rule without matching cases fails [[
resolve c([2, 3])
rules
  c : list(int)
  c([]).
]] analysis succeeds
   run evaluate-test to FAILS()
