module nabl2/runtime/solver/errors

imports

  libspoofax/term/origin

  nabl2/shared/-

  nabl2/runtime/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

rules

  nabl2--detail-messages(|detailmsg) = map(nabl2--detail-message(|detailmsg))

  nabl2--detail-message(|detailmsg): Message(kind,msg,pos) -> Message(kind,msg',pos)
    with if Default() := msg then
           msg' := <nabl2--sanitize-message> detailmsg
         else
           msg' := Formatted([<nabl2--sanitize-message> msg, Text(" ("), <nabl2--sanitize-message> detailmsg, Text(")")])
         end

  nabl2--default-messages(|defaultmsg) = map(nabl2--default-message(|defaultmsg))

  nabl2--default-message(|defaultmsg): Message(kind,msg,pos) -> Message(kind,msg',pos)
    with if Default() := msg then
           msg' := <nabl2--sanitize-message> defaultmsg
         else
           msg' := <nabl2--sanitize-message> msg
         end

  nabl2--add-messages(s|msginfo*): sol -> sol'
    with sol' := <foldr(!sol,\ (msginfo,sol) -> <nabl2--add-message(s|msginfo)> sol \)> msginfo*

  nabl2--add-message(s|msginfo): sol -> sol'
    with Message(kind,msg,pos*) := <s> msginfo
    where <is-list> pos*
    with msginfo* := <map(!Message(kind,msg,<id>))> pos*;
         sol' := <nabl2--add-messages(s|msginfo*)> sol

  nabl2--add-message(s|msginfo): sol -> sol'
    with Message(kind,msg,pos) := <s> msginfo
    where <not(is-list)> pos
    with msg' := <nabl2--sanitize-message;pp-NaBL2-MessageContent> msg;
         sol' := <nabl2--add-message> (kind,(pos,msg'),sol)

  nabl2--add-message: (Error(), error, sol) -> <nabl2--sol-add-error(|error)> sol
  nabl2--add-message: (Warning(), warning, sol) -> <nabl2--sol-add-warning(|warning)> sol
  nabl2--add-message: (Note(), note, sol) -> <nabl2--sol-add-note(|note)> sol

  nabl2--message-eq =
    where(eq;(Fst;origin-location-offset,Fst;origin-location-offset);eq)

rules

  nabl2--sanitize-message =
    ?Default()
 <+ ?Formatted(_)
 <+ ?Text(_)
 <+ ?Term(_)
 <+ !Text(<is-string>)
 <+ !Formatted(<is-list;map(nabl2--sanitize-message)>)
 <+ !Term(<id>)

rules

  postprocess-errors: (sol,c*) -> (sol',[])
  with <nabl2--sol-p;nabl2--free-var-messages> sol => fmsg*;
       <map({?c;nabl2--get-constraint-message;nabl2--detail-message(|"Unsolved")})> c* => umsg*;
       <nabl2--add-messages(id|[fmsg*,umsg*])> sol;
       nabl2--unresolved-refs-errors;
       ?sol'

  nabl2--free-var-messages =
    nabl2--all-vars; map(!Message(Warning(),["Free variable ",<id>],<id>))

  nabl2--constraint-message = fail

  nabl2--get-constraint-message =
    ?c
  ; ( (nabl2--constraint-message ; nabl2--default-message(|<pp-NaBL2-Constraint> c))
   <+ !Message(Error(),<pp-NaBL2-Constraint> c,None())
    )

