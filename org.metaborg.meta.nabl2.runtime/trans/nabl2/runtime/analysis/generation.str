module nabl2/runtime/analysis/generation

imports

  nabl2shared
  nabl2/runtime/analysis/-

rules // top-level functions that are called during analysis

  // GTODO : variables and scopes must be unique across files

  generate-constraint-init =
    ?global;
    {| NewScope, NewVar:
	    scope-counter := <new-counter>;
	    var-counter   := <new-counter>;
	    rules( NewScope: _ -> <next-counter> scope-counter
	           NewVar:   _ -> <next-counter> var-counter
	         );
      <generate-constraint-init-rule> global
	  |}

  generate-constraint-file(|params) =
    ?ast;
    {| NewScope, NewVar:
	    scope-counter := <new-counter>;
	    var-counter   := <new-counter>;
	    rules( NewScope: _ -> <next-counter> scope-counter
	           NewVar:   _ -> <next-counter> var-counter
	         );
      <generate-constraint(generate-constraint-default-rule|params)> ast
	  |}

rules

  new-var   = (is-string <+ !"v") => n ; !Var($[[n]'[<NewVar;int-to-string>]])
  new-scope = !Scope(<NewScope;int-to-string>)

  // signatures of the generated rules
  generate-constraint-init-rule = fail
  generate-constraint-default-rule(|params) = fail

  // error throwing wrappers for recursive invocations
  generate-constraint(s|params) =
    generate-constraint-placeholder <+
    s(|params) <+
    fatal-err(|$[No suitable constraint generation rule defined with parameters [<pp-Term> params]])

  generate-constraint-placeholder =
    is-SDF-placeholder; !CTrue()

  debug-generate-constraint = fail
