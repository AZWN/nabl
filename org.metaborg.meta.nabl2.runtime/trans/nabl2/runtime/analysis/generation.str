module nabl2/runtime/analysis/generation

imports

  nabl2shared
  nabl2/runtime/analysis/-

rules // top-level functions that are called during analysis

  // GTODO : variables and scopes must be unique across files

  generate-constraint-init(|source) =
    ?global;
    {| NewScope, NewVar:
	    scope-counter := <new-counter>;
	    var-counter   := <new-counter>;
	    rules( NewScope: _ -> <next-counter> scope-counter
	           NewVar:   _ -> <next-counter> var-counter
	         );
      <generate-constraint-init-rule(|source)> global
	  |}

  generate-constraint-file(|source,params) =
    ?ast;
    {| NewScope, NewVar:
	    scope-counter := <new-counter>;
	    var-counter   := <new-counter>;
	    rules( NewScope: _ -> <next-counter> scope-counter
	           NewVar:   _ -> <next-counter> var-counter
	         );
      <generate-constraint(generate-constraint-default-rule|source,params)> ast
	  |}

rules

  new-var(|source)   = (is-string <+ !"v") => n ; !Var($[[source]'[n]'[<NewVar;int-to-string>]])
  new-scope(|source) = !Scope($[[source]'[<NewScope;int-to-string>]])

  // signatures of the generated rules
  generate-constraint-init-rule(|source) = fail
  generate-constraint-default-rule(|source,params) = fail

  // error throwing wrappers for recursive invocations
  generate-constraint(s|source,params) =
    generate-constraint-placeholder(|params) <+
    s(|source,params) <+
    fatal-err(|$[No suitable constraint generation rule defined with parameters [<pp-Term> params]])

  generate-constraint-placeholder(|params): term -> CTrue()
    where <is-SDF-placeholder> term
    with if (scopes,type) := params then
      <set-params(|scopes);set-type(|type)> term
    else
      <set-params(|params)> term
    end

  debug-generate-constraint = fail
