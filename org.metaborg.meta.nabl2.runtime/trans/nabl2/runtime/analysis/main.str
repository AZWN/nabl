module nabl2/runtime/analysis/main

imports

  runtime/analysis/core
  runtime/editor/-
  runtime/index/-

  nabl2/runtime/analysis/-
  nabl2/runtime/common/-
  nabl2/runtime/prelude/-
  nabl2/runtime/solver/-

  signatures/nabl2/runtime/analysis/-

signature
  sorts AnalysisAction constructors
    Init : AnalysisAction
    IndexAST : AnalysisAction
    PreprocessAST : AnalysisAction
    GenerateConstraint : AnalysisAction
    SolveConstraint : AnalysisAction
    PostprocessAST : AnalysisAction

rules // analysis

  analyze(pre,post): Init() -> (params,C)
    with (params,C) := <generate-constraint-init>

  analyze(pre,post): (IndexAST(),ast) -> ast'
    with <debug> ">>> Indexing AST <<<"
    with report-time(
      ast' := <index-ast> ast
    )

  analyze(pre,post): (PreprocessAST(),ast) -> ast'
    with <debug> ">>> Preprocessing AST <<<"
    with report-time(
      ast' := <pre> ast
    )
  
  analyze(pre,post): (GenerateConstraint(),ast,params) -> C
    with <debug> ">>> Generating constraints <<<"
    with report-time(
      C := <generate-constraint-file(|params)> ast
    )
  
  analyze(pre,post): (SolveConstraint(),C) -> S
    with <debug> ">>> Solving constraints <<<"
    with report-time(
      S := None()
    )
  
  analyze(pre,post): (PostprocessAST(),ast) -> ast'
    with <debug> ">>> Postprocessing AST <<<"
    with report-time(
      ast' := <post> ast
    )
 
rules

  get-analysis = fail

  do-analysis(pre,post):
    source-ast -> (analyzed-ast, error*, warning*, note*)
  with source := <origin-file> source-ast
  with
    where(<debug> $[>>>>>> Analyzing [source] <<<<<<]);
    index-start-collection(|source)

    where(<debug> ">>> Preprocessing AST <<<");
    report-time(
      preprocessed-ast := <pre> source-ast
    );

    where(<debug> ">>> Indexing AST <<<");
    report-time(
      indexed-ast := <index-ast> preprocessed-ast
    );

    where(<debug> ">>> Extracting constraints <<<");
    report-time(
      C := <generate-constraint;
            normalize-constraint> indexed-ast;
      <index-collect-analysis-result(|source)> Constraint(C);
      C' := <in-junctions(sort-constraints)> C
    );

    where(<debug> ">>> Solving constraints (phase 1) <<<");
    report-time(
      sol-i := <initial-solution>;
      [(sol-wm1,C1*)] := <solve-constraints-phase1> (sol-i,[C']);
      g := <fromWM;sol-g> sol-wm1;
      <index-collect-analysis-result(|source)> InitialScopeGraph(g);
      fr* := <resolve-all> g;
      (r1*,rn*) := <partition({\ (r,[dp]) -> (r,dp) \})> fr*;
      sol-wm2 := <fmap(sol-add-r(|r1*))> sol-wm1;
      <index-collect-analysis-result(|source)> InitialResolution(fr*);
      lo* := <join(label-lt)> (<labels>,<labels>);
      <index-collect-analysis-result(|source)>
        ResolutionParams(<labels>,<labels-wf>,lo*)
    );

    where(<debug> ">>> Solving constraints (phase 2) <<<");
    report-time(
      sol-wm3* := <solve-constraints-phase2;map(postprocess-errors(|rn*))> (sol-wm2,C1*)
    );

    where(<debug> ">>> Processing solutions <<<");
    report-time(
      sol-wm* := <qsort((wm-errors;length,wm-errors;length);lt)> sol-wm3*;
      sol* := <map( ![ ScopeGraph(<fromWM;sol-g>)
                     , Typing(<fromWM;sol-p>)
                     , Substitution(<fromWM;sol-s>)
                     , Resolution(<fromWM;sol-r>)
                     , SubtypeRelation(<fromWM;sol-x>)
                     , Errors(<wm-errors>)
                     , Warnings(<wm-warnings>)
                     , Notes(<wm-notes>)
                     ]
                  )> sol-wm*;
      <Hd;map(index-collect-analysis-result(|source))> sol*;
      <index-collect-analysis-result(|source)> AlternativeSolutions(<Tl> sol*);
      (good,bad) := <partition(not(is-erronious));(length,length)> sol-wm*;
      status := (None(),$[Found [<int-to-string> good] correct and [<int-to-string> bad] erronious solutions.]);
      if <gt> (good,1) then
        (statuse*,statusw*,statusn*) := ([],[status],[])
      else if <eq> (good,1) then
        (statuse*,statusw*,statusn*) := ([],[],[status])
      else
        (statuse*,statusw*,statusn*) := ([status],[],[])
      end end;
      ( sol-wm := <Hd> sol-wm*
      < where(<debug> "> Found solution <");
        r* := <fromWM;sol-r> sol-wm;
        where(<debug> "> Applying name resolution <");
        resolved-ast := <apply-resolution(|r*)> indexed-ast;
        where(<debug> "> Applying types <");
        <fromWM;sol-p> sol-wm => p*;
        annotated-ast := <apply-types(|p*)> resolved-ast;
        error* := [statuse*|<wm-errors;mapv(xmlencode)> sol-wm];
        warning* := [statusw*|<wm-warnings;mapv(xmlencode)> sol-wm];
        note* := [statusn*|<wm-notes;mapv(xmlencode)> sol-wm]
      + where(<debug> "> No solution found <");
        r* := <filter((id,Hd))> fr*;
        annotated-ast := <apply-resolution(|r*)> indexed-ast;
        error* := [(None(),"Found no correct or erronious solutions.")];
        warning* := [];
        note* := []
      )
    );

    where(<debug> ">>> Postprocessing AST <<<");
    report-time(
      analyzed-ast := <post> annotated-ast
    );

    index-stop-collection(|source);
    where(<debug> $[>>>>>> Analysis of [source] finished <<<<<<])

rules

  report-time(s) = measure-time(s,where(<debug> $[Finished in [<cputime-to-seconds;real-to-string(|2)>]s]))

  index-collect-analysis-result(|source): result -> <index-collect(|result,source)> "nabl2"

