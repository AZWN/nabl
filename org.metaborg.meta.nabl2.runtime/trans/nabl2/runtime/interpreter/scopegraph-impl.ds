module nabl2/runtime/interpreter/scopegraph-impl

imports

  nabl2/runtime/interpreter/scopegraph-api

signature
 
  constructors
    Scope : String * String -> Scope

  constructors
    Occurrence : Namespace * Name * TermIndex -> Occurrence
 
  sorts TermIndex constructors
    TermIndex : String * Int -> TermIndex 
 
  sorts ScopeGraph ScopeEntry OccurrenceEntry constructors
    G : Map(Scope, ScopeEntry)            // scopes
      * Map(Occurrence, OccurrenceEntry)  // decls
      * Map(Occurrence, OccurrenceEntry)  // refs
      -> ScopeGraph

    S : List(Occurrence)             // decls
      * List(Occurrence)             // refs
      * Map(Label, List(Scope))      // direct edges
      * Map(Label, List(Occurrence)) // import edges
      -> ScopeEntry

    O : List(Scope)             // occurrence scope
      * Map(Label, List(Scope)) // assoc scopes
      ->  OccurrenceEntry
 
  sort aliases
    NameResolution = Map(Occurrence, (Occurrence * Path))
    DeclTypes      = Map(Occurrence, Type)
 
  sorts Property constructors
    Type     : Property
    Params   : Property
    Property : String -> Property
 
  native operators
    nabl2_init    : AST -> NaBL2
    nabl2_indexOf : AST -> TermIndex

  constructors
    NaBL2 : ScopeGraph * NameResolution * DeclTypes -> NaBL2
 
rules

  initNaBL2(t) --> nabl2_init(t).
 
rules // occurrences

  t:Name -mkOccurrence-> Occurrence(ns,t,idx)
    where DefaultNamespace() => ns;
          nabl2_indexOf(t) => idx.

  (ns, t):(String * Name) -mkOccurrence-> Occurrence(ns',t,idx)
    where Namespace(ns) => ns';
          nabl2_indexOf(t) => idx.

  (t, o):(Name * AST) -mkOccurrence-> Occurrence(ns,t,idx)
    where DefaultNamespace() => ns;
          nabl2_indexOf(o) => idx.

  (ns, t, o):(String * Name * AST) -mkOccurrence-> Occurrence(ns',t,idx)
    where Namespace(ns) => ns';
          nabl2_indexOf(o) => idx.

  namespaceOf(Occurrence(ns,_,_)) --> ns.

  nameOf(Occurrence(_,n,_)) --> n.

rules // scope graph

  NaBL2 NaBL2(G(ss,_,_),_,_) |- s:Scope -declsOf-> ds
    where ss[s] => S(ds,_,_,_).

  NaBL2 NaBL2(G(ss,_,_),_,_) |- s:Scope -edgesOf-> es
    where ss[s] => S(_,_,es,_).

  NaBL2 NaBL2(G(ss,_,_),_,_) |- s:Scope -importsOf-> ir
    where ss[s] => S(_,_,_,ir).


  NaBL2 NaBL2(G(_,ds,_),_,_) |- d:Occurrence -scopeOfDecl-> s
    where ds[d] => O([s],_).

  NaBL2 NaBL2(G(_,_,rs),_,_) |- r:Occurrence -scopeOfRef-> s
    where rs[r] => O([s],_).

  NaBL2 NaBL2(G(_,ds,_),_,_) |- d:Occurrence -assocsOf-> as
    where ds[d] => O(_,as).

  NaBL2 NaBL2(_,_,dt) |- o:Occurrence -typeOf-> t
    where dt[o] => t.

rules // name resolution

  NaBL2 NaBL2(_,nr,_) |- r:Occurrence -pathOf-> p
    where nr[r] => (_, p).
