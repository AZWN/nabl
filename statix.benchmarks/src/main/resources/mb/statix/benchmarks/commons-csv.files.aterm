[
( "src/main/java/org/apache/commons/csv/ExtendedBufferedReader.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("CR")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("END_OF_STREAM")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("LF")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("UNDEFINED")
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("BufferedReader")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("IOException")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Reader")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Final2ClassModifier(Final())]
          , Id("ExtendedBufferedReader")
          , []
          , [SuperClass(ClassType([], Id("BufferedReader"), []))]
          , []
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private())]
                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                  , [VariableDeclInit(
                       VariableDecl(Id("lastChar"))
                     , Expression2VariableInitializer(ExpressionName2Expression(ExpressionName(Id("UNDEFINED"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("eolCounter")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("position")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("closed")))]
                  )
                )
              )
            , ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  []
                , []
                , Id("ExtendedBufferedReader")
                , SingleParam(
                    FormalParam2LastFormalParam(
                      FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                      , VariableDecl(Id("reader"))
                      )
                    )
                  )
                , []
                , [SuperConstrInv([], [ExpressionName2Expression(ExpressionName(Id("reader")))])]
                , []
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("read")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("current"))
                                  , Expression2VariableInitializer(InvokeSuper([], Id("read"), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyOr(
                                Eq(
                                  ExpressionName2Expression(ExpressionName(Id("current")))
                                , ExpressionName2Expression(ExpressionName(Id("CR")))
                                )
                              , LazyAnd(
                                  Eq(
                                    ExpressionName2Expression(ExpressionName(Id("current")))
                                  , ExpressionName2Expression(ExpressionName(Id("LF")))
                                  )
                                , NotEq(
                                    ExpressionName2Expression(ExpressionName(Id("lastChar")))
                                  , ExpressionName2Expression(ExpressionName(Id("CR")))
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("eolCounter"))))))]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("lastChar")))
                              , ExpressionName2Expression(ExpressionName(Id("current")))
                              )
                            )
                          )
                        , Statement2BlockStatement(ExpressionStatement(PostIncr(FieldAccess2Expression(Field(This(), Id("position"))))))
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("lastChar")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("getLastChar")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("lastChar")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("read")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannArrayType2UnannReferenceType(UnannArrayTypePrimitive(NumericType(Char()), [AnnotateDim([])])))
                          , VariableDecl(Id("buf"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("offset"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("length"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(
                                ExpressionName2Expression(ExpressionName(Id("length")))
                              , Literal2Expression(IntLiteral2Literal(Deci("0")))
                              )
                            , Block2Statement(
                                Block([Statement2BlockStatement(Return(Literal2Expression(IntLiteral2Literal(Deci("0")))))])
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("len"))
                                  , Expression2VariableInitializer(
                                      InvokeSuper(
                                        []
                                      , Id("read")
                                      , [ ExpressionName2Expression(ExpressionName(Id("buf")))
                                        , ExpressionName2Expression(ExpressionName(Id("offset")))
                                        , ExpressionName2Expression(ExpressionName(Id("length")))
                                        ]
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Gt(
                                ExpressionName2Expression(ExpressionName(Id("len")))
                              , Literal2Expression(IntLiteral2Literal(Deci("0")))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      For(
                                        VarDecls(
                                          []
                                        , UnannPrimitiveType2UnannType(NumericType(Int()))
                                        , [VariableDeclInit(
                                             VariableDecl(Id("i"))
                                           , Expression2VariableInitializer(ExpressionName2Expression(ExpressionName(Id("offset"))))
                                           )]
                                        )
                                      , [ Lt(
                                            ExpressionName2Expression(ExpressionName(Id("i")))
                                          , Add(
                                              ExpressionName2Expression(ExpressionName(Id("offset")))
                                            , ExpressionName2Expression(ExpressionName(Id("len")))
                                            )
                                          )
                                        ]
                                      , Exprs2ForUpdate(ExprList([PostIncr(ExpressionName2Expression(ExpressionName(Id("i"))))]))
                                      , Block2Statement(
                                          Block(
                                            [ LocalVariableDeclarationStatement2BlockStatement(
                                                LocVarDeclStm(
                                                  LocalVarDecl(
                                                    [Final2VariableModifier(Final())]
                                                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                                                  , [ VariableDeclInit(
                                                        VariableDecl(Id("ch"))
                                                      , Expression2VariableInitializer(
                                                          ArrayAccess2Expression(
                                                            ArrayAccess(
                                                              ExpressionName2Expression(ExpressionName(Id("buf")))
                                                            , ExpressionName2Expression(ExpressionName(Id("i")))
                                                            )
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                IfElse(
                                                  Eq(
                                                    ExpressionName2Expression(ExpressionName(Id("ch")))
                                                  , ExpressionName2Expression(ExpressionName(Id("LF")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          If(
                                                            NotEq(
                                                              ExpressionName2Expression(ExpressionName(Id("CR")))
                                                            , Cond(
                                                                Gt(
                                                                  ExpressionName2Expression(ExpressionName(Id("i")))
                                                                , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                                                )
                                                              , ArrayAccess2Expression(
                                                                  ArrayAccess(
                                                                    ExpressionName2Expression(ExpressionName(Id("buf")))
                                                                  , Sub(
                                                                      ExpressionName2Expression(ExpressionName(Id("i")))
                                                                    , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                                                    )
                                                                  )
                                                                )
                                                              , ExpressionName2Expression(ExpressionName(Id("lastChar")))
                                                              )
                                                            )
                                                          , Block2Statement(
                                                              Block(
                                                                [Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("eolCounter"))))))]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , If(
                                                    Eq(
                                                      ExpressionName2Expression(ExpressionName(Id("ch")))
                                                    , ExpressionName2Expression(ExpressionName(Id("CR")))
                                                    )
                                                  , Block2Statement(
                                                      Block(
                                                        [Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("eolCounter"))))))]
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("lastChar")))
                                        , ArrayAccess2Expression(
                                            ArrayAccess(
                                              ExpressionName2Expression(ExpressionName(Id("buf")))
                                            , Sub(
                                                Add(
                                                  ExpressionName2Expression(ExpressionName(Id("offset")))
                                                , ExpressionName2Expression(ExpressionName(Id("len")))
                                                )
                                              , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            , If(
                                Eq(
                                  ExpressionName2Expression(ExpressionName(Id("len")))
                                , Minus(Literal2Expression(IntLiteral2Literal(Deci("1"))))
                                )
                              , Block2Statement(
                                  Block(
                                    [ Statement2BlockStatement(
                                        ExpressionStatement(
                                          Assign(
                                            ExpressionName2LHS(ExpressionName(Id("lastChar")))
                                          , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              AssignAdd(
                                ExpressionName2LHS(ExpressionName(Id("position")))
                              , ExpressionName2Expression(ExpressionName(Id("len")))
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("len")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("readLine")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("line"))
                                  , Expression2VariableInitializer(InvokeSuper([], Id("readLine"), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("line"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("lastChar")))
                                        , ExpressionName2Expression(ExpressionName(Id("LF")))
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("eolCounter"))))))
                                  ]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("lastChar")))
                                        , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("line")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("lookAhead")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeSuper(
                                []
                              , Id("mark")
                              , [Literal2Expression(IntLiteral2Literal(Deci("1")))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("c"))
                                  , Expression2VariableInitializer(InvokeSuper([], Id("read"), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(ExpressionStatement(InvokeSuper([], Id("reset"), [])))
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("c")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getCurrentLineNumber")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              LazyOr(
                                LazyOr(
                                  LazyOr(
                                    Eq(
                                      ExpressionName2Expression(ExpressionName(Id("lastChar")))
                                    , ExpressionName2Expression(ExpressionName(Id("CR")))
                                    )
                                  , Eq(
                                      ExpressionName2Expression(ExpressionName(Id("lastChar")))
                                    , ExpressionName2Expression(ExpressionName(Id("LF")))
                                    )
                                  )
                                , Eq(
                                    ExpressionName2Expression(ExpressionName(Id("lastChar")))
                                  , ExpressionName2Expression(ExpressionName(Id("UNDEFINED")))
                                  )
                                )
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("lastChar")))
                                , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                                )
                              )
                            , Block2Statement(
                                Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("eolCounter")))))])
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              Add(
                                ExpressionName2Expression(ExpressionName(Id("eolCounter")))
                              , Literal2Expression(IntLiteral2Literal(Deci("1")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getPosition")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [Statement2BlockStatement(Return(FieldAccess2Expression(Field(This(), Id("position")))))]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isClosed")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("closed")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      Void()
                    , Id("close")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(ExpressionName2LHS(ExpressionName(Id("closed"))), Literal2Expression(BoolLiteral2Literal(True())))
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("lastChar")))
                              , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                              )
                            )
                          )
                        , Statement2BlockStatement(ExpressionStatement(InvokeSuper([], Id("close"), [])))
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/Assertions.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Objects")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Final2ClassModifier(Final())]
          , Id("Assertions")
          , []
          , []
          , []
          , [ ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  [Private2ConstructorModifier(Private())]
                , []
                , Id("Assertions")
                , NoParams()
                , []
                , []
                , []
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Static2MethodModifier(Static())]
                  , MethodHeader(
                      Void()
                    , Id("notNull")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                          , VariableDecl(Id("parameter"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("parameterName"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("parameter"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ Add(
                                                Add(
                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"Parameter '\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("parameterName")))
                                                )
                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"' must not be null!\"")))
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/package-info.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , []
  , []
  )
),
( "src/main/java/org/apache/commons/csv/CSVFormat.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("BACKSLASH")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("COMMA")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("COMMENT")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("CR")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("CRLF")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("DOUBLE_QUOTE_CHAR")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("EMPTY")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("LF")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("PIPE")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("SP")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("TAB")
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("File")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("FileOutputStream")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("IOException")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("OutputStreamWriter")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Reader")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Serializable")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("StringWriter")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Writer")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
          , Id("charset")
          )
        , Id("Charset")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
          , Id("file")
          )
        , Id("Files")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
          , Id("file")
          )
        , Id("Path")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("sql"))
        , Id("ResultSet")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("sql"))
        , Id("ResultSetMetaData")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("sql"))
        , Id("SQLException")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Arrays")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("HashSet")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Set")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Public2ClassModifier(Public()), Final2ClassModifier(Final())]
          , Id("CSVFormat")
          , []
          , []
          , [SuperInterface([ClassType([], Id("Serializable"), [])])]
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                ClassDeclaration2ClassMemberDeclaration(
                  EnumDeclaration2ClassDeclaration(
                    EnumDecl(
                      [Public2ClassModifier(Public())]
                    , Id("Predefined")
                    , []
                    , [ EnumConstNoBody(
                          []
                        , Id("Default")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("DEFAULT")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("Excel")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("EXCEL")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("InformixUnload")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("INFORMIX_UNLOAD")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("InformixUnloadCsv")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("INFORMIX_UNLOAD_CSV")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("MongoDBCsv")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("MONGODB_CSV")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("MongoDBTsv")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("MONGODB_TSV")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("MySQL")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("MYSQL")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("Oracle")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("ORACLE")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("PostgreSQLCsv")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("POSTGRESQL_CSV")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("PostgreSQLText")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("POSTGRESQL_TEXT")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("RFC4180")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("RFC4180")))]
                           )]
                        )
                      , EnumConstNoBody(
                          []
                        , Id("TDF")
                        , [EnumConstArgs(
                             [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("TDF")))]
                           )]
                        )
                      ]
                    , [ EnumBodyDecs(
                          [ ClassMemberDeclaration2ClassBodyDeclaration(
                              FieldDeclaration2ClassMemberDeclaration(
                                FieldDecl(
                                  [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                                , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                                , [VarDeclId2VarDecl(VariableDecl(Id("format")))]
                                )
                              )
                            )
                          , ConstructorDeclaration2ClassBodyDeclaration(
                              ConstrDecl(
                                []
                              , []
                              , Id("Predefined")
                              , SingleParam(
                                  FormalParam2LastFormalParam(
                                    FormalParam(
                                      [Final2VariableModifier(Final())]
                                    , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                                    , VariableDecl(Id("format"))
                                    )
                                  )
                                )
                              , []
                              , []
                              , [ Statement2BlockStatement(
                                    ExpressionStatement(
                                      Assign(
                                        FieldAccess2LHS(Field(This(), Id("format")))
                                      , ExpressionName2Expression(ExpressionName(Id("format")))
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          , ClassMemberDeclaration2ClassBodyDeclaration(
                              MethodDeclaration2ClassMemberDeclaration(
                                MethodDecl(
                                  [Public2MethodModifier(Public())]
                                , MethodHeader(
                                    UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                                  , Id("getFormat")
                                  , NoParams()
                                  , AnnotatedDims2AnnotatedDimsEmpty([])
                                  , []
                                  )
                                , Block2MethodBody(
                                    Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("format")))))])
                                  )
                                )
                              )
                            )
                          ]
                        )
                      ]
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("DEFAULT"))
                      , Expression2VariableInitializer(
                          UnqualifiedInstance2Expression(
                            NewInstance(
                              []
                            , []
                            , Id("CSVFormat")
                            , []
                            , []
                            , [ ExpressionName2Expression(ExpressionName(Id("COMMA")))
                              , ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(True()))
                              , ExpressionName2Expression(ExpressionName(Id("CRLF")))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(False()))
                              , Literal2Expression(BoolLiteral2Literal(True()))
                              ]
                            )
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("EXCEL"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                            , []
                            , Id("withIgnoreEmptyLines")
                            , [Literal2Expression(BoolLiteral2Literal(False()))]
                            )
                          , []
                          , Id("withAllowMissingColumnNames")
                          , []
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("INFORMIX_UNLOAD"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                , []
                                , Id("withDelimiter")
                                , [ExpressionName2Expression(ExpressionName(Id("PIPE")))]
                                )
                              , []
                              , Id("withEscape")
                              , [ExpressionName2Expression(ExpressionName(Id("BACKSLASH")))]
                              )
                            , []
                            , Id("withQuote")
                            , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                            )
                          , []
                          , Id("withRecordSeparator")
                          , [ExpressionName2Expression(ExpressionName(Id("LF")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("INFORMIX_UNLOAD_CSV"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                              , []
                              , Id("withDelimiter")
                              , [ExpressionName2Expression(ExpressionName(Id("COMMA")))]
                              )
                            , []
                            , Id("withQuote")
                            , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                            )
                          , []
                          , Id("withRecordSeparator")
                          , [ExpressionName2Expression(ExpressionName(Id("LF")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("MONGODB_CSV"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                  , []
                                  , Id("withDelimiter")
                                  , [ExpressionName2Expression(ExpressionName(Id("COMMA")))]
                                  )
                                , []
                                , Id("withEscape")
                                , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                                )
                              , []
                              , Id("withQuote")
                              , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                              )
                            , []
                            , Id("withQuoteMode")
                            , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("MINIMAL")))]
                            )
                          , []
                          , Id("withSkipHeaderRecord")
                          , [Literal2Expression(BoolLiteral2Literal(False()))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("MONGODB_TSV"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                  , []
                                  , Id("withDelimiter")
                                  , [ExpressionName2Expression(ExpressionName(Id("TAB")))]
                                  )
                                , []
                                , Id("withEscape")
                                , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                                )
                              , []
                              , Id("withQuote")
                              , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                              )
                            , []
                            , Id("withQuoteMode")
                            , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("MINIMAL")))]
                            )
                          , []
                          , Id("withSkipHeaderRecord")
                          , [Literal2Expression(BoolLiteral2Literal(False()))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("MYSQL"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    InvokeQExp(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                      , []
                                      , Id("withDelimiter")
                                      , [ExpressionName2Expression(ExpressionName(Id("TAB")))]
                                      )
                                    , []
                                    , Id("withEscape")
                                    , [ExpressionName2Expression(ExpressionName(Id("BACKSLASH")))]
                                    )
                                  , []
                                  , Id("withIgnoreEmptyLines")
                                  , [Literal2Expression(BoolLiteral2Literal(False()))]
                                  )
                                , []
                                , Id("withQuote")
                                , [Literal2Expression(NullLiteral2Literal(Null()))]
                                )
                              , []
                              , Id("withRecordSeparator")
                              , [ExpressionName2Expression(ExpressionName(Id("LF")))]
                              )
                            , []
                            , Id("withNullString")
                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\\\N\"")))]
                            )
                          , []
                          , Id("withQuoteMode")
                          , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("ALL_NON_NULL")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("ORACLE"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    InvokeQExp(
                                      InvokeQExp(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                        , []
                                        , Id("withDelimiter")
                                        , [ExpressionName2Expression(ExpressionName(Id("COMMA")))]
                                        )
                                      , []
                                      , Id("withEscape")
                                      , [ExpressionName2Expression(ExpressionName(Id("BACKSLASH")))]
                                      )
                                    , []
                                    , Id("withIgnoreEmptyLines")
                                    , [Literal2Expression(BoolLiteral2Literal(False()))]
                                    )
                                  , []
                                  , Id("withQuote")
                                  , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                                  )
                                , []
                                , Id("withNullString")
                                , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\\\N\"")))]
                                )
                              , []
                              , Id("withTrim")
                              , []
                              )
                            , []
                            , Id("withSystemRecordSeparator")
                            , []
                            )
                          , []
                          , Id("withQuoteMode")
                          , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("MINIMAL")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("POSTGRESQL_CSV"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    InvokeQExp(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                      , []
                                      , Id("withDelimiter")
                                      , [ExpressionName2Expression(ExpressionName(Id("COMMA")))]
                                      )
                                    , []
                                    , Id("withEscape")
                                    , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                                    )
                                  , []
                                  , Id("withIgnoreEmptyLines")
                                  , [Literal2Expression(BoolLiteral2Literal(False()))]
                                  )
                                , []
                                , Id("withQuote")
                                , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                                )
                              , []
                              , Id("withRecordSeparator")
                              , [ExpressionName2Expression(ExpressionName(Id("LF")))]
                              )
                            , []
                            , Id("withNullString")
                            , [ExpressionName2Expression(ExpressionName(Id("EMPTY")))]
                            )
                          , []
                          , Id("withQuoteMode")
                          , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("ALL_NON_NULL")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("POSTGRESQL_TEXT"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    InvokeQExp(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                                      , []
                                      , Id("withDelimiter")
                                      , [ExpressionName2Expression(ExpressionName(Id("TAB")))]
                                      )
                                    , []
                                    , Id("withEscape")
                                    , [ExpressionName2Expression(ExpressionName(Id("BACKSLASH")))]
                                    )
                                  , []
                                  , Id("withIgnoreEmptyLines")
                                  , [Literal2Expression(BoolLiteral2Literal(False()))]
                                  )
                                , []
                                , Id("withQuote")
                                , [ExpressionName2Expression(ExpressionName(Id("DOUBLE_QUOTE_CHAR")))]
                                )
                              , []
                              , Id("withRecordSeparator")
                              , [ExpressionName2Expression(ExpressionName(Id("LF")))]
                              )
                            , []
                            , Id("withNullString")
                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\\\N\"")))]
                            )
                          , []
                          , Id("withQuoteMode")
                          , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("ALL_NON_NULL")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("RFC4180"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                          , []
                          , Id("withIgnoreEmptyLines")
                          , [Literal2Expression(BoolLiteral2Literal(False()))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VariableDeclInit(
                       VariableDecl(Id("serialVersionUID"))
                     , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("1L"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Public2FieldModifier(Public()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("TDF"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            InvokeQExp(
                              ExpressionName2Expression(ExpressionName(Id("DEFAULT")))
                            , []
                            , Id("withDelimiter")
                            , [ExpressionName2Expression(ExpressionName(Id("TAB")))]
                            )
                          , []
                          , Id("withIgnoreSurroundingSpaces")
                          , []
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isLineBreak")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("c"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              LazyOr(
                                Eq(
                                  ExpressionName2Expression(ExpressionName(Id("c")))
                                , ExpressionName2Expression(ExpressionName(Id("LF")))
                                )
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("c")))
                                , ExpressionName2Expression(ExpressionName(Id("CR")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isLineBreak")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                          , VariableDecl(Id("c"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("c"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , Invoke(
                                  MethodName(Id("isLineBreak"))
                                , [InvokeQExp(
                                     ExpressionName2Expression(ExpressionName(Id("c")))
                                   , []
                                   , Id("charValue")
                                   , []
                                   )]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("newFormat")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("delimiter"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(False()))
                                  , Literal2Expression(BoolLiteral2Literal(True()))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("valueOf")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(AmbiguousName(Id("CSVFormat")), Id("Predefined")))
                                , []
                                , Id("valueOf")
                                , [ExpressionName2Expression(ExpressionName(Id("format")))]
                                )
                              , []
                              , Id("getFormat")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("allowDuplicateHeaderNames")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("allowMissingColumnNames")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("autoFlush")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("commentMarker")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("delimiter")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("escapeCharacter")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannArrayType2UnannReferenceType(
                        UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                      )
                    )
                  , [VarDeclId2VarDecl(VariableDecl(Id("header")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannArrayType2UnannReferenceType(
                        UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                      )
                    )
                  , [VarDeclId2VarDecl(VariableDecl(Id("headerComments")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("ignoreEmptyLines")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("ignoreHeaderCase")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("ignoreSurroundingSpaces")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("nullString")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("quoteCharacter")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("quotedNullString")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("QuoteMode"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("quoteMode")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("recordSeparator")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("skipHeaderRecord")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("trailingDelimiter")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("trim")))]
                  )
                )
              )
            , ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  [Private2ConstructorModifier(Private())]
                , []
                , Id("CSVFormat")
                , ParamList(
                    [ FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(NumericType(Char()))
                      , VariableDecl(Id("delimiter"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                      , VariableDecl(Id("quoteChar"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("QuoteMode"), [])))
                      , VariableDecl(Id("quoteMode"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                      , VariableDecl(Id("commentStart"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                      , VariableDecl(Id("escape"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("ignoreSurroundingSpaces"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("ignoreEmptyLines"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                      , VariableDecl(Id("recordSeparator"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                      , VariableDecl(Id("nullString"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("Object"), []), [AnnotateDim([])])
                          )
                        )
                      , VariableDecl(Id("headerComments"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                          )
                        )
                      , VariableDecl(Id("header"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("skipHeaderRecord"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("allowMissingColumnNames"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("ignoreHeaderCase"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("trim"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("trailingDelimiter"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("autoFlush"))
                      )
                    ]
                  , FormalParam2LastFormalParam(
                      FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(BooleanType())
                      , VariableDecl(Id("allowDuplicateHeaderNames"))
                      )
                    )
                  )
                , []
                , []
                , [ Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("delimiter")))
                        , ExpressionName2Expression(ExpressionName(Id("delimiter")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("quoteCharacter")))
                        , ExpressionName2Expression(ExpressionName(Id("quoteChar")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("quoteMode")))
                        , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("commentMarker")))
                        , ExpressionName2Expression(ExpressionName(Id("commentStart")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("escapeCharacter")))
                        , ExpressionName2Expression(ExpressionName(Id("escape")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("ignoreSurroundingSpaces")))
                        , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("allowMissingColumnNames")))
                        , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("ignoreEmptyLines")))
                        , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("recordSeparator")))
                        , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("nullString")))
                        , ExpressionName2Expression(ExpressionName(Id("nullString")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("headerComments")))
                        , Invoke(
                            MethodName(Id("toStringArray"))
                          , [ExpressionName2Expression(ExpressionName(Id("headerComments")))]
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("header")))
                        , Cond(
                            Eq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                          , Literal2Expression(NullLiteral2Literal(Null()))
                          , InvokeQExp(
                              ExpressionName2Expression(ExpressionName(Id("header")))
                            , []
                            , Id("clone")
                            , []
                            )
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("skipHeaderRecord")))
                        , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("ignoreHeaderCase")))
                        , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("trailingDelimiter")))
                        , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("trim")))
                        , ExpressionName2Expression(ExpressionName(Id("trim")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("autoFlush")))
                        , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("quotedNullString")))
                        , Add(
                            Add(
                              ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                            , ExpressionName2Expression(ExpressionName(Id("nullString")))
                            )
                          , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("allowDuplicateHeaderNames")))
                        , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                        )
                      )
                    )
                  , Statement2BlockStatement(ExpressionStatement(Invoke(MethodName(Id("validate")), [])))
                  ]
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("equals")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                          , VariableDecl(Id("obj"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(This(), ExpressionName2Expression(ExpressionName(Id("obj"))))
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(True()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("obj"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                Invoke(MethodName(Id("getClass")), [])
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("obj")))
                                , []
                                , Id("getClass")
                                , []
                                )
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("other"))
                                  , Expression2VariableInitializer(
                                      CastReference(
                                        ClassType2ReferenceType(ClassType([], Id("CSVFormat"), []))
                                      , []
                                      , ExpressionName2Expression(ExpressionName(Id("obj")))
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("delimiter")))
                              , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("delimiter")))
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                              , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("quoteMode")))
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("quoteCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        NotEq(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("quoteCharacter")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                                      )
                                    )
                                  ]
                                )
                              )
                            , If(
                                Not(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , []
                                  , Id("equals")
                                  , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("quoteCharacter")))]
                                  )
                                )
                              , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("commentMarker"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        NotEq(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("commentMarker")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                                      )
                                    )
                                  ]
                                )
                              )
                            , If(
                                Not(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , []
                                  , Id("equals")
                                  , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("commentMarker")))]
                                  )
                                )
                              , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("escapeCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        NotEq(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("escapeCharacter")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                                      )
                                    )
                                  ]
                                )
                              )
                            , If(
                                Not(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , []
                                  , Id("equals")
                                  , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("escapeCharacter")))]
                                  )
                                )
                              , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("nullString"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        NotEq(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("nullString")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                                      )
                                    )
                                  ]
                                )
                              )
                            , If(
                                Not(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , []
                                  , Id("equals")
                                  , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("nullString")))]
                                  )
                                )
                              , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Not(
                                InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                , []
                                , Id("equals")
                                , [ ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("header")))
                                  ]
                                )
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                              , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("ignoreSurroundingSpaces")))
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                              , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("ignoreEmptyLines")))
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                              , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("skipHeaderRecord")))
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("recordSeparator"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        NotEq(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("recordSeparator")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                                      )
                                    )
                                  ]
                                )
                              )
                            , If(
                                Not(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , []
                                  , Id("equals")
                                  , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("other")), Id("recordSeparator")))]
                                  )
                                )
                              , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(True()))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("format")
                    , SingleParam(
                        VarArityParam(
                          [Final2VariableModifier(Final())]
                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                        , []
                        , VariableDecl(Id("values"))
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringWriter"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("out"))
                                  , Expression2VariableInitializer(
                                      UnqualifiedInstance2Expression(
                                        NewInstance([], [], Id("StringWriter"), [], [], [])
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            TryWithResources(
                              [ Resource(
                                  [Final2VariableModifier(Final())]
                                , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVPrinter"), [])))
                                , VariableDecl(Id("csvPrinter"))
                                , UnqualifiedInstance2Expression(
                                    NewInstance(
                                      []
                                    , []
                                    , Id("CSVPrinter")
                                    , []
                                    , []
                                    , [ExpressionName2Expression(ExpressionName(Id("out"))), This()]
                                    )
                                  )
                                )
                              ]
                            , Block(
                                [ Statement2BlockStatement(
                                    ExpressionStatement(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("csvPrinter")))
                                      , []
                                      , Id("printRecord")
                                      , [ExpressionName2Expression(ExpressionName(Id("values")))]
                                      )
                                    )
                                  )
                                , Statement2BlockStatement(
                                    Return(
                                      InvokeQExp(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("toString")
                                        , []
                                        )
                                      , []
                                      , Id("trim")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            , [ Catch(
                                  CatchParam(
                                    [Final2VariableModifier(Final())]
                                  , CatchType(ClassType(Id("IOException"), []), [])
                                  , VariableDecl(Id("e"))
                                  )
                                , Block(
                                    [ Statement2BlockStatement(
                                        Throw(
                                          UnqualifiedInstance2Expression(
                                            NewInstance(
                                              []
                                            , []
                                            , Id("IllegalStateException")
                                            , []
                                            , []
                                            , [ExpressionName2Expression(ExpressionName(Id("e")))]
                                            )
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getAllowDuplicateHeaderNames")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getAllowMissingColumnNames")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getAutoFlush")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("autoFlush")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), []))))
                    , Id("getCommentMarker")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("commentMarker")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Char())))
                    , Id("getDelimiter")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("delimiter")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), []))))
                    , Id("getEscapeCharacter")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                          )
                        )
                      )
                    , Id("getHeader")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Cond(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("header")))
                                , []
                                , Id("clone")
                                , []
                                )
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                          )
                        )
                      )
                    , Id("getHeaderComments")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Cond(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("headerComments"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                , []
                                , Id("clone")
                                , []
                                )
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getIgnoreEmptyLines")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getIgnoreHeaderCase")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getIgnoreSurroundingSpaces")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("getNullString")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("nullString")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), []))))
                    , Id("getQuoteCharacter")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("QuoteMode"), []))))
                    , Id("getQuoteMode")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("quoteMode")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("getRecordSeparator")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("recordSeparator")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getSkipHeaderRecord")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getTrailingDelimiter")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("getTrim")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("trim")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("hashCode")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("prime"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("31"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("result"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("1"))))
                                 )]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    Eq(ExpressionName2Expression(ExpressionName(Id("quoteMode"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                    , []
                                    , Id("hashCode")
                                    , []
                                    )
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    Eq(ExpressionName2Expression(ExpressionName(Id("quoteCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                    , []
                                    , Id("hashCode")
                                    , []
                                    )
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    Eq(ExpressionName2Expression(ExpressionName(Id("commentMarker"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                    , []
                                    , Id("hashCode")
                                    , []
                                    )
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    Eq(ExpressionName2Expression(ExpressionName(Id("escapeCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                    , []
                                    , Id("hashCode")
                                    , []
                                    )
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    Eq(ExpressionName2Expression(ExpressionName(Id("nullString"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("nullString")))
                                    , []
                                    , Id("hashCode")
                                    , []
                                    )
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1231")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1237")))
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1231")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1237")))
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1231")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1237")))
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1231")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("1237")))
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , Cond(
                                    Eq(ExpressionName2Expression(ExpressionName(Id("recordSeparator"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                    , []
                                    , Id("hashCode")
                                    , []
                                    )
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("result")))
                              , Add(
                                  Mul(
                                    ExpressionName2Expression(ExpressionName(Id("prime")))
                                  , ExpressionName2Expression(ExpressionName(Id("result")))
                                  )
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                  , []
                                  , Id("hashCode")
                                  , [ExpressionName2Expression(ExpressionName(Id("header")))]
                                  )
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("result")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isCommentMarkerSet")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("commentMarker"))), Literal2Expression(NullLiteral2Literal(Null())))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isEscapeCharacterSet")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("escapeCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isNullStringSet")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("nullString"))), Literal2Expression(NullLiteral2Literal(Null())))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isQuoteCharacterSet")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("quoteCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("in"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVParser")
                                , []
                                , []
                                , [ExpressionName2Expression(ExpressionName(Id("in"))), This()]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVPrinter"), []))))
                    , Id("print")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVPrinter")
                                , []
                                , []
                                , [ExpressionName2Expression(ExpressionName(Id("out"))), This()]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [ Annotation2MethodModifier(
                        SingleElemAnno(
                          TypeName(Id("SuppressWarnings"))
                        , Expression2ElementValue(Literal2Expression(StringLiteral2Literal(StringLiteral("\"resource\""))))
                        )
                      )
                    , Public2MethodModifier(Public())
                    ]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVPrinter"), []))))
                    , Id("print")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("File"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Charset"), [])))
                          , VariableDecl(Id("charset"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVPrinter")
                                , []
                                , []
                                , [ UnqualifiedInstance2Expression(
                                      NewInstance(
                                        []
                                      , []
                                      , Id("OutputStreamWriter")
                                      , []
                                      , []
                                      , [ UnqualifiedInstance2Expression(
                                            NewInstance(
                                              []
                                            , []
                                            , Id("FileOutputStream")
                                            , []
                                            , []
                                            , [ExpressionName2Expression(ExpressionName(Id("out")))]
                                            )
                                          )
                                        , ExpressionName2Expression(ExpressionName(Id("charset")))
                                        ]
                                      )
                                    )
                                  , This()
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      Void()
                    , Id("print")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                          , VariableDecl(Id("value"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("newRecord"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharSequence"), [])))
                              , [VarDeclId2VarDecl(VariableDecl(Id("charSequence")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("value"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      IfElse(
                                        Eq(Literal2Expression(NullLiteral2Literal(Null())), ExpressionName2Expression(ExpressionName(Id("nullString"))))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("charSequence")))
                                                  , ExpressionName2Expression(ExpressionName(Id("EMPTY")))
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                IfElse(
                                                  Eq(
                                                    ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("ALL")))
                                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("charSequence")))
                                                            , ExpressionName2Expression(ExpressionName(Id("quotedNullString")))
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("charSequence")))
                                                            , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      IfElse(
                                        InstanceOf(
                                          ExpressionName2Expression(ExpressionName(Id("value")))
                                        , ClassType2ReferenceType(ClassType([], Id("CharSequence"), []))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("charSequence")))
                                                  , CastReference(
                                                      ClassType2ReferenceType(ClassType([], Id("CharSequence"), []))
                                                    , []
                                                    , ExpressionName2Expression(ExpressionName(Id("value")))
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , IfElse(
                                          InstanceOf(
                                            ExpressionName2Expression(ExpressionName(Id("value")))
                                          , ClassType2ReferenceType(ClassType([], Id("Reader"), []))
                                          )
                                        , Block2Statement(
                                            Block(
                                              [ Statement2BlockStatement(
                                                  ExpressionStatement(
                                                    Invoke(
                                                      MethodName(Id("print"))
                                                    , [ CastReference(
                                                          ClassType2ReferenceType(ClassType([], Id("Reader"), []))
                                                        , []
                                                        , ExpressionName2Expression(ExpressionName(Id("value")))
                                                        )
                                                      , ExpressionName2Expression(ExpressionName(Id("out")))
                                                      , ExpressionName2Expression(ExpressionName(Id("newRecord")))
                                                      ]
                                                    )
                                                  )
                                                )
                                              , Statement2BlockStatement(Return())
                                              ]
                                            )
                                          )
                                        , Block2Statement(
                                            Block(
                                              [ Statement2BlockStatement(
                                                  ExpressionStatement(
                                                    Assign(
                                                      ExpressionName2LHS(ExpressionName(Id("charSequence")))
                                                    , InvokeQExp(
                                                        ExpressionName2Expression(ExpressionName(Id("value")))
                                                      , []
                                                      , Id("toString")
                                                      , []
                                                      )
                                                    )
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("charSequence")))
                              , Cond(
                                  Invoke(MethodName(Id("getTrim")), [])
                                , Invoke(
                                    MethodName(Id("trim"))
                                  , [ExpressionName2Expression(ExpressionName(Id("charSequence")))]
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Invoke(
                                MethodName(Id("print"))
                              , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                , ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                , ExpressionName2Expression(ExpressionName(Id("out")))
                                , ExpressionName2Expression(ExpressionName(Id("newRecord")))
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("print")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                          , VariableDecl(Id("object"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharSequence"), [])))
                          , VariableDecl(Id("value"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("newRecord"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("offset"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("len"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("value")))
                                      , []
                                      , Id("length")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Not(ExpressionName2Expression(ExpressionName(Id("newRecord"))))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [Invoke(MethodName(Id("getDelimiter")), [])]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("object"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [ExpressionName2Expression(ExpressionName(Id("value")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            , IfElse(
                                Invoke(MethodName(Id("isQuoteCharacterSet")), [])
                              , Block2Statement(
                                  Block(
                                    [ Statement2BlockStatement(
                                        ExpressionStatement(
                                          Invoke(
                                            MethodName(Id("printWithQuotes"))
                                          , [ ExpressionName2Expression(ExpressionName(Id("object")))
                                            , ExpressionName2Expression(ExpressionName(Id("value")))
                                            , ExpressionName2Expression(ExpressionName(Id("out")))
                                            , ExpressionName2Expression(ExpressionName(Id("newRecord")))
                                            ]
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              , IfElse(
                                  Invoke(MethodName(Id("isEscapeCharacterSet")), [])
                                , Block2Statement(
                                    Block(
                                      [ Statement2BlockStatement(
                                          ExpressionStatement(
                                            Invoke(
                                              MethodName(Id("printWithEscapes"))
                                            , [ExpressionName2Expression(ExpressionName(Id("value"))), ExpressionName2Expression(ExpressionName(Id("out")))]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                , Block2Statement(
                                    Block(
                                      [ Statement2BlockStatement(
                                          ExpressionStatement(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("out")))
                                            , []
                                            , Id("append")
                                            , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                              , ExpressionName2Expression(ExpressionName(Id("offset")))
                                              , ExpressionName2Expression(ExpressionName(Id("len")))
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVPrinter"), []))))
                    , Id("print")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Path"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Charset"), [])))
                          , VariableDecl(Id("charset"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("print"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Files")))
                                  , []
                                  , Id("newBufferedWriter")
                                  , [ExpressionName2Expression(ExpressionName(Id("out"))), ExpressionName2Expression(ExpressionName(Id("charset")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("print")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("reader"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("newRecord"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Not(ExpressionName2Expression(ExpressionName(Id("newRecord"))))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [Invoke(MethodName(Id("getDelimiter")), [])]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Invoke(MethodName(Id("isQuoteCharacterSet")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Invoke(
                                          MethodName(Id("printWithQuotes"))
                                        , [ExpressionName2Expression(ExpressionName(Id("reader"))), ExpressionName2Expression(ExpressionName(Id("out")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            , IfElse(
                                Invoke(MethodName(Id("isEscapeCharacterSet")), [])
                              , Block2Statement(
                                  Block(
                                    [ Statement2BlockStatement(
                                        ExpressionStatement(
                                          Invoke(
                                            MethodName(Id("printWithEscapes"))
                                          , [ExpressionName2Expression(ExpressionName(Id("reader"))), ExpressionName2Expression(ExpressionName(Id("out")))]
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              , IfElse(
                                  InstanceOf(
                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                  , ClassType2ReferenceType(ClassType([], Id("Writer"), []))
                                  )
                                , Block2Statement(
                                    Block(
                                      [ Statement2BlockStatement(
                                          ExpressionStatement(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("IOUtils")))
                                            , []
                                            , Id("copyLarge")
                                            , [ ExpressionName2Expression(ExpressionName(Id("reader")))
                                              , CastReference(
                                                  ClassType2ReferenceType(ClassType([], Id("Writer"), []))
                                                , []
                                                , ExpressionName2Expression(ExpressionName(Id("out")))
                                                )
                                              ]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                , Block2Statement(
                                    Block(
                                      [ Statement2BlockStatement(
                                          ExpressionStatement(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("IOUtils")))
                                            , []
                                            , Id("copy")
                                            , [ExpressionName2Expression(ExpressionName(Id("reader"))), ExpressionName2Expression(ExpressionName(Id("out")))]
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVPrinter"), []))))
                    , Id("printer")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVPrinter")
                                , []
                                , []
                                , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("System")), Id("out"))), This()]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      Void()
                    , Id("println")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("getTrailingDelimiter")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [Invoke(MethodName(Id("getDelimiter")), [])]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("recordSeparator"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [ExpressionName2Expression(ExpressionName(Id("recordSeparator")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      Void()
                    , Id("printRecord")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , VarArityParam(
                          [Final2VariableModifier(Final())]
                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                        , []
                        , VariableDecl(Id("values"))
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            For(
                              VarDecls(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("i"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            , [ Lt(
                                  ExpressionName2Expression(ExpressionName(Id("i")))
                                , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))
                                )
                              ]
                            , Exprs2ForUpdate(ExprList([PostIncr(ExpressionName2Expression(ExpressionName(Id("i"))))]))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Invoke(
                                          MethodName(Id("print"))
                                        , [ ArrayAccess2Expression(
                                              ArrayAccess(
                                                ExpressionName2Expression(ExpressionName(Id("values")))
                                              , ExpressionName2Expression(ExpressionName(Id("i")))
                                              )
                                            )
                                          , ExpressionName2Expression(ExpressionName(Id("out")))
                                          , Eq(
                                              ExpressionName2Expression(ExpressionName(Id("i")))
                                            , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Invoke(
                                MethodName(Id("println"))
                              , [ExpressionName2Expression(ExpressionName(Id("out")))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("printWithEscapes")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharSequence"), [])))
                          , VariableDecl(Id("value"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("start"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("pos"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("len"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("value")))
                                      , []
                                      , Id("length")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("end"))
                                 , Expression2VariableInitializer(ExpressionName2Expression(ExpressionName(Id("len"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("delim"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getDelimiter")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("escape"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        Invoke(MethodName(Id("getEscapeCharacter")), [])
                                      , []
                                      , Id("charValue")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              Lt(
                                ExpressionName2Expression(ExpressionName(Id("pos")))
                              , ExpressionName2Expression(ExpressionName(Id("end")))
                              )
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          []
                                        , UnannPrimitiveType2UnannType(NumericType(Char()))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("c"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("value")))
                                                , []
                                                , Id("charAt")
                                                , [ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        LazyOr(
                                          LazyOr(
                                            LazyOr(
                                              Eq(
                                                ExpressionName2Expression(ExpressionName(Id("c")))
                                              , ExpressionName2Expression(ExpressionName(Id("CR")))
                                              )
                                            , Eq(
                                                ExpressionName2Expression(ExpressionName(Id("c")))
                                              , ExpressionName2Expression(ExpressionName(Id("LF")))
                                              )
                                            )
                                          , Eq(
                                              ExpressionName2Expression(ExpressionName(Id("c")))
                                            , ExpressionName2Expression(ExpressionName(Id("delim")))
                                            )
                                          )
                                        , Eq(
                                            ExpressionName2Expression(ExpressionName(Id("c")))
                                          , ExpressionName2Expression(ExpressionName(Id("escape")))
                                          )
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                If(
                                                  Gt(
                                                    ExpressionName2Expression(ExpressionName(Id("pos")))
                                                  , ExpressionName2Expression(ExpressionName(Id("start")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("out")))
                                                            , []
                                                            , Id("append")
                                                            , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                                              , ExpressionName2Expression(ExpressionName(Id("start")))
                                                              , ExpressionName2Expression(ExpressionName(Id("pos")))
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                IfElse(
                                                  Eq(
                                                    ExpressionName2Expression(ExpressionName(Id("c")))
                                                  , ExpressionName2Expression(ExpressionName(Id("LF")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("c")))
                                                            , Literal2Expression(CharacterLiteral2Literal(CharLiteral("'n'")))
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , If(
                                                    Eq(
                                                      ExpressionName2Expression(ExpressionName(Id("c")))
                                                    , ExpressionName2Expression(ExpressionName(Id("CR")))
                                                    )
                                                  , Block2Statement(
                                                      Block(
                                                        [ Statement2BlockStatement(
                                                            ExpressionStatement(
                                                              Assign(
                                                                ExpressionName2LHS(ExpressionName(Id("c")))
                                                              , Literal2Expression(CharacterLiteral2Literal(CharLiteral("'r'")))
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [ExpressionName2Expression(ExpressionName(Id("escape")))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("start")))
                                                  , Add(
                                                      ExpressionName2Expression(ExpressionName(Id("pos")))
                                                    , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("pos"))))))
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Gt(
                                ExpressionName2Expression(ExpressionName(Id("pos")))
                              , ExpressionName2Expression(ExpressionName(Id("start")))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                          , ExpressionName2Expression(ExpressionName(Id("start")))
                                          , ExpressionName2Expression(ExpressionName(Id("pos")))
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("printWithEscapes")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("reader"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("start"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("pos"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("delim"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getDelimiter")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("escape"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        Invoke(MethodName(Id("getEscapeCharacter")), [])
                                      , []
                                      , Id("charValue")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringBuilder"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("builder"))
                                  , Expression2VariableInitializer(
                                      UnqualifiedInstance2Expression(
                                        NewInstance(
                                          []
                                        , []
                                        , Id("StringBuilder")
                                        , []
                                        , []
                                        , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("IOUtils")), Id("DEFAULT_BUFFER_SIZE")))]
                                        )
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VarDeclId2VarDecl(VariableDecl(Id("c")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              NotEq(
                                Minus(Literal2Expression(IntLiteral2Literal(Deci("1"))))
                              , Assign(
                                  ExpressionName2LHS(ExpressionName(Id("c")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("reader")))
                                  , []
                                  , Id("read")
                                  , []
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("builder")))
                                        , []
                                        , Id("append")
                                        , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        LazyOr(
                                          LazyOr(
                                            LazyOr(
                                              Eq(
                                                ExpressionName2Expression(ExpressionName(Id("c")))
                                              , ExpressionName2Expression(ExpressionName(Id("CR")))
                                              )
                                            , Eq(
                                                ExpressionName2Expression(ExpressionName(Id("c")))
                                              , ExpressionName2Expression(ExpressionName(Id("LF")))
                                              )
                                            )
                                          , Eq(
                                              ExpressionName2Expression(ExpressionName(Id("c")))
                                            , ExpressionName2Expression(ExpressionName(Id("delim")))
                                            )
                                          )
                                        , Eq(
                                            ExpressionName2Expression(ExpressionName(Id("c")))
                                          , ExpressionName2Expression(ExpressionName(Id("escape")))
                                          )
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                If(
                                                  Gt(
                                                    ExpressionName2Expression(ExpressionName(Id("pos")))
                                                  , ExpressionName2Expression(ExpressionName(Id("start")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("out")))
                                                            , []
                                                            , Id("append")
                                                            , [ InvokeQExp(
                                                                  ExpressionName2Expression(ExpressionName(Id("builder")))
                                                                , []
                                                                , Id("substring")
                                                                , [ExpressionName2Expression(ExpressionName(Id("start"))), ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("builder")))
                                                            , []
                                                            , Id("setLength")
                                                            , [Literal2Expression(IntLiteral2Literal(Deci("0")))]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                IfElse(
                                                  Eq(
                                                    ExpressionName2Expression(ExpressionName(Id("c")))
                                                  , ExpressionName2Expression(ExpressionName(Id("LF")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("c")))
                                                            , Literal2Expression(CharacterLiteral2Literal(CharLiteral("'n'")))
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , If(
                                                    Eq(
                                                      ExpressionName2Expression(ExpressionName(Id("c")))
                                                    , ExpressionName2Expression(ExpressionName(Id("CR")))
                                                    )
                                                  , Block2Statement(
                                                      Block(
                                                        [ Statement2BlockStatement(
                                                            ExpressionStatement(
                                                              Assign(
                                                                ExpressionName2LHS(ExpressionName(Id("c")))
                                                              , Literal2Expression(CharacterLiteral2Literal(CharLiteral("'r'")))
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [ExpressionName2Expression(ExpressionName(Id("escape")))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("start")))
                                                  , Add(
                                                      ExpressionName2Expression(ExpressionName(Id("pos")))
                                                    , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("pos"))))))
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Gt(
                                ExpressionName2Expression(ExpressionName(Id("pos")))
                              , ExpressionName2Expression(ExpressionName(Id("start")))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [ InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("builder")))
                                            , []
                                            , Id("substring")
                                            , [ExpressionName2Expression(ExpressionName(Id("start"))), ExpressionName2Expression(ExpressionName(Id("pos")))]
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("printWithQuotes")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                          , VariableDecl(Id("object"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharSequence"), [])))
                          , VariableDecl(Id("value"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("newRecord"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(BooleanType())
                              , [VariableDeclInit(VariableDecl(Id("quote")), Expression2VariableInitializer(Literal2Expression(BoolLiteral2Literal(False()))))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("start"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("pos"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("len"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("value")))
                                      , []
                                      , Id("length")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("end"))
                                 , Expression2VariableInitializer(ExpressionName2Expression(ExpressionName(Id("len"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("delimChar"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getDelimiter")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("quoteChar"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        Invoke(MethodName(Id("getQuoteCharacter")), [])
                                      , []
                                      , Id("charValue")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("QuoteMode"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("quoteModePolicy"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getQuoteMode")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("quoteModePolicy"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("quoteModePolicy")))
                                        , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("MINIMAL")))
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Switch(
                              ExpressionName2Expression(ExpressionName(Id("quoteModePolicy")))
                            , [ SwitchGroup(
                                  [ CaseExpr(ExpressionName2Expression(ExpressionName(Id("ALL"))))
                                  , CaseExpr(ExpressionName2Expression(ExpressionName(Id("ALL_NON_NULL"))))
                                  ]
                                , [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(ExpressionName2LHS(ExpressionName(Id("quote"))), Literal2Expression(BoolLiteral2Literal(True())))
                                      )
                                    )
                                  , Statement2BlockStatement(Break())
                                  ]
                                )
                              , SwitchGroup(
                                  [CaseExpr(ExpressionName2Expression(ExpressionName(Id("NON_NUMERIC"))))]
                                , [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("quote")))
                                        , Not(
                                            InstanceOf(
                                              ExpressionName2Expression(ExpressionName(Id("object")))
                                            , ClassType2ReferenceType(ClassType([], Id("Number"), []))
                                            )
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Break())
                                  ]
                                )
                              , SwitchGroup(
                                  [CaseExpr(ExpressionName2Expression(ExpressionName(Id("NONE"))))]
                                , [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Invoke(
                                          MethodName(Id("printWithEscapes"))
                                        , [ExpressionName2Expression(ExpressionName(Id("value"))), ExpressionName2Expression(ExpressionName(Id("out")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return())
                                  ]
                                )
                              , SwitchGroup(
                                  [CaseExpr(ExpressionName2Expression(ExpressionName(Id("MINIMAL"))))]
                                , [ Statement2BlockStatement(
                                      IfElse(
                                        LtEq(
                                          ExpressionName2Expression(ExpressionName(Id("len")))
                                        , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                If(
                                                  ExpressionName2Expression(ExpressionName(Id("newRecord")))
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(ExpressionName2LHS(ExpressionName(Id("quote"))), Literal2Expression(BoolLiteral2Literal(True())))
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ LocalVariableDeclarationStatement2BlockStatement(
                                                LocVarDeclStm(
                                                  LocalVarDecl(
                                                    []
                                                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                                                  , [ VariableDeclInit(
                                                        VariableDecl(Id("c"))
                                                      , Expression2VariableInitializer(
                                                          InvokeQExp(
                                                            ExpressionName2Expression(ExpressionName(Id("value")))
                                                          , []
                                                          , Id("charAt")
                                                          , [ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                          )
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                IfElse(
                                                  LtEq(
                                                    ExpressionName2Expression(ExpressionName(Id("c")))
                                                  , ExpressionName2Expression(ExpressionName(Id("COMMENT")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(ExpressionName2LHS(ExpressionName(Id("quote"))), Literal2Expression(BoolLiteral2Literal(True())))
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          While(
                                                            Lt(
                                                              ExpressionName2Expression(ExpressionName(Id("pos")))
                                                            , ExpressionName2Expression(ExpressionName(Id("end")))
                                                            )
                                                          , Block2Statement(
                                                              Block(
                                                                [ Statement2BlockStatement(
                                                                    ExpressionStatement(
                                                                      Assign(
                                                                        ExpressionName2LHS(ExpressionName(Id("c")))
                                                                      , InvokeQExp(
                                                                          ExpressionName2Expression(ExpressionName(Id("value")))
                                                                        , []
                                                                        , Id("charAt")
                                                                        , [ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(
                                                                    If(
                                                                      LazyOr(
                                                                        LazyOr(
                                                                          LazyOr(
                                                                            Eq(
                                                                              ExpressionName2Expression(ExpressionName(Id("c")))
                                                                            , ExpressionName2Expression(ExpressionName(Id("LF")))
                                                                            )
                                                                          , Eq(
                                                                              ExpressionName2Expression(ExpressionName(Id("c")))
                                                                            , ExpressionName2Expression(ExpressionName(Id("CR")))
                                                                            )
                                                                          )
                                                                        , Eq(
                                                                            ExpressionName2Expression(ExpressionName(Id("c")))
                                                                          , ExpressionName2Expression(ExpressionName(Id("quoteChar")))
                                                                          )
                                                                        )
                                                                      , Eq(
                                                                          ExpressionName2Expression(ExpressionName(Id("c")))
                                                                        , ExpressionName2Expression(ExpressionName(Id("delimChar")))
                                                                        )
                                                                      )
                                                                    , Block2Statement(
                                                                        Block(
                                                                          [ Statement2BlockStatement(
                                                                              ExpressionStatement(
                                                                                Assign(ExpressionName2LHS(ExpressionName(Id("quote"))), Literal2Expression(BoolLiteral2Literal(True())))
                                                                              )
                                                                            )
                                                                          , Statement2BlockStatement(Break())
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("pos"))))))
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          If(
                                                            Not(ExpressionName2Expression(ExpressionName(Id("quote"))))
                                                          , Block2Statement(
                                                              Block(
                                                                [ Statement2BlockStatement(
                                                                    ExpressionStatement(
                                                                      Assign(
                                                                        ExpressionName2LHS(ExpressionName(Id("pos")))
                                                                      , Sub(
                                                                          ExpressionName2Expression(ExpressionName(Id("end")))
                                                                        , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(
                                                                    ExpressionStatement(
                                                                      Assign(
                                                                        ExpressionName2LHS(ExpressionName(Id("c")))
                                                                      , InvokeQExp(
                                                                          ExpressionName2Expression(ExpressionName(Id("value")))
                                                                        , []
                                                                        , Id("charAt")
                                                                        , [ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(
                                                                    If(
                                                                      LtEq(
                                                                        ExpressionName2Expression(ExpressionName(Id("c")))
                                                                      , ExpressionName2Expression(ExpressionName(Id("SP")))
                                                                      )
                                                                    , Block2Statement(
                                                                        Block(
                                                                          [ Statement2BlockStatement(
                                                                              ExpressionStatement(
                                                                                Assign(ExpressionName2LHS(ExpressionName(Id("quote"))), Literal2Expression(BoolLiteral2Literal(True())))
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Not(ExpressionName2Expression(ExpressionName(Id("quote"))))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                                    , ExpressionName2Expression(ExpressionName(Id("start")))
                                                    , ExpressionName2Expression(ExpressionName(Id("end")))
                                                    ]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Return())
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Break())
                                  ]
                                )
                              , SwitchGroup(
                                  [DefaultCase()]
                                , [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalStateException")
                                          , []
                                          , []
                                          , [Add(
                                               Literal2Expression(StringLiteral2Literal(StringLiteral("\"Unexpected Quote value: \"")))
                                             , ExpressionName2Expression(ExpressionName(Id("quoteModePolicy")))
                                             )]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              ]
                            , []
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Not(ExpressionName2Expression(ExpressionName(Id("quote"))))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                          , ExpressionName2Expression(ExpressionName(Id("start")))
                                          , ExpressionName2Expression(ExpressionName(Id("end")))
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return())
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("out")))
                              , []
                              , Id("append")
                              , [ExpressionName2Expression(ExpressionName(Id("quoteChar")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              Lt(
                                ExpressionName2Expression(ExpressionName(Id("pos")))
                              , ExpressionName2Expression(ExpressionName(Id("end")))
                              )
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannPrimitiveType2UnannType(NumericType(Char()))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("c"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("value")))
                                                , []
                                                , Id("charAt")
                                                , [ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Eq(
                                          ExpressionName2Expression(ExpressionName(Id("c")))
                                        , ExpressionName2Expression(ExpressionName(Id("quoteChar")))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                                    , ExpressionName2Expression(ExpressionName(Id("start")))
                                                    , Add(
                                                        ExpressionName2Expression(ExpressionName(Id("pos")))
                                                      , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("start")))
                                                  , ExpressionName2Expression(ExpressionName(Id("pos")))
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("pos"))))))
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("out")))
                              , []
                              , Id("append")
                              , [ ExpressionName2Expression(ExpressionName(Id("value")))
                                , ExpressionName2Expression(ExpressionName(Id("start")))
                                , ExpressionName2Expression(ExpressionName(Id("pos")))
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("out")))
                              , []
                              , Id("append")
                              , [ExpressionName2Expression(ExpressionName(Id("quoteChar")))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("printWithQuotes")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("reader"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("out"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(
                                Invoke(MethodName(Id("getQuoteMode")), [])
                              , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("NONE")))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Invoke(
                                          MethodName(Id("printWithEscapes"))
                                        , [ExpressionName2Expression(ExpressionName(Id("reader"))), ExpressionName2Expression(ExpressionName(Id("out")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return())
                                  ]
                                )
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("pos"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Char()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("quote"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        Invoke(MethodName(Id("getQuoteCharacter")), [])
                                      , []
                                      , Id("charValue")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringBuilder"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("builder"))
                                  , Expression2VariableInitializer(
                                      UnqualifiedInstance2Expression(
                                        NewInstance(
                                          []
                                        , []
                                        , Id("StringBuilder")
                                        , []
                                        , []
                                        , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("IOUtils")), Id("DEFAULT_BUFFER_SIZE")))]
                                        )
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("out")))
                              , []
                              , Id("append")
                              , [ExpressionName2Expression(ExpressionName(Id("quote")))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VarDeclId2VarDecl(VariableDecl(Id("c")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              NotEq(
                                Minus(Literal2Expression(IntLiteral2Literal(Deci("1"))))
                              , Assign(
                                  ExpressionName2LHS(ExpressionName(Id("c")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("reader")))
                                  , []
                                  , Id("read")
                                  , []
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("builder")))
                                        , []
                                        , Id("append")
                                        , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Eq(
                                          ExpressionName2Expression(ExpressionName(Id("c")))
                                        , ExpressionName2Expression(ExpressionName(Id("quote")))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                If(
                                                  Gt(
                                                    ExpressionName2Expression(ExpressionName(Id("pos")))
                                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("out")))
                                                            , []
                                                            , Id("append")
                                                            , [ InvokeQExp(
                                                                  ExpressionName2Expression(ExpressionName(Id("builder")))
                                                                , []
                                                                , Id("substring")
                                                                , [Literal2Expression(IntLiteral2Literal(Deci("0"))), ExpressionName2Expression(ExpressionName(Id("pos")))]
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("builder")))
                                                            , []
                                                            , Id("setLength")
                                                            , [Literal2Expression(IntLiteral2Literal(Deci("0")))]
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("pos")))
                                                            , Minus(Literal2Expression(IntLiteral2Literal(Deci("1"))))
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [ExpressionName2Expression(ExpressionName(Id("quote")))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("out")))
                                                  , []
                                                  , Id("append")
                                                  , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("pos"))))))
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Gt(
                                ExpressionName2Expression(ExpressionName(Id("pos")))
                              , Literal2Expression(IntLiteral2Literal(Deci("0")))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("out")))
                                        , []
                                        , Id("append")
                                        , [ InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("builder")))
                                            , []
                                            , Id("substring")
                                            , [Literal2Expression(IntLiteral2Literal(Deci("0"))), ExpressionName2Expression(ExpressionName(Id("pos")))]
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("out")))
                              , []
                              , Id("append")
                              , [ExpressionName2Expression(ExpressionName(Id("quote")))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("toString")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringBuilder"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("sb"))
                                  , Expression2VariableInitializer(
                                      UnqualifiedInstance2Expression(
                                        NewInstance([], [], Id("StringBuilder"), [], [], [])
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                InvokeQExp(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("sb")))
                                  , []
                                  , Id("append")
                                  , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"Delimiter=<\"")))]
                                  )
                                , []
                                , Id("append")
                                , [ExpressionName2Expression(ExpressionName(Id("delimiter")))]
                                )
                              , []
                              , Id("append")
                              , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'>'")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("isEscapeCharacterSet")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("sb")))
                                            , []
                                            , Id("append")
                                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"Escape=<\"")))]
                                            )
                                          , []
                                          , Id("append")
                                          , [ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'>'")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("isQuoteCharacterSet")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("sb")))
                                            , []
                                            , Id("append")
                                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"QuoteChar=<\"")))]
                                            )
                                          , []
                                          , Id("append")
                                          , [ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'>'")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("isCommentMarkerSet")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("sb")))
                                            , []
                                            , Id("append")
                                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"CommentStart=<\"")))]
                                            )
                                          , []
                                          , Id("append")
                                          , [ExpressionName2Expression(ExpressionName(Id("commentMarker")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'>'")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("isNullStringSet")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("sb")))
                                            , []
                                            , Id("append")
                                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"NullString=<\"")))]
                                            )
                                          , []
                                          , Id("append")
                                          , [ExpressionName2Expression(ExpressionName(Id("nullString")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'>'")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("recordSeparator"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("sb")))
                                            , []
                                            , Id("append")
                                            , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"RecordSeparator=<\"")))]
                                            )
                                          , []
                                          , Id("append")
                                          , [ExpressionName2Expression(ExpressionName(Id("recordSeparator")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'>'")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("getIgnoreEmptyLines")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(StringLiteral2Literal(StringLiteral("\" EmptyLines:ignored\"")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("getIgnoreSurroundingSpaces")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(StringLiteral2Literal(StringLiteral("\" SurroundingSpaces:ignored\"")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Invoke(MethodName(Id("getIgnoreHeaderCase")), [])
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(StringLiteral2Literal(StringLiteral("\" IgnoreHeaderCase:ignored\"")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("sb")))
                                , []
                                , Id("append")
                                , [Literal2Expression(StringLiteral2Literal(StringLiteral("\" SkipHeaderRecord:\"")))]
                                )
                              , []
                              , Id("append")
                              , [ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("headerComments"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("sb")))
                                          , []
                                          , Id("append")
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"HeaderComments:\"")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [ InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                            , []
                                            , Id("toString")
                                            , [ExpressionName2Expression(ExpressionName(Id("headerComments")))]
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("sb")))
                                        , []
                                        , Id("append")
                                        , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("sb")))
                                          , []
                                          , Id("append")
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"Header:\"")))]
                                          )
                                        , []
                                        , Id("append")
                                        , [ InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                            , []
                                            , Id("toString")
                                            , [ExpressionName2Expression(ExpressionName(Id("header")))]
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("sb")))
                              , []
                              , Id("toString")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                          )
                        )
                      )
                    , Id("toStringArray")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(
                              UnannArrayType2UnannReferenceType(
                                UnannArrayTypeClassType(ClassType(Id("Object"), []), [AnnotateDim([])])
                              )
                            )
                          , VariableDecl(Id("values"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("values"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(NullLiteral2Literal(Null()))))]))
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannArrayType2UnannReferenceType(
                                    UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("strings"))
                                  , Expression2VariableInitializer(
                                      ArrayCreationExpression2Expression(
                                        NewArray(
                                          ClassType2ArrayBaseType(ClassType([], Id("String"), []))
                                        , [Dim(
                                             []
                                           , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))
                                           )]
                                        , AnnotatedDims2AnnotatedDimsEmpty([])
                                        )
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            For(
                              VarDecls(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("i"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            , [ Lt(
                                  ExpressionName2Expression(ExpressionName(Id("i")))
                                , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))
                                )
                              ]
                            , Exprs2ForUpdate(ExprList([PostIncr(ExpressionName2Expression(ExpressionName(Id("i"))))]))
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("value"))
                                            , Expression2VariableInitializer(
                                                ArrayAccess2Expression(
                                                  ArrayAccess(
                                                    ExpressionName2Expression(ExpressionName(Id("values")))
                                                  , ExpressionName2Expression(ExpressionName(Id("i")))
                                                  )
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ArrayAccess2LHS(
                                            ArrayAccess(
                                              ExpressionName2Expression(ExpressionName(Id("strings")))
                                            , ExpressionName2Expression(ExpressionName(Id("i")))
                                            )
                                          )
                                        , Cond(
                                            Eq(ExpressionName2Expression(ExpressionName(Id("value"))), Literal2Expression(NullLiteral2Literal(Null())))
                                          , Literal2Expression(NullLiteral2Literal(Null()))
                                          , InvokeQExp(
                                              ExpressionName2Expression(ExpressionName(Id("value")))
                                            , []
                                            , Id("toString")
                                            , []
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("strings")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharSequence"), []))))
                    , Id("trim")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharSequence"), [])))
                          , VariableDecl(Id("charSequence"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              InstanceOf(
                                ExpressionName2Expression(ExpressionName(Id("charSequence")))
                              , ClassType2ReferenceType(ClassType([], Id("String"), []))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Return(
                                        InvokeQExp(
                                          CastReference(
                                            ClassType2ReferenceType(ClassType([], Id("String"), []))
                                          , []
                                          , ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                          )
                                        , []
                                        , Id("trim")
                                        , []
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("count"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                      , []
                                      , Id("length")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("len"))
                                 , Expression2VariableInitializer(ExpressionName2Expression(ExpressionName(Id("count"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("pos"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              LazyAnd(
                                Lt(
                                  ExpressionName2Expression(ExpressionName(Id("pos")))
                                , ExpressionName2Expression(ExpressionName(Id("len")))
                                )
                              , LtEq(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                  , []
                                  , Id("charAt")
                                  , [ExpressionName2Expression(ExpressionName(Id("pos")))]
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("SP")))
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [Statement2BlockStatement(ExpressionStatement(PostIncr(ExpressionName2Expression(ExpressionName(Id("pos"))))))]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              LazyAnd(
                                Lt(
                                  ExpressionName2Expression(ExpressionName(Id("pos")))
                                , ExpressionName2Expression(ExpressionName(Id("len")))
                                )
                              , LtEq(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                  , []
                                  , Id("charAt")
                                  , [Sub(
                                       ExpressionName2Expression(ExpressionName(Id("len")))
                                     , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                     )]
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("SP")))
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [Statement2BlockStatement(ExpressionStatement(PostDecr(ExpressionName2Expression(ExpressionName(Id("len"))))))]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              Cond(
                                LazyOr(
                                  Gt(
                                    ExpressionName2Expression(ExpressionName(Id("pos")))
                                  , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                  )
                                , Lt(
                                    ExpressionName2Expression(ExpressionName(Id("len")))
                                  , ExpressionName2Expression(ExpressionName(Id("count")))
                                  )
                                )
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("charSequence")))
                                , []
                                , Id("subSequence")
                                , [ExpressionName2Expression(ExpressionName(Id("pos"))), ExpressionName2Expression(ExpressionName(Id("len")))]
                                )
                              , ExpressionName2Expression(ExpressionName(Id("charSequence")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("validate")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IllegalArgumentException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Invoke(
                                MethodName(Id("isLineBreak"))
                              , [ExpressionName2Expression(ExpressionName(Id("delimiter")))]
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"The delimiter cannot be a line break\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("quoteCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , []
                                  , Id("charValue")
                                  , []
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ Add(
                                                Add(
                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"The quoteChar character and the delimiter cannot be the same ('\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                                )
                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"')\"")))
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("escapeCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , []
                                  , Id("charValue")
                                  , []
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ Add(
                                                Add(
                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"The escape character and the delimiter cannot be the same ('\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                                )
                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"')\"")))
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("commentMarker"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , []
                                  , Id("charValue")
                                  , []
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ Add(
                                                Add(
                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"The comment start character and the delimiter cannot be the same ('\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                                )
                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"')\"")))
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("quoteCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                , []
                                , Id("equals")
                                , [ExpressionName2Expression(ExpressionName(Id("commentMarker")))]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ Add(
                                                Add(
                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"The comment start character and the quoteChar cannot be the same ('\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                                )
                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"')\"")))
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("escapeCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                , []
                                , Id("equals")
                                , [ExpressionName2Expression(ExpressionName(Id("commentMarker")))]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ Add(
                                                Add(
                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"The comment start and the escape character cannot be the same ('\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                                )
                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"')\"")))
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                Eq(ExpressionName2Expression(ExpressionName(Id("escapeCharacter"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("QuoteMode")), Id("NONE")))
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"No quotes mode set but no escape character is set\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannReferenceType2UnannType(
                                            UnannClassType2UnannReferenceType(
                                              ClassType(
                                                Id("Set")
                                              , [TypeArguments(
                                                   [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                                                 )]
                                              )
                                            )
                                          )
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("dupCheck"))
                                            , Expression2VariableInitializer(
                                                UnqualifiedInstance2Expression(
                                                  NewInstance(
                                                    []
                                                  , []
                                                  , Id("HashSet")
                                                  , []
                                                  , [Diamond()]
                                                  , []
                                                  )
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ForEach(
                                        [Final2VariableModifier(Final())]
                                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                                      , VariableDecl(Id("hdr"))
                                      , ExpressionName2Expression(ExpressionName(Id("header")))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                If(
                                                  Not(
                                                    InvokeQExp(
                                                      ExpressionName2Expression(ExpressionName(Id("dupCheck")))
                                                    , []
                                                    , Id("add")
                                                    , [ExpressionName2Expression(ExpressionName(Id("hdr")))]
                                                    )
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          Throw(
                                                            UnqualifiedInstance2Expression(
                                                              NewInstance(
                                                                []
                                                              , []
                                                              , Id("IllegalArgumentException")
                                                              , []
                                                              , []
                                                              , [ Add(
                                                                    Add(
                                                                      Add(
                                                                        Literal2Expression(StringLiteral2Literal(StringLiteral("\"The header contains a duplicate entry: '\"")))
                                                                      , ExpressionName2Expression(ExpressionName(Id("hdr")))
                                                                      )
                                                                    , Literal2Expression(StringLiteral2Literal(StringLiteral("\"' in \"")))
                                                                    )
                                                                  , InvokeQExp(
                                                                      ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                                                    , []
                                                                    , Id("toString")
                                                                    , [ExpressionName2Expression(ExpressionName(Id("header")))]
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withAllowDuplicateHeaderNames")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(MethodName(Id("withAllowDuplicateHeaderNames")), [Literal2Expression(BoolLiteral2Literal(True()))])
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withAllowDuplicateHeaderNames")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("allowDuplicateHeaderNames"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withAllowMissingColumnNames")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                This()
                              , []
                              , Id("withAllowMissingColumnNames")
                              , [Literal2Expression(BoolLiteral2Literal(True()))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withAllowMissingColumnNames")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("allowMissingColumnNames"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withAutoFlush")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("autoFlush"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withCommentMarker")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("commentMarker"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withCommentMarker"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Character")))
                                  , []
                                  , Id("valueOf")
                                  , [ExpressionName2Expression(ExpressionName(Id("commentMarker")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withCommentMarker")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                          , VariableDecl(Id("commentMarker"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Invoke(
                                MethodName(Id("isLineBreak"))
                              , [ExpressionName2Expression(ExpressionName(Id("commentMarker")))]
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"The comment start marker character cannot be a line break\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withDelimiter")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("delimiter"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Invoke(
                                MethodName(Id("isLineBreak"))
                              , [ExpressionName2Expression(ExpressionName(Id("delimiter")))]
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"The delimiter cannot be a line break\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withEscape")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("escape"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withEscape"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Character")))
                                  , []
                                  , Id("valueOf")
                                  , [ExpressionName2Expression(ExpressionName(Id("escape")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withEscape")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                          , VariableDecl(Id("escape"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Invoke(
                                MethodName(Id("isLineBreak"))
                              , [ExpressionName2Expression(ExpressionName(Id("escape")))]
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"The escape character cannot be a line break\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escape")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withFirstRecordAsHeader")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                Invoke(MethodName(Id("withHeader")), [])
                              , []
                              , Id("withSkipHeaderRecord")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withHeader")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(
                              UnannClassType2UnannReferenceType(
                                ClassType(
                                  Id("Class")
                                , [ TypeArguments(
                                      [ WildCard2TypeArgument(
                                          WildCardExtends(
                                            []
                                          , ClassType2ReferenceType(
                                              ClassType(
                                                []
                                              , Id("Enum")
                                              , [TypeArguments([WildCard2TypeArgument(WildCard([]))])]
                                              )
                                            )
                                          )
                                        )
                                      ]
                                    )
                                  ]
                                )
                              )
                            )
                          , VariableDecl(Id("headerEnum"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(
                                  UnannArrayType2UnannReferenceType(
                                    UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                                  )
                                )
                              , [VariableDeclInit(VariableDecl(Id("header")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("headerEnum"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannReferenceType2UnannType(
                                            UnannArrayType2UnannReferenceType(
                                              UnannArrayTypeClassType(
                                                ClassType(
                                                  Id("Enum")
                                                , [TypeArguments([WildCard2TypeArgument(WildCard([]))])]
                                                )
                                              , [AnnotateDim([])]
                                              )
                                            )
                                          )
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("enumValues"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("headerEnum")))
                                                , []
                                                , Id("getEnumConstants")
                                                , []
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("header")))
                                        , ArrayCreationExpression2Expression(
                                            NewArray(
                                              ClassType2ArrayBaseType(ClassType([], Id("String"), []))
                                            , [Dim(
                                                 []
                                               , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("enumValues")), Id("length")))
                                               )]
                                            , AnnotatedDims2AnnotatedDimsEmpty([])
                                            )
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      For(
                                        VarDecls(
                                          []
                                        , UnannPrimitiveType2UnannType(NumericType(Int()))
                                        , [VariableDeclInit(
                                             VariableDecl(Id("i"))
                                           , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                           )]
                                        )
                                      , [ Lt(
                                            ExpressionName2Expression(ExpressionName(Id("i")))
                                          , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("enumValues")), Id("length")))
                                          )
                                        ]
                                      , Exprs2ForUpdate(ExprList([PostIncr(ExpressionName2Expression(ExpressionName(Id("i"))))]))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ArrayAccess2LHS(
                                                      ArrayAccess(
                                                        ExpressionName2Expression(ExpressionName(Id("header")))
                                                      , ExpressionName2Expression(ExpressionName(Id("i")))
                                                      )
                                                    )
                                                  , InvokeQExp(
                                                      ArrayAccess2Expression(
                                                        ArrayAccess(
                                                          ExpressionName2Expression(ExpressionName(Id("enumValues")))
                                                        , ExpressionName2Expression(ExpressionName(Id("i")))
                                                        )
                                                      )
                                                    , []
                                                    , Id("name")
                                                    , []
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withHeader"))
                              , [ExpressionName2Expression(ExpressionName(Id("header")))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withHeader")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("ResultSet"), [])))
                          , VariableDecl(Id("resultSet"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("SQLException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withHeader"))
                              , [ Cond(
                                    NotEq(ExpressionName2Expression(ExpressionName(Id("resultSet"))), Literal2Expression(NullLiteral2Literal(Null())))
                                  , InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("resultSet")))
                                    , []
                                    , Id("getMetaData")
                                    , []
                                    )
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withHeader")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("ResultSetMetaData"), [])))
                          , VariableDecl(Id("metaData"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("SQLException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(
                                  UnannArrayType2UnannReferenceType(
                                    UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                                  )
                                )
                              , [VariableDeclInit(VariableDecl(Id("labels")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("metaData"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannPrimitiveType2UnannType(NumericType(Int()))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("columnCount"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("metaData")))
                                                , []
                                                , Id("getColumnCount")
                                                , []
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("labels")))
                                        , ArrayCreationExpression2Expression(
                                            NewArray(
                                              ClassType2ArrayBaseType(ClassType([], Id("String"), []))
                                            , [Dim([], ExpressionName2Expression(ExpressionName(Id("columnCount"))))]
                                            , AnnotatedDims2AnnotatedDimsEmpty([])
                                            )
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      For(
                                        VarDecls(
                                          []
                                        , UnannPrimitiveType2UnannType(NumericType(Int()))
                                        , [VariableDeclInit(
                                             VariableDecl(Id("i"))
                                           , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                           )]
                                        )
                                      , [Lt(
                                           ExpressionName2Expression(ExpressionName(Id("i")))
                                         , ExpressionName2Expression(ExpressionName(Id("columnCount")))
                                         )]
                                      , Exprs2ForUpdate(ExprList([PostIncr(ExpressionName2Expression(ExpressionName(Id("i"))))]))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ArrayAccess2LHS(
                                                      ArrayAccess(
                                                        ExpressionName2Expression(ExpressionName(Id("labels")))
                                                      , ExpressionName2Expression(ExpressionName(Id("i")))
                                                      )
                                                    )
                                                  , InvokeQExp(
                                                      ExpressionName2Expression(ExpressionName(Id("metaData")))
                                                    , []
                                                    , Id("getColumnLabel")
                                                    , [Add(
                                                         ExpressionName2Expression(ExpressionName(Id("i")))
                                                       , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                                       )]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withHeader"))
                              , [ExpressionName2Expression(ExpressionName(Id("labels")))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withHeader")
                    , SingleParam(
                        VarArityParam(
                          [Final2VariableModifier(Final())]
                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                        , []
                        , VariableDecl(Id("header"))
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withHeaderComments")
                    , SingleParam(
                        VarArityParam(
                          [Final2VariableModifier(Final())]
                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Object"), [])))
                        , []
                        , VariableDecl(Id("headerComments"))
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withIgnoreEmptyLines")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                This()
                              , []
                              , Id("withIgnoreEmptyLines")
                              , [Literal2Expression(BoolLiteral2Literal(True()))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withIgnoreEmptyLines")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("ignoreEmptyLines"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withIgnoreHeaderCase")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                This()
                              , []
                              , Id("withIgnoreHeaderCase")
                              , [Literal2Expression(BoolLiteral2Literal(True()))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withIgnoreHeaderCase")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("ignoreHeaderCase"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withIgnoreSurroundingSpaces")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                This()
                              , []
                              , Id("withIgnoreSurroundingSpaces")
                              , [Literal2Expression(BoolLiteral2Literal(True()))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withIgnoreSurroundingSpaces")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("ignoreSurroundingSpaces"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withNullString")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("nullString"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withQuote")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("quoteChar"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withQuote"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Character")))
                                  , []
                                  , Id("valueOf")
                                  , [ExpressionName2Expression(ExpressionName(Id("quoteChar")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withQuote")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                          , VariableDecl(Id("quoteChar"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Invoke(
                                MethodName(Id("isLineBreak"))
                              , [ExpressionName2Expression(ExpressionName(Id("quoteChar")))]
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"The quoteChar cannot be a line break\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteChar")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withQuoteMode")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("QuoteMode"), [])))
                          , VariableDecl(Id("quoteModePolicy"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteModePolicy")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withRecordSeparator")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Char()))
                          , VariableDecl(Id("recordSeparator"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withRecordSeparator"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("String")))
                                  , []
                                  , Id("valueOf")
                                  , [ExpressionName2Expression(ExpressionName(Id("recordSeparator")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withRecordSeparator")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("recordSeparator"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withSkipHeaderRecord")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                This()
                              , []
                              , Id("withSkipHeaderRecord")
                              , [Literal2Expression(BoolLiteral2Literal(True()))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withSkipHeaderRecord")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("skipHeaderRecord"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withSystemRecordSeparator")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("withRecordSeparator"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("System")))
                                  , []
                                  , Id("getProperty")
                                  , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"line.separator\"")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withTrailingDelimiter")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(MethodName(Id("withTrailingDelimiter")), [Literal2Expression(BoolLiteral2Literal(True()))])
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withTrailingDelimiter")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("trailingDelimiter"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withTrim")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(MethodName(Id("withTrim")), [Literal2Expression(BoolLiteral2Literal(True()))])
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), []))))
                    , Id("withTrim")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("trim"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVFormat")
                                , []
                                , []
                                , [ ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteMode")))
                                  , ExpressionName2Expression(ExpressionName(Id("commentMarker")))
                                  , ExpressionName2Expression(ExpressionName(Id("escapeCharacter")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                                  , ExpressionName2Expression(ExpressionName(Id("recordSeparator")))
                                  , ExpressionName2Expression(ExpressionName(Id("nullString")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerComments")))
                                  , ExpressionName2Expression(ExpressionName(Id("header")))
                                  , ExpressionName2Expression(ExpressionName(Id("skipHeaderRecord")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowMissingColumnNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("ignoreHeaderCase")))
                                  , ExpressionName2Expression(ExpressionName(Id("trim")))
                                  , ExpressionName2Expression(ExpressionName(Id("trailingDelimiter")))
                                  , ExpressionName2Expression(ExpressionName(Id("autoFlush")))
                                  , ExpressionName2Expression(ExpressionName(Id("allowDuplicateHeaderNames")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/CSVParser.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("TOKEN")
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Closeable")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("File")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("FileInputStream")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("IOException")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("InputStream")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("InputStreamReader")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Reader")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("StringReader")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("net"))
        , Id("URL")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
          , Id("charset")
          )
        , Id("Charset")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
          , Id("file")
          )
        , Id("Files")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
          , Id("file")
          )
        , Id("Path")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("ArrayList")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Arrays")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Collections")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Iterator")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("LinkedHashMap")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("List")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Map")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("NoSuchElementException")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("TreeMap")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Public2ClassModifier(Public()), Final2ClassModifier(Final())]
          , Id("CSVParser")
          , []
          , []
          , [ SuperInterface(
                [ ClassType(
                    []
                  , Id("Iterable")
                  , [TypeArguments(
                       [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("CSVRecord"), [])))]
                     )]
                  )
                , ClassType([], Id("Closeable"), [])
                ]
              )
            ]
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                ClassDeclaration2ClassMemberDeclaration(
                  NormalClassDeclaration2ClassDeclaration(
                    ClassDeclaration(
                      []
                    , Id("CSVRecordIterator")
                    , []
                    , []
                    , [ SuperInterface(
                          [ ClassType(
                              []
                            , Id("Iterator")
                            , [TypeArguments(
                                 [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("CSVRecord"), [])))]
                               )]
                            )
                          ]
                        )
                      ]
                    , [ ClassMemberDeclaration2ClassBodyDeclaration(
                          FieldDeclaration2ClassMemberDeclaration(
                            FieldDecl(
                              [Private2FieldModifier(Private())]
                            , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), [])))
                            , [VarDeclId2VarDecl(VariableDecl(Id("current")))]
                            )
                          )
                        )
                      , ClassMemberDeclaration2ClassBodyDeclaration(
                          MethodDeclaration2ClassMemberDeclaration(
                            MethodDecl(
                              [Private2MethodModifier(Private())]
                            , MethodHeader(
                                UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), []))))
                              , Id("getNextRecord")
                              , NoParams()
                              , AnnotatedDims2AnnotatedDimsEmpty([])
                              , []
                              )
                            , Block2MethodBody(
                                Block(
                                  [ Statement2BlockStatement(
                                      Try(
                                        Block(
                                          [ Statement2BlockStatement(
                                              Return(
                                                InvokeQExp(
                                                  QThis(TypeName(Id("CSVParser")))
                                                , []
                                                , Id("nextRecord")
                                                , []
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      , [ Catch(
                                            CatchParam(
                                              [Final2VariableModifier(Final())]
                                            , CatchType(ClassType(Id("IOException"), []), [])
                                            , VariableDecl(Id("e"))
                                            )
                                          , Block(
                                              [ Statement2BlockStatement(
                                                  Throw(
                                                    UnqualifiedInstance2Expression(
                                                      NewInstance(
                                                        []
                                                      , []
                                                      , Id("IllegalStateException")
                                                      , []
                                                      , []
                                                      , [ Add(
                                                            Add(
                                                              InvokeQExp(
                                                                InvokeQExp(
                                                                  ExpressionName2Expression(ExpressionName(Id("e")))
                                                                , []
                                                                , Id("getClass")
                                                                , []
                                                                )
                                                              , []
                                                              , Id("getSimpleName")
                                                              , []
                                                              )
                                                            , Literal2Expression(StringLiteral2Literal(StringLiteral("\" reading next record: \"")))
                                                            )
                                                          , InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("e")))
                                                            , []
                                                            , Id("toString")
                                                            , []
                                                            )
                                                          )
                                                        , ExpressionName2Expression(ExpressionName(Id("e")))
                                                        ]
                                                      )
                                                    )
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        ]
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        )
                      , ClassMemberDeclaration2ClassBodyDeclaration(
                          MethodDeclaration2ClassMemberDeclaration(
                            MethodDecl(
                              [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                            , MethodHeader(
                                UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                              , Id("hasNext")
                              , NoParams()
                              , AnnotatedDims2AnnotatedDimsEmpty([])
                              , []
                              )
                            , Block2MethodBody(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        InvokeQExp(
                                          QThis(TypeName(Id("CSVParser")))
                                        , []
                                        , Id("isClosed")
                                        , []
                                        )
                                      , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(BoolLiteral2Literal(False()))))]))
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Eq(
                                          FieldAccess2Expression(Field(This(), Id("current")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    FieldAccess2LHS(Field(This(), Id("current")))
                                                  , InvokeQExp(This(), [], Id("getNextRecord"), [])
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      Return(
                                        NotEq(
                                          FieldAccess2Expression(Field(This(), Id("current")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        )
                      , ClassMemberDeclaration2ClassBodyDeclaration(
                          MethodDeclaration2ClassMemberDeclaration(
                            MethodDecl(
                              [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                            , MethodHeader(
                                UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), []))))
                              , Id("next")
                              , NoParams()
                              , AnnotatedDims2AnnotatedDimsEmpty([])
                              , []
                              )
                            , Block2MethodBody(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        InvokeQExp(
                                          QThis(TypeName(Id("CSVParser")))
                                        , []
                                        , Id("isClosed")
                                        , []
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                Throw(
                                                  UnqualifiedInstance2Expression(
                                                    NewInstance(
                                                      []
                                                    , []
                                                    , Id("NoSuchElementException")
                                                    , []
                                                    , []
                                                    , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"CSVParser has been closed\"")))]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          []
                                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), [])))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("next"))
                                            , Expression2VariableInitializer(FieldAccess2Expression(Field(This(), Id("current"))))
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          FieldAccess2LHS(Field(This(), Id("current")))
                                        , Literal2Expression(NullLiteral2Literal(Null()))
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Eq(ExpressionName2Expression(ExpressionName(Id("next"))), Literal2Expression(NullLiteral2Literal(Null())))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("next")))
                                                  , InvokeQExp(This(), [], Id("getNextRecord"), [])
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                If(
                                                  Eq(ExpressionName2Expression(ExpressionName(Id("next"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          Throw(
                                                            UnqualifiedInstance2Expression(
                                                              NewInstance(
                                                                []
                                                              , []
                                                              , Id("NoSuchElementException")
                                                              , []
                                                              , []
                                                              , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"No more CSV records available\"")))]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("next")))))
                                  ]
                                )
                              )
                            )
                          )
                        )
                      , ClassMemberDeclaration2ClassBodyDeclaration(
                          MethodDeclaration2ClassMemberDeclaration(
                            MethodDecl(
                              [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                            , MethodHeader(Void(), Id("remove"), NoParams(), AnnotatedDims2AnnotatedDimsEmpty([]), [])
                            , Block2MethodBody(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance([], [], Id("UnsupportedOperationException"), [], [], [])
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        )
                      ]
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [ Annotation2MethodModifier(
                        SingleElemAnno(
                          TypeName(Id("SuppressWarnings"))
                        , Expression2ElementValue(Literal2Expression(StringLiteral2Literal(StringLiteral("\"resource\""))))
                        )
                      )
                    , Public2MethodModifier(Public())
                    , Static2MethodModifier(Static())
                    ]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("File"), [])))
                          , VariableDecl(Id("file"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Charset"), [])))
                          , VariableDecl(Id("charset"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("file"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"file\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("format"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"format\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVParser")
                                , []
                                , []
                                , [ UnqualifiedInstance2Expression(
                                      NewInstance(
                                        []
                                      , []
                                      , Id("InputStreamReader")
                                      , []
                                      , []
                                      , [ UnqualifiedInstance2Expression(
                                            NewInstance(
                                              []
                                            , []
                                            , Id("FileInputStream")
                                            , []
                                            , []
                                            , [ExpressionName2Expression(ExpressionName(Id("file")))]
                                            )
                                          )
                                        , ExpressionName2Expression(ExpressionName(Id("charset")))
                                        ]
                                      )
                                    )
                                  , ExpressionName2Expression(ExpressionName(Id("format")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [ Annotation2MethodModifier(
                        SingleElemAnno(
                          TypeName(Id("SuppressWarnings"))
                        , Expression2ElementValue(Literal2Expression(StringLiteral2Literal(StringLiteral("\"resource\""))))
                        )
                      )
                    , Public2MethodModifier(Public())
                    , Static2MethodModifier(Static())
                    ]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("InputStream"), [])))
                          , VariableDecl(Id("inputStream"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Charset"), [])))
                          , VariableDecl(Id("charset"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("inputStream"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"inputStream\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("format"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"format\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("parse"))
                              , [ UnqualifiedInstance2Expression(
                                    NewInstance(
                                      []
                                    , []
                                    , Id("InputStreamReader")
                                    , []
                                    , []
                                    , [ExpressionName2Expression(ExpressionName(Id("inputStream"))), ExpressionName2Expression(ExpressionName(Id("charset")))]
                                    )
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("format")))
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Path"), [])))
                          , VariableDecl(Id("path"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Charset"), [])))
                          , VariableDecl(Id("charset"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("path"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"path\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("format"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"format\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("parse"))
                              , [ InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Files")))
                                  , []
                                  , Id("newInputStream")
                                  , [ExpressionName2Expression(ExpressionName(Id("path")))]
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("charset")))
                                , ExpressionName2Expression(ExpressionName(Id("format")))
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("reader"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVParser")
                                , []
                                , []
                                , [ExpressionName2Expression(ExpressionName(Id("reader"))), ExpressionName2Expression(ExpressionName(Id("format")))]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("string"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("string"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"string\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("format"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"format\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVParser")
                                , []
                                , []
                                , [ UnqualifiedInstance2Expression(
                                      NewInstance(
                                        []
                                      , []
                                      , Id("StringReader")
                                      , []
                                      , []
                                      , [ExpressionName2Expression(ExpressionName(Id("string")))]
                                      )
                                    )
                                  , ExpressionName2Expression(ExpressionName(Id("format")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public()), Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("parse")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("URL"), [])))
                          , VariableDecl(Id("url"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Charset"), [])))
                          , VariableDecl(Id("charset"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                          , VariableDecl(Id("format"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("url"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"url\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("charset"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"charset\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Assertions")))
                              , []
                              , Id("notNull")
                              , [ExpressionName2Expression(ExpressionName(Id("format"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"format\"")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("CSVParser")
                                , []
                                , []
                                , [ UnqualifiedInstance2Expression(
                                      NewInstance(
                                        []
                                      , []
                                      , Id("InputStreamReader")
                                      , []
                                      , []
                                      , [ InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("url")))
                                          , []
                                          , Id("openStream")
                                          , []
                                          )
                                        , ExpressionName2Expression(ExpressionName(Id("charset")))
                                        ]
                                      )
                                    )
                                  , ExpressionName2Expression(ExpressionName(Id("format")))
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("format")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannClassType2UnannReferenceType(
                        ClassType(
                          Id("Map")
                        , [ TypeArguments(
                              [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                              , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                              ]
                            )
                          ]
                        )
                      )
                    )
                  , [VarDeclId2VarDecl(VariableDecl(Id("headerMap")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannClassType2UnannReferenceType(
                        ClassType(
                          Id("List")
                        , [TypeArguments(
                             [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                           )]
                        )
                      )
                    )
                  , [VarDeclId2VarDecl(VariableDecl(Id("headerNames")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Lexer"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("lexer")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecordIterator"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("csvRecordIterator")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannClassType2UnannReferenceType(
                        ClassType(
                          Id("List")
                        , [TypeArguments(
                             [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                           )]
                        )
                      )
                    )
                  , [ VariableDeclInit(
                        VariableDecl(Id("recordList"))
                      , Expression2VariableInitializer(
                          UnqualifiedInstance2Expression(
                            NewInstance(
                              []
                            , []
                            , Id("ArrayList")
                            , []
                            , [Diamond()]
                            , []
                            )
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("recordNumber")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("characterOffset")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("reusableToken"))
                      , Expression2VariableInitializer(
                          UnqualifiedInstance2Expression(
                            NewInstance([], [], Id("Token"), [], [], [])
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  [Public2ConstructorModifier(Public())]
                , []
                , Id("CSVParser")
                , ParamList(
                    [ FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                      , VariableDecl(Id("reader"))
                      )
                    ]
                  , FormalParam2LastFormalParam(
                      FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                      , VariableDecl(Id("format"))
                      )
                    )
                  )
                , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                , [ AltConstrInv(
                      []
                    , [ ExpressionName2Expression(ExpressionName(Id("reader")))
                      , ExpressionName2Expression(ExpressionName(Id("format")))
                      , Literal2Expression(IntLiteral2Literal(Deci("0")))
                      , Literal2Expression(IntLiteral2Literal(Deci("1")))
                      ]
                    )
                  ]
                , []
                )
              )
            , ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  [ Annotation2ConstructorModifier(
                      SingleElemAnno(
                        TypeName(Id("SuppressWarnings"))
                      , Expression2ElementValue(Literal2Expression(StringLiteral2Literal(StringLiteral("\"resource\""))))
                      )
                    )
                  , Public2ConstructorModifier(Public())
                  ]
                , []
                , Id("CSVParser")
                , ParamList(
                    [ FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                      , VariableDecl(Id("reader"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                      , VariableDecl(Id("format"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(NumericType(Long()))
                      , VariableDecl(Id("characterOffset"))
                      )
                    ]
                  , FormalParam2LastFormalParam(
                      FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(NumericType(Long()))
                      , VariableDecl(Id("recordNumber"))
                      )
                    )
                  )
                , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                , []
                , [ Statement2BlockStatement(
                      ExpressionStatement(
                        InvokeQExp(
                          ExpressionName2Expression(ExpressionName(Id("Assertions")))
                        , []
                        , Id("notNull")
                        , [ExpressionName2Expression(ExpressionName(Id("reader"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"reader\"")))]
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        InvokeQExp(
                          ExpressionName2Expression(ExpressionName(Id("Assertions")))
                        , []
                        , Id("notNull")
                        , [ExpressionName2Expression(ExpressionName(Id("format"))), Literal2Expression(StringLiteral2Literal(StringLiteral("\"format\"")))]
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("format")))
                        , ExpressionName2Expression(ExpressionName(Id("format")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("lexer")))
                        , UnqualifiedInstance2Expression(
                            NewInstance(
                              []
                            , []
                            , Id("Lexer")
                            , []
                            , []
                            , [ ExpressionName2Expression(ExpressionName(Id("format")))
                              , UnqualifiedInstance2Expression(
                                  NewInstance(
                                    []
                                  , []
                                  , Id("ExtendedBufferedReader")
                                  , []
                                  , []
                                  , [ExpressionName2Expression(ExpressionName(Id("reader")))]
                                  )
                                )
                              ]
                            )
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("csvRecordIterator")))
                        , UnqualifiedInstance2Expression(
                            NewInstance([], [], Id("CSVRecordIterator"), [], [], [])
                          )
                        )
                      )
                    )
                  , LocalVariableDeclarationStatement2BlockStatement(
                      LocVarDeclStm(
                        LocalVarDecl(
                          [Final2VariableModifier(Final())]
                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Headers"), [])))
                        , [ VariableDeclInit(
                              VariableDecl(Id("headers"))
                            , Expression2VariableInitializer(Invoke(MethodName(Id("createHeaders")), []))
                            )
                          ]
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("headerMap")))
                        , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("headers")), Id("headerMap")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("headerNames")))
                        , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("headers")), Id("headerNames")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("characterOffset")))
                        , ExpressionName2Expression(ExpressionName(Id("characterOffset")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("recordNumber")))
                        , Sub(
                            ExpressionName2Expression(ExpressionName(Id("recordNumber")))
                          , Literal2Expression(IntLiteral2Literal(Deci("1")))
                          )
                        )
                      )
                    )
                  ]
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      Void()
                    , Id("addRecordValue")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(BooleanType())
                          , VariableDecl(Id("lastRecord"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("input"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        FieldAccess2Expression(
                                          Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("content"))
                                        )
                                      , []
                                      , Id("toString")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("inputClean"))
                                  , Expression2VariableInitializer(
                                      Cond(
                                        InvokeQExp(
                                          FieldAccess2Expression(Field(This(), Id("format")))
                                        , []
                                        , Id("getTrim")
                                        , []
                                        )
                                      , InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("input")))
                                        , []
                                        , Id("trim")
                                        , []
                                        )
                                      , ExpressionName2Expression(ExpressionName(Id("input")))
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                LazyAnd(
                                  ExpressionName2Expression(ExpressionName(Id("lastRecord")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("inputClean")))
                                  , []
                                  , Id("isEmpty")
                                  , []
                                  )
                                )
                              , InvokeQExp(
                                  FieldAccess2Expression(Field(This(), Id("format")))
                                , []
                                , Id("getTrailingDelimiter")
                                , []
                                )
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return())]))
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("nullString"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        FieldAccess2Expression(Field(This(), Id("format")))
                                      , []
                                      , Id("getNullString")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                FieldAccess2Expression(Field(This(), Id("recordList")))
                              , []
                              , Id("add")
                              , [ Cond(
                                    InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("inputClean")))
                                    , []
                                    , Id("equals")
                                    , [ExpressionName2Expression(ExpressionName(Id("nullString")))]
                                    )
                                  , Literal2Expression(NullLiteral2Literal(Null()))
                                  , ExpressionName2Expression(ExpressionName(Id("inputClean")))
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      Void()
                    , Id("close")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              NotEq(
                                FieldAccess2Expression(Field(This(), Id("lexer")))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          FieldAccess2Expression(Field(This(), Id("lexer")))
                                        , []
                                        , Id("close")
                                        , []
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Map")
                            , [ TypeArguments(
                                  [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                  , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      )
                    , Id("createEmptyHeaderMap")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Cond(
                                InvokeQExp(
                                  FieldAccess2Expression(Field(This(), Id("format")))
                                , []
                                , Id("getIgnoreHeaderCase")
                                , []
                                )
                              , UnqualifiedInstance2Expression(
                                  NewInstance(
                                    []
                                  , []
                                  , Id("TreeMap")
                                  , []
                                  , [Diamond()]
                                  , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("String")), Id("CASE_INSENSITIVE_ORDER")))]
                                  )
                                )
                              , UnqualifiedInstance2Expression(
                                  NewInstance(
                                    []
                                  , []
                                  , Id("LinkedHashMap")
                                  , []
                                  , [Diamond()]
                                  , []
                                  )
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                ClassDeclaration2ClassMemberDeclaration(
                  NormalClassDeclaration2ClassDeclaration(
                    ClassDeclaration(
                      [Private2ClassModifier(Private()), Static2ClassModifier(Static()), Final2ClassModifier(Final())]
                    , Id("Headers")
                    , []
                    , []
                    , []
                    , [ ClassMemberDeclaration2ClassBodyDeclaration(
                          FieldDeclaration2ClassMemberDeclaration(
                            FieldDecl(
                              [Final2FieldModifier(Final())]
                            , UnannReferenceType2UnannType(
                                UnannClassType2UnannReferenceType(
                                  ClassType(
                                    Id("Map")
                                  , [ TypeArguments(
                                        [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                        , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                        ]
                                      )
                                    ]
                                  )
                                )
                              )
                            , [VarDeclId2VarDecl(VariableDecl(Id("headerMap")))]
                            )
                          )
                        )
                      , ClassMemberDeclaration2ClassBodyDeclaration(
                          FieldDeclaration2ClassMemberDeclaration(
                            FieldDecl(
                              [Final2FieldModifier(Final())]
                            , UnannReferenceType2UnannType(
                                UnannClassType2UnannReferenceType(
                                  ClassType(
                                    Id("List")
                                  , [TypeArguments(
                                       [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                                     )]
                                  )
                                )
                              )
                            , [VarDeclId2VarDecl(VariableDecl(Id("headerNames")))]
                            )
                          )
                        )
                      , ConstructorDeclaration2ClassBodyDeclaration(
                          ConstrDecl(
                            []
                          , []
                          , Id("Headers")
                          , ParamList(
                              [ FormalParam(
                                  [Final2VariableModifier(Final())]
                                , UnannReferenceType2UnannType(
                                    UnannClassType2UnannReferenceType(
                                      ClassType(
                                        Id("Map")
                                      , [ TypeArguments(
                                            [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                            , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                            ]
                                          )
                                        ]
                                      )
                                    )
                                  )
                                , VariableDecl(Id("headerMap"))
                                )
                              ]
                            , FormalParam2LastFormalParam(
                                FormalParam(
                                  [Final2VariableModifier(Final())]
                                , UnannReferenceType2UnannType(
                                    UnannClassType2UnannReferenceType(
                                      ClassType(
                                        Id("List")
                                      , [TypeArguments(
                                           [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                                         )]
                                      )
                                    )
                                  )
                                , VariableDecl(Id("headerNames"))
                                )
                              )
                            )
                          , []
                          , []
                          , [ Statement2BlockStatement(
                                ExpressionStatement(
                                  Assign(
                                    FieldAccess2LHS(Field(This(), Id("headerMap")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerMap")))
                                  )
                                )
                              )
                            , Statement2BlockStatement(
                                ExpressionStatement(
                                  Assign(
                                    FieldAccess2LHS(Field(This(), Id("headerNames")))
                                  , ExpressionName2Expression(ExpressionName(Id("headerNames")))
                                  )
                                )
                              )
                            ]
                          )
                        )
                      ]
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Headers"), []))))
                    , Id("createHeaders")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("Map")
                                    , [ TypeArguments(
                                          [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                          , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                          ]
                                        )
                                      ]
                                    )
                                  )
                                )
                              , [VariableDeclInit(VariableDecl(Id("hdrMap")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("List")
                                    , [TypeArguments(
                                         [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                                       )]
                                    )
                                  )
                                )
                              , [VariableDeclInit(VariableDecl(Id("headerNames")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannArrayType2UnannReferenceType(
                                    UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("formatHeader"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        FieldAccess2Expression(Field(This(), Id("format")))
                                      , []
                                      , Id("getHeader")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("formatHeader"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("hdrMap")))
                                        , Invoke(MethodName(Id("createEmptyHeaderMap")), [])
                                        )
                                      )
                                    )
                                  , LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          []
                                        , UnannReferenceType2UnannType(
                                            UnannArrayType2UnannReferenceType(
                                              UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                                            )
                                          )
                                        , [VariableDeclInit(VariableDecl(Id("headerRecord")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      IfElse(
                                        Eq(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("formatHeader")), Id("length")))
                                        , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ LocalVariableDeclarationStatement2BlockStatement(
                                                LocVarDeclStm(
                                                  LocalVarDecl(
                                                    [Final2VariableModifier(Final())]
                                                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), [])))
                                                  , [ VariableDeclInit(
                                                        VariableDecl(Id("nextRecord"))
                                                      , Expression2VariableInitializer(InvokeQExp(This(), [], Id("nextRecord"), []))
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                If(
                                                  NotEq(ExpressionName2Expression(ExpressionName(Id("nextRecord"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("headerRecord")))
                                                            , InvokeQExp(
                                                                ExpressionName2Expression(ExpressionName(Id("nextRecord")))
                                                              , []
                                                              , Id("values")
                                                              , []
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                If(
                                                  InvokeQExp(
                                                    FieldAccess2Expression(Field(This(), Id("format")))
                                                  , []
                                                  , Id("getSkipHeaderRecord")
                                                  , []
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [Statement2BlockStatement(ExpressionStatement(InvokeQExp(This(), [], Id("nextRecord"), [])))]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("headerRecord")))
                                                  , ExpressionName2Expression(ExpressionName(Id("formatHeader")))
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        NotEq(ExpressionName2Expression(ExpressionName(Id("headerRecord"))), Literal2Expression(NullLiteral2Literal(Null())))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                For(
                                                  VarDecls(
                                                    []
                                                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                                                  , [VariableDeclInit(
                                                       VariableDecl(Id("i"))
                                                     , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                                     )]
                                                  )
                                                , [ Lt(
                                                      ExpressionName2Expression(ExpressionName(Id("i")))
                                                    , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("headerRecord")), Id("length")))
                                                    )
                                                  ]
                                                , Exprs2ForUpdate(ExprList([PostIncr(ExpressionName2Expression(ExpressionName(Id("i"))))]))
                                                , Block2Statement(
                                                    Block(
                                                      [ LocalVariableDeclarationStatement2BlockStatement(
                                                          LocVarDeclStm(
                                                            LocalVarDecl(
                                                              [Final2VariableModifier(Final())]
                                                            , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                                                            , [ VariableDeclInit(
                                                                  VariableDecl(Id("header"))
                                                                , Expression2VariableInitializer(
                                                                    ArrayAccess2Expression(
                                                                      ArrayAccess(
                                                                        ExpressionName2Expression(ExpressionName(Id("headerRecord")))
                                                                      , ExpressionName2Expression(ExpressionName(Id("i")))
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      , LocalVariableDeclarationStatement2BlockStatement(
                                                          LocVarDeclStm(
                                                            LocalVarDecl(
                                                              [Final2VariableModifier(Final())]
                                                            , UnannPrimitiveType2UnannType(BooleanType())
                                                            , [ VariableDeclInit(
                                                                  VariableDecl(Id("containsHeader"))
                                                                , Expression2VariableInitializer(
                                                                    Cond(
                                                                      Eq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                                    , Literal2Expression(BoolLiteral2Literal(False()))
                                                                    , InvokeQExp(
                                                                        ExpressionName2Expression(ExpressionName(Id("hdrMap")))
                                                                      , []
                                                                      , Id("containsKey")
                                                                      , [ExpressionName2Expression(ExpressionName(Id("header")))]
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      , LocalVariableDeclarationStatement2BlockStatement(
                                                          LocVarDeclStm(
                                                            LocalVarDecl(
                                                              [Final2VariableModifier(Final())]
                                                            , UnannPrimitiveType2UnannType(BooleanType())
                                                            , [ VariableDeclInit(
                                                                  VariableDecl(Id("emptyHeader"))
                                                                , Expression2VariableInitializer(
                                                                    LazyOr(
                                                                      Eq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                                    , InvokeQExp(
                                                                        InvokeQExp(
                                                                          ExpressionName2Expression(ExpressionName(Id("header")))
                                                                        , []
                                                                        , Id("trim")
                                                                        , []
                                                                        )
                                                                      , []
                                                                      , Id("isEmpty")
                                                                      , []
                                                                      )
                                                                    )
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          If(
                                                            ExpressionName2Expression(ExpressionName(Id("containsHeader")))
                                                          , Block2Statement(
                                                              Block(
                                                                [ Statement2BlockStatement(
                                                                    If(
                                                                      LazyAnd(
                                                                        Not(ExpressionName2Expression(ExpressionName(Id("emptyHeader"))))
                                                                      , Not(
                                                                          InvokeQExp(
                                                                            FieldAccess2Expression(Field(This(), Id("format")))
                                                                          , []
                                                                          , Id("getAllowDuplicateHeaderNames")
                                                                          , []
                                                                          )
                                                                        )
                                                                      )
                                                                    , Block2Statement(
                                                                        Block(
                                                                          [ Statement2BlockStatement(
                                                                              Throw(
                                                                                UnqualifiedInstance2Expression(
                                                                                  NewInstance(
                                                                                    []
                                                                                  , []
                                                                                  , Id("IllegalArgumentException")
                                                                                  , []
                                                                                  , []
                                                                                  , [ InvokeQExp(
                                                                                        ExpressionName2Expression(ExpressionName(Id("String")))
                                                                                      , []
                                                                                      , Id("format")
                                                                                      , [ Literal2Expression(StringLiteral2Literal(StringLiteral("\"The header contains a duplicate name: \\\"%s\\\" in %s. If this is valid then use CSVFormat.withAllowDuplicateHeaderNames().\"")))
                                                                                        , ExpressionName2Expression(ExpressionName(Id("header")))
                                                                                        , InvokeQExp(
                                                                                            ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                                                                          , []
                                                                                          , Id("toString")
                                                                                          , [ExpressionName2Expression(ExpressionName(Id("headerRecord")))]
                                                                                          )
                                                                                        ]
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(
                                                                    If(
                                                                      LazyAnd(
                                                                        ExpressionName2Expression(ExpressionName(Id("emptyHeader")))
                                                                      , Not(
                                                                          InvokeQExp(
                                                                            FieldAccess2Expression(Field(This(), Id("format")))
                                                                          , []
                                                                          , Id("getAllowMissingColumnNames")
                                                                          , []
                                                                          )
                                                                        )
                                                                      )
                                                                    , Block2Statement(
                                                                        Block(
                                                                          [ Statement2BlockStatement(
                                                                              Throw(
                                                                                UnqualifiedInstance2Expression(
                                                                                  NewInstance(
                                                                                    []
                                                                                  , []
                                                                                  , Id("IllegalArgumentException")
                                                                                  , []
                                                                                  , []
                                                                                  , [ Add(
                                                                                        Literal2Expression(StringLiteral2Literal(StringLiteral("\"A header name is missing in \"")))
                                                                                      , InvokeQExp(
                                                                                          ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                                                                        , []
                                                                                        , Id("toString")
                                                                                        , [ExpressionName2Expression(ExpressionName(Id("headerRecord")))]
                                                                                        )
                                                                                      )
                                                                                    ]
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          If(
                                                            NotEq(ExpressionName2Expression(ExpressionName(Id("header"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                          , Block2Statement(
                                                              Block(
                                                                [ Statement2BlockStatement(
                                                                    ExpressionStatement(
                                                                      InvokeQExp(
                                                                        ExpressionName2Expression(ExpressionName(Id("hdrMap")))
                                                                      , []
                                                                      , Id("put")
                                                                      , [ ExpressionName2Expression(ExpressionName(Id("header")))
                                                                        , InvokeQExp(
                                                                            ExpressionName2Expression(ExpressionName(Id("Integer")))
                                                                          , []
                                                                          , Id("valueOf")
                                                                          , [ExpressionName2Expression(ExpressionName(Id("i")))]
                                                                          )
                                                                        ]
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(
                                                                    If(
                                                                      Eq(ExpressionName2Expression(ExpressionName(Id("headerNames"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                                    , Block2Statement(
                                                                        Block(
                                                                          [ Statement2BlockStatement(
                                                                              ExpressionStatement(
                                                                                Assign(
                                                                                  ExpressionName2LHS(ExpressionName(Id("headerNames")))
                                                                                , UnqualifiedInstance2Expression(
                                                                                    NewInstance(
                                                                                      []
                                                                                    , []
                                                                                    , Id("ArrayList")
                                                                                    , []
                                                                                    , [Diamond()]
                                                                                    , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("headerRecord")), Id("length")))]
                                                                                    )
                                                                                  )
                                                                                )
                                                                              )
                                                                            )
                                                                          ]
                                                                        )
                                                                      )
                                                                    )
                                                                  )
                                                                , Statement2BlockStatement(
                                                                    ExpressionStatement(
                                                                      InvokeQExp(
                                                                        ExpressionName2Expression(ExpressionName(Id("headerNames")))
                                                                      , []
                                                                      , Id("add")
                                                                      , [ExpressionName2Expression(ExpressionName(Id("header")))]
                                                                      )
                                                                    )
                                                                  )
                                                                ]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            IfElse(
                              Eq(ExpressionName2Expression(ExpressionName(Id("headerNames"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("headerNames")))
                                        , InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("Collections")))
                                          , []
                                          , Id("emptyList")
                                          , []
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("headerNames")))
                                        , InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("Collections")))
                                          , []
                                          , Id("unmodifiableList")
                                          , [ExpressionName2Expression(ExpressionName(Id("headerNames")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              UnqualifiedInstance2Expression(
                                NewInstance(
                                  []
                                , []
                                , Id("Headers")
                                , []
                                , []
                                , [ExpressionName2Expression(ExpressionName(Id("hdrMap"))), ExpressionName2Expression(ExpressionName(Id("headerNames")))]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getCurrentLineNumber")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                FieldAccess2Expression(Field(This(), Id("lexer")))
                              , []
                              , Id("getCurrentLineNumber")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("getFirstEndOfLine")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("lexer")))
                              , []
                              , Id("getFirstEol")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Map")
                            , [ TypeArguments(
                                  [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                  , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      )
                    , Id("getHeaderMap")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(
                                FieldAccess2Expression(Field(This(), Id("headerMap")))
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              )
                            , Block2Statement(Block([Statement2BlockStatement(Return(Literal2Expression(NullLiteral2Literal(Null()))))]))
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("Map")
                                    , [ TypeArguments(
                                          [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                          , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                          ]
                                        )
                                      ]
                                    )
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("map"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("createEmptyHeaderMap")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("map")))
                              , []
                              , Id("putAll")
                              , [FieldAccess2Expression(Field(This(), Id("headerMap")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("map")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Map")
                            , [ TypeArguments(
                                  [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                  , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      )
                    , Id("getHeaderMapRaw")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [Statement2BlockStatement(Return(FieldAccess2Expression(Field(This(), Id("headerMap")))))]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("List")
                            , [TypeArguments(
                                 [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                               )]
                            )
                          )
                        )
                      )
                    , Id("getHeaderNames")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("headerNames")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getRecordNumber")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [Statement2BlockStatement(Return(FieldAccess2Expression(Field(This(), Id("recordNumber")))))]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("List")
                            , [TypeArguments(
                                 [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("CSVRecord"), [])))]
                               )]
                            )
                          )
                        )
                      )
                    , Id("getRecords")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), [])))
                              , [VarDeclId2VarDecl(VariableDecl(Id("rec")))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("List")
                                    , [TypeArguments(
                                         [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("CSVRecord"), [])))]
                                       )]
                                    )
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("records"))
                                  , Expression2VariableInitializer(
                                      UnqualifiedInstance2Expression(
                                        NewInstance(
                                          []
                                        , []
                                        , Id("ArrayList")
                                        , []
                                        , [Diamond()]
                                        , []
                                        )
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              NotEq(
                                Assign(
                                  ExpressionName2LHS(ExpressionName(Id("rec")))
                                , InvokeQExp(This(), [], Id("nextRecord"), [])
                                )
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("records")))
                                        , []
                                        , Id("add")
                                        , [ExpressionName2Expression(ExpressionName(Id("rec")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("records")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isClosed")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                FieldAccess2Expression(Field(This(), Id("lexer")))
                              , []
                              , Id("isClosed")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Iterator")
                            , [TypeArguments(
                                 [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("CSVRecord"), [])))]
                               )]
                            )
                          )
                        )
                      )
                    , Id("iterator")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("csvRecordIterator")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), []))))
                    , Id("nextRecord")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVRecord"), [])))
                              , [VariableDeclInit(VariableDecl(Id("result")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                FieldAccess2Expression(Field(This(), Id("recordList")))
                              , []
                              , Id("clear")
                              , []
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringBuilder"), [])))
                              , [VariableDeclInit(VariableDecl(Id("sb")), Expression2VariableInitializer(Literal2Expression(NullLiteral2Literal(Null()))))]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Long()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("startCharPosition"))
                                  , Expression2VariableInitializer(
                                      Add(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("lexer")))
                                        , []
                                        , Id("getCharacterPosition")
                                        , []
                                        )
                                      , FieldAccess2Expression(Field(This(), Id("characterOffset")))
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            DoWhile(
                              Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          FieldAccess2Expression(Field(This(), Id("reusableToken")))
                                        , []
                                        , Id("reset")
                                        , []
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          FieldAccess2Expression(Field(This(), Id("lexer")))
                                        , []
                                        , Id("nextToken")
                                        , [FieldAccess2Expression(Field(This(), Id("reusableToken")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      Switch(
                                        FieldAccess2Expression(
                                          Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("type"))
                                        )
                                      , [ SwitchGroup(
                                            [CaseExpr(ExpressionName2Expression(ExpressionName(Id("TOKEN"))))]
                                          , [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    This()
                                                  , []
                                                  , Id("addRecordValue")
                                                  , [Literal2Expression(BoolLiteral2Literal(False()))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Break())
                                            ]
                                          )
                                        , SwitchGroup(
                                            [CaseExpr(ExpressionName2Expression(ExpressionName(Id("EORECORD"))))]
                                          , [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    This()
                                                  , []
                                                  , Id("addRecordValue")
                                                  , [Literal2Expression(BoolLiteral2Literal(True()))]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Break())
                                            ]
                                          )
                                        , SwitchGroup(
                                            [CaseExpr(ExpressionName2Expression(ExpressionName(Id("EOF"))))]
                                          , [ Statement2BlockStatement(
                                                If(
                                                  FieldAccess2Expression(
                                                    Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("isReady"))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              This()
                                                            , []
                                                            , Id("addRecordValue")
                                                            , [Literal2Expression(BoolLiteral2Literal(True()))]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Break())
                                            ]
                                          )
                                        , SwitchGroup(
                                            [CaseExpr(ExpressionName2Expression(ExpressionName(Id("INVALID"))))]
                                          , [ Statement2BlockStatement(
                                                Throw(
                                                  UnqualifiedInstance2Expression(
                                                    NewInstance(
                                                      []
                                                    , []
                                                    , Id("IOException")
                                                    , []
                                                    , []
                                                    , [ Add(
                                                          Add(
                                                            Literal2Expression(StringLiteral2Literal(StringLiteral("\"(line \"")))
                                                          , InvokeQExp(This(), [], Id("getCurrentLineNumber"), [])
                                                          )
                                                        , Literal2Expression(StringLiteral2Literal(StringLiteral("\") invalid parse sequence\"")))
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        , SwitchGroup(
                                            [CaseExpr(ExpressionName2Expression(ExpressionName(Id("COMMENT"))))]
                                          , [ Statement2BlockStatement(
                                                IfElse(
                                                  Eq(ExpressionName2Expression(ExpressionName(Id("sb"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("sb")))
                                                            , UnqualifiedInstance2Expression(
                                                                NewInstance([], [], Id("StringBuilder"), [], [], [])
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(Id("sb")))
                                                            , []
                                                            , Id("append")
                                                            , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("Constants")), Id("LF")))]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("sb")))
                                                  , []
                                                  , Id("append")
                                                  , [FieldAccess2Expression(
                                                       Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("content"))
                                                     )]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    FieldAccess2LHS(
                                                      Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("type"))
                                                    )
                                                  , ExpressionName2Expression(ExpressionName(Id("TOKEN")))
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Break())
                                            ]
                                          )
                                        , SwitchGroup(
                                            [DefaultCase()]
                                          , [ Statement2BlockStatement(
                                                Throw(
                                                  UnqualifiedInstance2Expression(
                                                    NewInstance(
                                                      []
                                                    , []
                                                    , Id("IllegalStateException")
                                                    , []
                                                    , []
                                                    , [ Add(
                                                          Literal2Expression(StringLiteral2Literal(StringLiteral("\"Unexpected Token type: \"")))
                                                        , FieldAccess2Expression(
                                                            Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("type"))
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        ]
                                      , []
                                      )
                                    )
                                  ]
                                )
                              )
                            , Eq(
                                FieldAccess2Expression(
                                  Field(FieldAccess2Expression(Field(This(), Id("reusableToken"))), Id("type"))
                                )
                              , ExpressionName2Expression(ExpressionName(Id("TOKEN")))
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Not(
                                InvokeQExp(
                                  FieldAccess2Expression(Field(This(), Id("recordList")))
                                , []
                                , Id("isEmpty")
                                , []
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(ExpressionStatement(PostIncr(FieldAccess2Expression(Field(This(), Id("recordNumber"))))))
                                  , LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("comment"))
                                            , Expression2VariableInitializer(
                                                Cond(
                                                  Eq(ExpressionName2Expression(ExpressionName(Id("sb"))), Literal2Expression(NullLiteral2Literal(Null())))
                                                , Literal2Expression(NullLiteral2Literal(Null()))
                                                , InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("sb")))
                                                  , []
                                                  , Id("toString")
                                                  , []
                                                  )
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("result")))
                                        , UnqualifiedInstance2Expression(
                                            NewInstance(
                                              []
                                            , []
                                            , Id("CSVRecord")
                                            , []
                                            , []
                                            , [ This()
                                              , InvokeQExp(
                                                  FieldAccess2Expression(Field(This(), Id("recordList")))
                                                , []
                                                , Id("toArray")
                                                , [ ArrayCreationExpression2Expression(
                                                      NewArray(
                                                        ClassType2ArrayBaseType(ClassType([], Id("String"), []))
                                                      , [ Dim(
                                                            []
                                                          , InvokeQExp(
                                                              FieldAccess2Expression(Field(This(), Id("recordList")))
                                                            , []
                                                            , Id("size")
                                                            , []
                                                            )
                                                          )
                                                        ]
                                                      , AnnotatedDims2AnnotatedDimsEmpty([])
                                                      )
                                                    )
                                                  ]
                                                )
                                              , ExpressionName2Expression(ExpressionName(Id("comment")))
                                              , FieldAccess2Expression(Field(This(), Id("recordNumber")))
                                              , ExpressionName2Expression(ExpressionName(Id("startCharPosition")))
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("result")))))
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/Lexer.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("BACKSPACE")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("CR")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("END_OF_STREAM")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("FF")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("LF")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("TAB")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
            , Id("commons")
            )
          , Id("csv")
          )
        , Id("Constants")
        )
      , Id("UNDEFINED")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("COMMENT")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("EOF")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("EORECORD")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("INVALID")
      )
    , SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("TOKEN")
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Closeable")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("IOException")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Final2ClassModifier(Final())]
          , Id("Lexer")
          , []
          , []
          , [SuperInterface([ClassType([], Id("Closeable"), [])])]
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("CR_STRING"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("Character")))
                          , []
                          , Id("toString")
                          , [ExpressionName2Expression(ExpressionName(Id("CR")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("LF_STRING"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("Character")))
                          , []
                          , Id("toString")
                          , [ExpressionName2Expression(ExpressionName(Id("LF")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("DISABLED"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\ufffe'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("delimiter")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("escape")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("quoteChar")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("commentStart")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("ignoreSurroundingSpaces")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("ignoreEmptyLines")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("ExtendedBufferedReader"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("reader")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("firstEol")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("getFirstEol")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("firstEol")))))])
                    )
                  )
                )
              )
            , ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  []
                , []
                , Id("Lexer")
                , ParamList(
                    [ FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVFormat"), [])))
                      , VariableDecl(Id("format"))
                      )
                    ]
                  , FormalParam2LastFormalParam(
                      FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("ExtendedBufferedReader"), [])))
                      , VariableDecl(Id("reader"))
                      )
                    )
                  )
                , []
                , []
                , [ Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("reader")))
                        , ExpressionName2Expression(ExpressionName(Id("reader")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("delimiter")))
                        , InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("format")))
                          , []
                          , Id("getDelimiter")
                          , []
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("escape")))
                        , Invoke(
                            MethodName(Id("mapNullToDisabled"))
                          , [InvokeQExp(
                               ExpressionName2Expression(ExpressionName(Id("format")))
                             , []
                             , Id("getEscapeCharacter")
                             , []
                             )]
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("quoteChar")))
                        , Invoke(
                            MethodName(Id("mapNullToDisabled"))
                          , [InvokeQExp(
                               ExpressionName2Expression(ExpressionName(Id("format")))
                             , []
                             , Id("getQuoteCharacter")
                             , []
                             )]
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("commentStart")))
                        , Invoke(
                            MethodName(Id("mapNullToDisabled"))
                          , [InvokeQExp(
                               ExpressionName2Expression(ExpressionName(Id("format")))
                             , []
                             , Id("getCommentMarker")
                             , []
                             )]
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("ignoreSurroundingSpaces")))
                        , InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("format")))
                          , []
                          , Id("getIgnoreSurroundingSpaces")
                          , []
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("ignoreEmptyLines")))
                        , InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("format")))
                          , []
                          , Id("getIgnoreEmptyLines")
                          , []
                          )
                        )
                      )
                    )
                  ]
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), []))))
                    , Id("nextToken")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), [])))
                          , VariableDecl(Id("token"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("lastChar"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("reader")))
                                      , []
                                      , Id("getLastChar")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("c"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("reader")))
                                      , []
                                      , Id("read")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(BooleanType())
                              , [ VariableDeclInit(
                                    VariableDecl(Id("eol"))
                                  , Expression2VariableInitializer(
                                      Invoke(
                                        MethodName(Id("readEndOfLine"))
                                      , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              ExpressionName2Expression(ExpressionName(Id("ignoreEmptyLines")))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      While(
                                        LazyAnd(
                                          ExpressionName2Expression(ExpressionName(Id("eol")))
                                        , Invoke(
                                            MethodName(Id("isStartOfLine"))
                                          , [ExpressionName2Expression(ExpressionName(Id("lastChar")))]
                                          )
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("lastChar")))
                                                  , ExpressionName2Expression(ExpressionName(Id("c")))
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("c")))
                                                  , InvokeQExp(
                                                      ExpressionName2Expression(ExpressionName(Id("reader")))
                                                    , []
                                                    , Id("read")
                                                    , []
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(Id("eol")))
                                                  , Invoke(
                                                      MethodName(Id("readEndOfLine"))
                                                    , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                    )
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                If(
                                                  Invoke(
                                                    MethodName(Id("isEndOfFile"))
                                                  , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                            , ExpressionName2Expression(ExpressionName(Id("EOF")))
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyOr(
                                Invoke(
                                  MethodName(Id("isEndOfFile"))
                                , [ExpressionName2Expression(ExpressionName(Id("lastChar")))]
                                )
                              , LazyAnd(
                                  Not(
                                    Invoke(
                                      MethodName(Id("isDelimiter"))
                                    , [ExpressionName2Expression(ExpressionName(Id("lastChar")))]
                                    )
                                  )
                                , Invoke(
                                    MethodName(Id("isEndOfFile"))
                                  , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                        , ExpressionName2Expression(ExpressionName(Id("EOF")))
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              LazyAnd(
                                Invoke(
                                  MethodName(Id("isStartOfLine"))
                                , [ExpressionName2Expression(ExpressionName(Id("lastChar")))]
                                )
                              , Invoke(
                                  MethodName(Id("isCommentStart"))
                                , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("line"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("reader")))
                                                , []
                                                , Id("readLine")
                                                , []
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Eq(ExpressionName2Expression(ExpressionName(Id("line"))), Literal2Expression(NullLiteral2Literal(Null())))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                  , ExpressionName2Expression(ExpressionName(Id("EOF")))
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("comment"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("line")))
                                                , []
                                                , Id("trim")
                                                , []
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                        , []
                                        , Id("append")
                                        , [ExpressionName2Expression(ExpressionName(Id("comment")))]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                        , ExpressionName2Expression(ExpressionName(Id("COMMENT")))
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              Eq(
                                ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                              , ExpressionName2Expression(ExpressionName(Id("INVALID")))
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      If(
                                        ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                While(
                                                  LazyAnd(
                                                    Invoke(
                                                      MethodName(Id("isWhitespace"))
                                                    , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                    )
                                                  , Not(ExpressionName2Expression(ExpressionName(Id("eol"))))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("c")))
                                                            , InvokeQExp(
                                                                ExpressionName2Expression(ExpressionName(Id("reader")))
                                                              , []
                                                              , Id("read")
                                                              , []
                                                              )
                                                            )
                                                          )
                                                        )
                                                      , Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            Assign(
                                                              ExpressionName2LHS(ExpressionName(Id("eol")))
                                                            , Invoke(
                                                                MethodName(Id("readEndOfLine"))
                                                              , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                              )
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      IfElse(
                                        Invoke(
                                          MethodName(Id("isDelimiter"))
                                        , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                  , ExpressionName2Expression(ExpressionName(Id("TOKEN")))
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , IfElse(
                                          ExpressionName2Expression(ExpressionName(Id("eol")))
                                        , Block2Statement(
                                            Block(
                                              [ Statement2BlockStatement(
                                                  ExpressionStatement(
                                                    Assign(
                                                      ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                    , ExpressionName2Expression(ExpressionName(Id("EORECORD")))
                                                    )
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        , IfElse(
                                            Invoke(
                                              MethodName(Id("isQuoteChar"))
                                            , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                            )
                                          , Block2Statement(
                                              Block(
                                                [ Statement2BlockStatement(
                                                    ExpressionStatement(
                                                      Invoke(
                                                        MethodName(Id("parseEncapsulatedToken"))
                                                      , [ExpressionName2Expression(ExpressionName(Id("token")))]
                                                      )
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          , IfElse(
                                              Invoke(
                                                MethodName(Id("isEndOfFile"))
                                              , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                              )
                                            , Block2Statement(
                                                Block(
                                                  [ Statement2BlockStatement(
                                                      ExpressionStatement(
                                                        Assign(
                                                          ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                        , ExpressionName2Expression(ExpressionName(Id("EOF")))
                                                        )
                                                      )
                                                    )
                                                  , Statement2BlockStatement(
                                                      ExpressionStatement(
                                                        Assign(
                                                          ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("isReady")))
                                                        , Literal2Expression(BoolLiteral2Literal(True()))
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            , Block2Statement(
                                                Block(
                                                  [ Statement2BlockStatement(
                                                      ExpressionStatement(
                                                        Invoke(
                                                          MethodName(Id("parseSimpleToken"))
                                                        , [ExpressionName2Expression(ExpressionName(Id("token"))), ExpressionName2Expression(ExpressionName(Id("c")))]
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), []))))
                    , Id("parseSimpleToken")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), [])))
                          , VariableDecl(Id("token"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam([], UnannPrimitiveType2UnannType(NumericType(Int())), VariableDecl(Id("ch")))
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            While(
                              Literal2Expression(BoolLiteral2Literal(True()))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      IfElse(
                                        Invoke(
                                          MethodName(Id("readEndOfLine"))
                                        , [ExpressionName2Expression(ExpressionName(Id("ch")))]
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                  , ExpressionName2Expression(ExpressionName(Id("EORECORD")))
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(Break())
                                            ]
                                          )
                                        )
                                      , IfElse(
                                          Invoke(
                                            MethodName(Id("isEndOfFile"))
                                          , [ExpressionName2Expression(ExpressionName(Id("ch")))]
                                          )
                                        , Block2Statement(
                                            Block(
                                              [ Statement2BlockStatement(
                                                  ExpressionStatement(
                                                    Assign(
                                                      ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                    , ExpressionName2Expression(ExpressionName(Id("EOF")))
                                                    )
                                                  )
                                                )
                                              , Statement2BlockStatement(
                                                  ExpressionStatement(
                                                    Assign(
                                                      ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("isReady")))
                                                    , Literal2Expression(BoolLiteral2Literal(True()))
                                                    )
                                                  )
                                                )
                                              , Statement2BlockStatement(Break())
                                              ]
                                            )
                                          )
                                        , IfElse(
                                            Invoke(
                                              MethodName(Id("isDelimiter"))
                                            , [ExpressionName2Expression(ExpressionName(Id("ch")))]
                                            )
                                          , Block2Statement(
                                              Block(
                                                [ Statement2BlockStatement(
                                                    ExpressionStatement(
                                                      Assign(
                                                        ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                      , ExpressionName2Expression(ExpressionName(Id("TOKEN")))
                                                      )
                                                    )
                                                  )
                                                , Statement2BlockStatement(Break())
                                                ]
                                              )
                                            )
                                          , IfElse(
                                              Invoke(
                                                MethodName(Id("isEscape"))
                                              , [ExpressionName2Expression(ExpressionName(Id("ch")))]
                                              )
                                            , Block2Statement(
                                                Block(
                                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                                      LocVarDeclStm(
                                                        LocalVarDecl(
                                                          [Final2VariableModifier(Final())]
                                                        , UnannPrimitiveType2UnannType(NumericType(Int()))
                                                        , [ VariableDeclInit(
                                                              VariableDecl(Id("unescaped"))
                                                            , Expression2VariableInitializer(Invoke(MethodName(Id("readEscape")), []))
                                                            )
                                                          ]
                                                        )
                                                      )
                                                    )
                                                  , Statement2BlockStatement(
                                                      IfElse(
                                                        Eq(
                                                          ExpressionName2Expression(ExpressionName(Id("unescaped")))
                                                        , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                                                        )
                                                      , Block2Statement(
                                                          Block(
                                                            [ Statement2BlockStatement(
                                                                ExpressionStatement(
                                                                  InvokeQExp(
                                                                    InvokeQExp(
                                                                      ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                                    , []
                                                                    , Id("append")
                                                                    , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("ch"))))]
                                                                    )
                                                                  , []
                                                                  , Id("append")
                                                                  , [ CastPrimitive(
                                                                        NumericType([], Char())
                                                                      , InvokeQExp(
                                                                          ExpressionName2Expression(ExpressionName(Id("reader")))
                                                                        , []
                                                                        , Id("getLastChar")
                                                                        , []
                                                                        )
                                                                      )
                                                                    ]
                                                                  )
                                                                )
                                                              )
                                                            ]
                                                          )
                                                        )
                                                      , Block2Statement(
                                                          Block(
                                                            [ Statement2BlockStatement(
                                                                ExpressionStatement(
                                                                  InvokeQExp(
                                                                    ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                                  , []
                                                                  , Id("append")
                                                                  , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("unescaped"))))]
                                                                  )
                                                                )
                                                              )
                                                            ]
                                                          )
                                                        )
                                                      )
                                                    )
                                                  , Statement2BlockStatement(
                                                      ExpressionStatement(
                                                        Assign(
                                                          ExpressionName2LHS(ExpressionName(Id("ch")))
                                                        , InvokeQExp(
                                                            ExpressionName2Expression(ExpressionName(Id("reader")))
                                                          , []
                                                          , Id("read")
                                                          , []
                                                          )
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            , Block2Statement(
                                                Block(
                                                  [ Statement2BlockStatement(
                                                      ExpressionStatement(
                                                        InvokeQExp(
                                                          ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                        , []
                                                        , Id("append")
                                                        , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("ch"))))]
                                                        )
                                                      )
                                                    )
                                                  , Statement2BlockStatement(
                                                      ExpressionStatement(
                                                        Assign(
                                                          ExpressionName2LHS(ExpressionName(Id("ch")))
                                                        , InvokeQExp(
                                                            ExpressionName2Expression(ExpressionName(Id("reader")))
                                                          , []
                                                          , Id("read")
                                                          , []
                                                          )
                                                        )
                                                      )
                                                    )
                                                  ]
                                                )
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              ExpressionName2Expression(ExpressionName(Id("ignoreSurroundingSpaces")))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Invoke(
                                          MethodName(Id("trimTrailingSpaces"))
                                        , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), []))))
                    , Id("parseEncapsulatedToken")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Token"), [])))
                          , VariableDecl(Id("token"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Long()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("startLineNumber"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getCurrentLineNumber")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VarDeclId2VarDecl(VariableDecl(Id("c")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              Literal2Expression(BoolLiteral2Literal(True()))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("c")))
                                        , InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("reader")))
                                          , []
                                          , Id("read")
                                          , []
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      IfElse(
                                        Invoke(
                                          MethodName(Id("isEscape"))
                                        , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ LocalVariableDeclarationStatement2BlockStatement(
                                                LocVarDeclStm(
                                                  LocalVarDecl(
                                                    [Final2VariableModifier(Final())]
                                                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                                                  , [ VariableDeclInit(
                                                        VariableDecl(Id("unescaped"))
                                                      , Expression2VariableInitializer(Invoke(MethodName(Id("readEscape")), []))
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            , Statement2BlockStatement(
                                                IfElse(
                                                  Eq(
                                                    ExpressionName2Expression(ExpressionName(Id("unescaped")))
                                                  , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              InvokeQExp(
                                                                ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                              , []
                                                              , Id("append")
                                                              , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                                              )
                                                            , []
                                                            , Id("append")
                                                            , [ CastPrimitive(
                                                                  NumericType([], Char())
                                                                , InvokeQExp(
                                                                    ExpressionName2Expression(ExpressionName(Id("reader")))
                                                                  , []
                                                                  , Id("getLastChar")
                                                                  , []
                                                                  )
                                                                )
                                                              ]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                , Block2Statement(
                                                    Block(
                                                      [ Statement2BlockStatement(
                                                          ExpressionStatement(
                                                            InvokeQExp(
                                                              ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                            , []
                                                            , Id("append")
                                                            , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("unescaped"))))]
                                                            )
                                                          )
                                                        )
                                                      ]
                                                    )
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , IfElse(
                                          Invoke(
                                            MethodName(Id("isQuoteChar"))
                                          , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                          )
                                        , Block2Statement(
                                            Block(
                                              [ Statement2BlockStatement(
                                                  IfElse(
                                                    Invoke(
                                                      MethodName(Id("isQuoteChar"))
                                                    , [InvokeQExp(
                                                         ExpressionName2Expression(ExpressionName(Id("reader")))
                                                       , []
                                                       , Id("lookAhead")
                                                       , []
                                                       )]
                                                    )
                                                  , Block2Statement(
                                                      Block(
                                                        [ Statement2BlockStatement(
                                                            ExpressionStatement(
                                                              Assign(
                                                                ExpressionName2LHS(ExpressionName(Id("c")))
                                                              , InvokeQExp(
                                                                  ExpressionName2Expression(ExpressionName(Id("reader")))
                                                                , []
                                                                , Id("read")
                                                                , []
                                                                )
                                                              )
                                                            )
                                                          )
                                                        , Statement2BlockStatement(
                                                            ExpressionStatement(
                                                              InvokeQExp(
                                                                ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                              , []
                                                              , Id("append")
                                                              , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  , Block2Statement(
                                                      Block(
                                                        [ Statement2BlockStatement(
                                                            While(
                                                              Literal2Expression(BoolLiteral2Literal(True()))
                                                            , Block2Statement(
                                                                Block(
                                                                  [ Statement2BlockStatement(
                                                                      ExpressionStatement(
                                                                        Assign(
                                                                          ExpressionName2LHS(ExpressionName(Id("c")))
                                                                        , InvokeQExp(
                                                                            ExpressionName2Expression(ExpressionName(Id("reader")))
                                                                          , []
                                                                          , Id("read")
                                                                          , []
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  , Statement2BlockStatement(
                                                                      IfElse(
                                                                        Invoke(
                                                                          MethodName(Id("isDelimiter"))
                                                                        , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                                        )
                                                                      , Block2Statement(
                                                                          Block(
                                                                            [ Statement2BlockStatement(
                                                                                ExpressionStatement(
                                                                                  Assign(
                                                                                    ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                                                  , ExpressionName2Expression(ExpressionName(Id("TOKEN")))
                                                                                  )
                                                                                )
                                                                              )
                                                                            , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                                                            ]
                                                                          )
                                                                        )
                                                                      , IfElse(
                                                                          Invoke(
                                                                            MethodName(Id("isEndOfFile"))
                                                                          , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                                          )
                                                                        , Block2Statement(
                                                                            Block(
                                                                              [ Statement2BlockStatement(
                                                                                  ExpressionStatement(
                                                                                    Assign(
                                                                                      ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                                                    , ExpressionName2Expression(ExpressionName(Id("EOF")))
                                                                                    )
                                                                                  )
                                                                                )
                                                                              , Statement2BlockStatement(
                                                                                  ExpressionStatement(
                                                                                    Assign(
                                                                                      ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("isReady")))
                                                                                    , Literal2Expression(BoolLiteral2Literal(True()))
                                                                                    )
                                                                                  )
                                                                                )
                                                                              , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                                                              ]
                                                                            )
                                                                          )
                                                                        , IfElse(
                                                                            Invoke(
                                                                              MethodName(Id("readEndOfLine"))
                                                                            , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                                            )
                                                                          , Block2Statement(
                                                                              Block(
                                                                                [ Statement2BlockStatement(
                                                                                    ExpressionStatement(
                                                                                      Assign(
                                                                                        ExpressionName2LHS(ExpressionName(AmbiguousName(Id("token")), Id("type")))
                                                                                      , ExpressionName2Expression(ExpressionName(Id("EORECORD")))
                                                                                      )
                                                                                    )
                                                                                  )
                                                                                , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("token")))))
                                                                                ]
                                                                              )
                                                                            )
                                                                          , If(
                                                                              Not(
                                                                                Invoke(
                                                                                  MethodName(Id("isWhitespace"))
                                                                                , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                                                                )
                                                                              )
                                                                            , Block2Statement(
                                                                                Block(
                                                                                  [ Statement2BlockStatement(
                                                                                      Throw(
                                                                                        UnqualifiedInstance2Expression(
                                                                                          NewInstance(
                                                                                            []
                                                                                          , []
                                                                                          , Id("IOException")
                                                                                          , []
                                                                                          , []
                                                                                          , [ Add(
                                                                                                Add(
                                                                                                  Literal2Expression(StringLiteral2Literal(StringLiteral("\"(line \"")))
                                                                                                , Invoke(MethodName(Id("getCurrentLineNumber")), [])
                                                                                                )
                                                                                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\") invalid char between encapsulated token and delimiter\"")))
                                                                                              )
                                                                                            ]
                                                                                          )
                                                                                        )
                                                                                      )
                                                                                    )
                                                                                  ]
                                                                                )
                                                                              )
                                                                            )
                                                                          )
                                                                        )
                                                                      )
                                                                    )
                                                                  ]
                                                                )
                                                              )
                                                            )
                                                          )
                                                        ]
                                                      )
                                                    )
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        , IfElse(
                                            Invoke(
                                              MethodName(Id("isEndOfFile"))
                                            , [ExpressionName2Expression(ExpressionName(Id("c")))]
                                            )
                                          , Block2Statement(
                                              Block(
                                                [ Statement2BlockStatement(
                                                    Throw(
                                                      UnqualifiedInstance2Expression(
                                                        NewInstance(
                                                          []
                                                        , []
                                                        , Id("IOException")
                                                        , []
                                                        , []
                                                        , [ Add(
                                                              Add(
                                                                Literal2Expression(StringLiteral2Literal(StringLiteral("\"(startline \"")))
                                                              , ExpressionName2Expression(ExpressionName(Id("startLineNumber")))
                                                              )
                                                            , Literal2Expression(StringLiteral2Literal(StringLiteral("\") EOF reached before encapsulated token finished\"")))
                                                            )
                                                          ]
                                                        )
                                                      )
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          , Block2Statement(
                                              Block(
                                                [ Statement2BlockStatement(
                                                    ExpressionStatement(
                                                      InvokeQExp(
                                                        ExpressionName2Expression(ExpressionName(AmbiguousName(Id("token")), Id("content")))
                                                      , []
                                                      , Id("append")
                                                      , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("c"))))]
                                                      )
                                                    )
                                                  )
                                                ]
                                              )
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Char())))
                    , Id("mapNullToDisabled")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                          , VariableDecl(Id("c"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Cond(
                                Eq(ExpressionName2Expression(ExpressionName(Id("c"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , ExpressionName2Expression(ExpressionName(Id("DISABLED")))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("c")))
                                , []
                                , Id("charValue")
                                , []
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getCurrentLineNumber")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("reader")))
                              , []
                              , Id("getCurrentLineNumber")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getCharacterPosition")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("reader")))
                              , []
                              , Id("getPosition")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("readEscape")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("ch"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("reader")))
                                      , []
                                      , Id("read")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Switch(
                              ExpressionName2Expression(ExpressionName(Id("ch")))
                            , [ SwitchGroup(
                                  [CaseExpr(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'r'"))))]
                                , [Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("CR")))))]
                                )
                              , SwitchGroup(
                                  [CaseExpr(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'n'"))))]
                                , [Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("LF")))))]
                                )
                              , SwitchGroup(
                                  [CaseExpr(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'t'"))))]
                                , [Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("TAB")))))]
                                )
                              , SwitchGroup(
                                  [CaseExpr(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'b'"))))]
                                , [Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("BACKSPACE")))))]
                                )
                              , SwitchGroup(
                                  [CaseExpr(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'f'"))))]
                                , [Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("FF")))))]
                                )
                              , SwitchGroup(
                                  [ CaseExpr(ExpressionName2Expression(ExpressionName(Id("CR"))))
                                  , CaseExpr(ExpressionName2Expression(ExpressionName(Id("LF"))))
                                  , CaseExpr(ExpressionName2Expression(ExpressionName(Id("FF"))))
                                  , CaseExpr(ExpressionName2Expression(ExpressionName(Id("TAB"))))
                                  , CaseExpr(ExpressionName2Expression(ExpressionName(Id("BACKSPACE"))))
                                  ]
                                , [Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("ch")))))]
                                )
                              , SwitchGroup(
                                  [CaseExpr(ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM"))))]
                                , [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IOException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"EOF whilst processing escape sequence\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              , SwitchGroup(
                                  [DefaultCase()]
                                , [ Statement2BlockStatement(
                                      If(
                                        Invoke(
                                          MethodName(Id("isMetaChar"))
                                        , [ExpressionName2Expression(ExpressionName(Id("ch")))]
                                        )
                                      , Block2Statement(
                                          Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("ch")))))])
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))))
                                  ]
                                )
                              ]
                            , []
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      Void()
                    , Id("trimTrailingSpaces")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringBuilder"), [])))
                          , VariableDecl(Id("buffer"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("length"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("buffer")))
                                      , []
                                      , Id("length")
                                      , []
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              LazyAnd(
                                Gt(
                                  ExpressionName2Expression(ExpressionName(Id("length")))
                                , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                )
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("Character")))
                                , []
                                , Id("isWhitespace")
                                , [ InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("buffer")))
                                    , []
                                    , Id("charAt")
                                    , [Sub(
                                         ExpressionName2Expression(ExpressionName(Id("length")))
                                       , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                       )]
                                    )
                                  ]
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("length")))
                                        , Sub(
                                            ExpressionName2Expression(ExpressionName(Id("length")))
                                          , Literal2Expression(IntLiteral2Literal(Deci("1")))
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("length")))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("buffer")))
                                , []
                                , Id("length")
                                , []
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("buffer")))
                                        , []
                                        , Id("setLength")
                                        , [ExpressionName2Expression(ExpressionName(Id("length")))]
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("readEndOfLine")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam([], UnannPrimitiveType2UnannType(NumericType(Int())), VariableDecl(Id("ch")))
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              LazyAnd(
                                Eq(
                                  ExpressionName2Expression(ExpressionName(Id("ch")))
                                , ExpressionName2Expression(ExpressionName(Id("CR")))
                                )
                              , Eq(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("reader")))
                                  , []
                                  , Id("lookAhead")
                                  , []
                                  )
                                , ExpressionName2Expression(ExpressionName(Id("LF")))
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        Assign(
                                          ExpressionName2LHS(ExpressionName(Id("ch")))
                                        , InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("reader")))
                                          , []
                                          , Id("read")
                                          , []
                                          )
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Eq(ExpressionName2Expression(ExpressionName(Id("firstEol"))), Literal2Expression(NullLiteral2Literal(Null())))
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    FieldAccess2LHS(Field(This(), Id("firstEol")))
                                                  , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("Constants")), Id("CRLF")))
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("firstEol"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      IfElse(
                                        Eq(
                                          ExpressionName2Expression(ExpressionName(Id("ch")))
                                        , ExpressionName2Expression(ExpressionName(Id("LF")))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  Assign(
                                                    FieldAccess2LHS(Field(This(), Id("firstEol")))
                                                  , ExpressionName2Expression(ExpressionName(Id("LF_STRING")))
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      , If(
                                          Eq(
                                            ExpressionName2Expression(ExpressionName(Id("ch")))
                                          , ExpressionName2Expression(ExpressionName(Id("CR")))
                                          )
                                        , Block2Statement(
                                            Block(
                                              [ Statement2BlockStatement(
                                                  ExpressionStatement(
                                                    Assign(
                                                      FieldAccess2LHS(Field(This(), Id("firstEol")))
                                                    , ExpressionName2Expression(ExpressionName(Id("CR_STRING")))
                                                    )
                                                  )
                                                )
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              LazyOr(
                                Eq(
                                  ExpressionName2Expression(ExpressionName(Id("ch")))
                                , ExpressionName2Expression(ExpressionName(Id("LF")))
                                )
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("ch")))
                                , ExpressionName2Expression(ExpressionName(Id("CR")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isClosed")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("reader")))
                              , []
                              , Id("isClosed")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isWhitespace")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              LazyAnd(
                                Not(
                                  Invoke(
                                    MethodName(Id("isDelimiter"))
                                  , [ExpressionName2Expression(ExpressionName(Id("ch")))]
                                  )
                                )
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("Character")))
                                , []
                                , Id("isWhitespace")
                                , [CastPrimitive(NumericType([], Char()), ExpressionName2Expression(ExpressionName(Id("ch"))))]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isStartOfLine")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              LazyOr(
                                LazyOr(
                                  Eq(
                                    ExpressionName2Expression(ExpressionName(Id("ch")))
                                  , ExpressionName2Expression(ExpressionName(Id("LF")))
                                  )
                                , Eq(
                                    ExpressionName2Expression(ExpressionName(Id("ch")))
                                  , ExpressionName2Expression(ExpressionName(Id("CR")))
                                  )
                                )
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("ch")))
                                , ExpressionName2Expression(ExpressionName(Id("UNDEFINED")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isEndOfFile")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Eq(
                                ExpressionName2Expression(ExpressionName(Id("ch")))
                              , ExpressionName2Expression(ExpressionName(Id("END_OF_STREAM")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isDelimiter")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Eq(
                                ExpressionName2Expression(ExpressionName(Id("ch")))
                              , ExpressionName2Expression(ExpressionName(Id("delimiter")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isEscape")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Eq(
                                ExpressionName2Expression(ExpressionName(Id("ch")))
                              , ExpressionName2Expression(ExpressionName(Id("escape")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isQuoteChar")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Eq(
                                ExpressionName2Expression(ExpressionName(Id("ch")))
                              , ExpressionName2Expression(ExpressionName(Id("quoteChar")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isCommentStart")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Eq(
                                ExpressionName2Expression(ExpressionName(Id("ch")))
                              , ExpressionName2Expression(ExpressionName(Id("commentStart")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isMetaChar")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("ch"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              LazyOr(
                                LazyOr(
                                  LazyOr(
                                    Eq(
                                      ExpressionName2Expression(ExpressionName(Id("ch")))
                                    , ExpressionName2Expression(ExpressionName(Id("delimiter")))
                                    )
                                  , Eq(
                                      ExpressionName2Expression(ExpressionName(Id("ch")))
                                    , ExpressionName2Expression(ExpressionName(Id("escape")))
                                    )
                                  )
                                , Eq(
                                    ExpressionName2Expression(ExpressionName(Id("ch")))
                                  , ExpressionName2Expression(ExpressionName(Id("quoteChar")))
                                  )
                                )
                              , Eq(
                                  ExpressionName2Expression(ExpressionName(Id("ch")))
                                , ExpressionName2Expression(ExpressionName(Id("commentStart")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      Void()
                    , Id("close")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("reader")))
                              , []
                              , Id("close")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/Token.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleStaticImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(
              PackageOrTypeName(
                PackageOrTypeName(PackageOrTypeName(Id("org")), Id("apache"))
              , Id("commons")
              )
            , Id("csv")
            )
          , Id("Token")
          )
        , Id("Type")
        )
      , Id("INVALID")
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Final2ClassModifier(Final())]
          , Id("Token")
          , []
          , []
          , []
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                  , [VariableDeclInit(
                       VariableDecl(Id("INITIAL_TOKEN_LENGTH"))
                     , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("50"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                ClassDeclaration2ClassMemberDeclaration(
                  EnumDeclaration2ClassDeclaration(
                    EnumDecl(
                      []
                    , Id("Type")
                    , []
                    , [ EnumConstNoBody([], Id("INVALID"), [])
                      , EnumConstNoBody([], Id("TOKEN"), [])
                      , EnumConstNoBody([], Id("EOF"), [])
                      , EnumConstNoBody([], Id("EORECORD"), [])
                      , EnumConstNoBody([], Id("COMMENT"), [])
                      ]
                    , []
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    []
                  , UnannReferenceType2UnannType(
                      UnannClassType2UnannReferenceType(
                        UnannClassOrInterfaceTypeMember(
                          ClassType(Id("Token"), [])
                        , []
                        , Id("Type")
                        , []
                        )
                      )
                    )
                  , [VariableDeclInit(
                       VariableDecl(Id("type"))
                     , Expression2VariableInitializer(ExpressionName2Expression(ExpressionName(Id("INVALID"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("StringBuilder"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("content"))
                      , Expression2VariableInitializer(
                          UnqualifiedInstance2Expression(
                            NewInstance(
                              []
                            , []
                            , Id("StringBuilder")
                            , []
                            , []
                            , [ExpressionName2Expression(ExpressionName(Id("INITIAL_TOKEN_LENGTH")))]
                            )
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    []
                  , UnannPrimitiveType2UnannType(BooleanType())
                  , [VarDeclId2VarDecl(VariableDecl(Id("isReady")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(Void(), Id("reset"), NoParams(), AnnotatedDims2AnnotatedDimsEmpty([]), [])
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            ExpressionStatement(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("content")))
                              , []
                              , Id("setLength")
                              , [Literal2Expression(IntLiteral2Literal(Deci("0")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(
                                ExpressionName2LHS(ExpressionName(Id("type")))
                              , ExpressionName2Expression(ExpressionName(Id("INVALID")))
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ExpressionStatement(
                              Assign(ExpressionName2LHS(ExpressionName(Id("isReady"))), Literal2Expression(BoolLiteral2Literal(False())))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("toString")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Add(
                                Add(
                                  Add(
                                    InvokeQExp(
                                      ExpressionName2Expression(ExpressionName(Id("type")))
                                    , []
                                    , Id("name")
                                    , []
                                    )
                                  , Literal2Expression(StringLiteral2Literal(StringLiteral("\" [\"")))
                                  )
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("content")))
                                  , []
                                  , Id("toString")
                                  , []
                                  )
                                )
                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"]\"")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/IOUtils.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("IOException")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Reader")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Writer")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("nio"))
        , Id("CharBuffer")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            []
          , Id("IOUtils")
          , []
          , []
          , []
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                  , [ VariableDeclInit(
                        VariableDecl(Id("DEFAULT_BUFFER_SIZE"))
                      , Expression2VariableInitializer(
                          Mul(
                            Literal2Expression(IntLiteral2Literal(Deci("1024")))
                          , Literal2Expression(IntLiteral2Literal(Deci("4")))
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                  , [ VariableDeclInit(
                        VariableDecl(Id("EOF"))
                      , Expression2VariableInitializer(Minus(Literal2Expression(IntLiteral2Literal(Deci("1")))))
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("copy")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("input"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("output"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("copy"))
                              , [ ExpressionName2Expression(ExpressionName(Id("input")))
                                , ExpressionName2Expression(ExpressionName(Id("output")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("CharBuffer")))
                                  , []
                                  , Id("allocate")
                                  , [ExpressionName2Expression(ExpressionName(Id("DEFAULT_BUFFER_SIZE")))]
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("copy")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("input"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Appendable"), [])))
                          , VariableDecl(Id("output"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CharBuffer"), [])))
                          , VariableDecl(Id("buffer"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Long()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("count"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VarDeclId2VarDecl(VariableDecl(Id("n")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("EOF")))
                              , Assign(
                                  ExpressionName2LHS(ExpressionName(Id("n")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("input")))
                                  , []
                                  , Id("read")
                                  , [ExpressionName2Expression(ExpressionName(Id("buffer")))]
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("buffer")))
                                        , []
                                        , Id("flip")
                                        , []
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("output")))
                                        , []
                                        , Id("append")
                                        , [ ExpressionName2Expression(ExpressionName(Id("buffer")))
                                          , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                          , ExpressionName2Expression(ExpressionName(Id("n")))
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        AssignAdd(
                                          ExpressionName2LHS(ExpressionName(Id("count")))
                                        , ExpressionName2Expression(ExpressionName(Id("n")))
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("count")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("copyLarge")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("input"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Writer"), [])))
                          , VariableDecl(Id("output"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("copyLarge"))
                              , [ ExpressionName2Expression(ExpressionName(Id("input")))
                                , ExpressionName2Expression(ExpressionName(Id("output")))
                                , ArrayCreationExpression2Expression(
                                    NewArray(
                                      PrimitiveType2ArrayBaseType(NumericType([], Char()))
                                    , [Dim([], ExpressionName2Expression(ExpressionName(Id("DEFAULT_BUFFER_SIZE"))))]
                                    , AnnotatedDims2AnnotatedDimsEmpty([])
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Static2MethodModifier(Static())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("copyLarge")
                    , ParamList(
                        [ FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Reader"), [])))
                          , VariableDecl(Id("input"))
                          )
                        , FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Writer"), [])))
                          , VariableDecl(Id("output"))
                          )
                        ]
                      , FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannArrayType2UnannReferenceType(UnannArrayTypePrimitive(NumericType(Char()), [AnnotateDim([])])))
                          , VariableDecl(Id("buffer"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , [ThrowsDec([ClassType2ExceptionType(ClassType([], Id("IOException"), []))])]
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Long()))
                              , [VariableDeclInit(
                                   VariableDecl(Id("count"))
                                 , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("0"))))
                                 )]
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                []
                              , UnannPrimitiveType2UnannType(NumericType(Int()))
                              , [VarDeclId2VarDecl(VariableDecl(Id("n")))]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            While(
                              NotEq(
                                ExpressionName2Expression(ExpressionName(Id("EOF")))
                              , Assign(
                                  ExpressionName2LHS(ExpressionName(Id("n")))
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("input")))
                                  , []
                                  , Id("read")
                                  , [ExpressionName2Expression(ExpressionName(Id("buffer")))]
                                  )
                                )
                              )
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      ExpressionStatement(
                                        InvokeQExp(
                                          ExpressionName2Expression(ExpressionName(Id("output")))
                                        , []
                                        , Id("write")
                                        , [ ExpressionName2Expression(ExpressionName(Id("buffer")))
                                          , Literal2Expression(IntLiteral2Literal(Deci("0")))
                                          , ExpressionName2Expression(ExpressionName(Id("n")))
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      ExpressionStatement(
                                        AssignAdd(
                                          ExpressionName2LHS(ExpressionName(Id("count")))
                                        , ExpressionName2Expression(ExpressionName(Id("n")))
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("count")))))
                        ]
                      )
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/Constants.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , []
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Final2ClassModifier(Final())]
          , Id("Constants")
          , []
          , []
          , []
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("BACKSLASH"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\\\'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("BACKSPACE"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\b'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("COMMA"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("','"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("COMMENT"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'#'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("CR"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\r'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VariableDeclInit(
                       VariableDecl(Id("CRLF"))
                     , Expression2VariableInitializer(Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\r\\n\""))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Character"), [])))
                  , [ VariableDeclInit(
                        VariableDecl(Id("DOUBLE_QUOTE_CHAR"))
                      , Expression2VariableInitializer(
                          InvokeQExp(
                            ExpressionName2Expression(ExpressionName(Id("Character")))
                          , []
                          , Id("valueOf")
                          , [Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\"'")))]
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VariableDeclInit(
                       VariableDecl(Id("EMPTY"))
                     , Expression2VariableInitializer(Literal2Expression(StringLiteral2Literal(StringLiteral("\"\""))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                  , [ VariableDeclInit(
                        VariableDecl(Id("END_OF_STREAM"))
                      , Expression2VariableInitializer(Minus(Literal2Expression(IntLiteral2Literal(Deci("1")))))
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("FF"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\f'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("LF"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\n'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VariableDeclInit(
                       VariableDecl(Id("LINE_SEPARATOR"))
                     , Expression2VariableInitializer(Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\u2028\""))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VariableDeclInit(
                       VariableDecl(Id("NEXT_LINE"))
                     , Expression2VariableInitializer(Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\u0085\""))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VariableDeclInit(
                       VariableDecl(Id("PARAGRAPH_SEPARATOR"))
                     , Expression2VariableInitializer(Literal2Expression(StringLiteral2Literal(StringLiteral("\"\\u2029\""))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("PIPE"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'|'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("RS"))
                     , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("30"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("SP"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("' '"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("TAB"))
                     , Expression2VariableInitializer(Literal2Expression(CharacterLiteral2Literal(CharLiteral("'\\t'"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Int()))
                  , [ VariableDeclInit(
                        VariableDecl(Id("UNDEFINED"))
                      , Expression2VariableInitializer(Minus(Literal2Expression(IntLiteral2Literal(Deci("2")))))
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Char()))
                  , [VariableDeclInit(
                       VariableDecl(Id("US"))
                     , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("31"))))
                     )]
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
),
( "src/main/java/org/apache/commons/csv/CSVRecord.jav"
, CompilationUnit(
    [ PackageDeclaration(
        []
      , [Id("org"), Id("apache"), Id("commons"), Id("csv")]
      )
    ]
  , [ SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("io"))
        , Id("Serializable")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Arrays")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Iterator")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("LinkedHashMap")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("List")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
        , Id("Map")
        )
      )
    , SingleTypeImport(
        TypeName(
          PackageOrTypeName(
            PackageOrTypeName(PackageOrTypeName(Id("java")), Id("util"))
          , Id("Map")
          )
        , Id("Entry")
        )
      )
    ]
  , [ ClassDeclaration2TypeDeclaration(
        NormalClassDeclaration2ClassDeclaration(
          ClassDeclaration(
            [Public2ClassModifier(Public()), Final2ClassModifier(Final())]
          , Id("CSVRecord")
          , []
          , []
          , [ SuperInterface(
                [ ClassType([], Id("Serializable"), [])
                , ClassType(
                    []
                  , Id("Iterable")
                  , [TypeArguments(
                       [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                     )]
                  )
                ]
              )
            ]
          , [ ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannArrayType2UnannReferenceType(
                        UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                      )
                    )
                  , [ VariableDeclInit(
                        VariableDecl(Id("EMPTY_STRING_ARRAY"))
                      , Expression2VariableInitializer(
                          ArrayCreationExpression2Expression(
                            NewArray(
                              ClassType2ArrayBaseType(ClassType([], Id("String"), []))
                            , [Dim([], Literal2Expression(IntLiteral2Literal(Deci("0"))))]
                            , AnnotatedDims2AnnotatedDimsEmpty([])
                            )
                          )
                        )
                      )
                    ]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Static2FieldModifier(Static()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VariableDeclInit(
                       VariableDecl(Id("serialVersionUID"))
                     , Expression2VariableInitializer(Literal2Expression(IntLiteral2Literal(Deci("1L"))))
                     )]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("characterPosition")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("comment")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannPrimitiveType2UnannType(NumericType(Long()))
                  , [VarDeclId2VarDecl(VariableDecl(Id("recordNumber")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(
                      UnannArrayType2UnannReferenceType(
                        UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                      )
                    )
                  , [VarDeclId2VarDecl(VariableDecl(Id("values")))]
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                FieldDeclaration2ClassMemberDeclaration(
                  FieldDecl(
                    [Private2FieldModifier(Private()), Final2FieldModifier(Final())]
                  , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), [])))
                  , [VarDeclId2VarDecl(VariableDecl(Id("parser")))]
                  )
                )
              )
            , ConstructorDeclaration2ClassBodyDeclaration(
                ConstrDecl(
                  []
                , []
                , Id("CSVRecord")
                , ParamList(
                    [ FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), [])))
                      , VariableDecl(Id("parser"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                          )
                        )
                      , VariableDecl(Id("values"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                      , VariableDecl(Id("comment"))
                      )
                    , FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(NumericType(Long()))
                      , VariableDecl(Id("recordNumber"))
                      )
                    ]
                  , FormalParam2LastFormalParam(
                      FormalParam(
                        [Final2VariableModifier(Final())]
                      , UnannPrimitiveType2UnannType(NumericType(Long()))
                      , VariableDecl(Id("characterPosition"))
                      )
                    )
                  )
                , []
                , []
                , [ Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("recordNumber")))
                        , ExpressionName2Expression(ExpressionName(Id("recordNumber")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("values")))
                        , Cond(
                            NotEq(ExpressionName2Expression(ExpressionName(Id("values"))), Literal2Expression(NullLiteral2Literal(Null())))
                          , ExpressionName2Expression(ExpressionName(Id("values")))
                          , ExpressionName2Expression(ExpressionName(Id("EMPTY_STRING_ARRAY")))
                          )
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("parser")))
                        , ExpressionName2Expression(ExpressionName(Id("parser")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("comment")))
                        , ExpressionName2Expression(ExpressionName(Id("comment")))
                        )
                      )
                    )
                  , Statement2BlockStatement(
                      ExpressionStatement(
                        Assign(
                          FieldAccess2LHS(Field(This(), Id("characterPosition")))
                        , ExpressionName2Expression(ExpressionName(Id("characterPosition")))
                        )
                      )
                    )
                  ]
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("get")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(
                              UnannClassType2UnannReferenceType(
                                ClassType(
                                  Id("Enum")
                                , [TypeArguments([WildCard2TypeArgument(WildCard([]))])]
                                )
                              )
                            )
                          , VariableDecl(Id("e"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("get"))
                              , [InvokeQExp(
                                   ExpressionName2Expression(ExpressionName(Id("e")))
                                 , []
                                 , Id("toString")
                                 , []
                                 )]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("get")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannPrimitiveType2UnannType(NumericType(Int()))
                          , VariableDecl(Id("i"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              ArrayAccess2Expression(
                                ArrayAccess(
                                  ExpressionName2Expression(ExpressionName(Id("values")))
                                , ExpressionName2Expression(ExpressionName(Id("i")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("get")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("name"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("Map")
                                    , [ TypeArguments(
                                          [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                          , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                          ]
                                        )
                                      ]
                                    )
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("headerMap"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getHeaderMapRaw")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("headerMap"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalStateException")
                                          , []
                                          , []
                                          , [Literal2Expression(StringLiteral2Literal(StringLiteral("\"No header mapping was specified, the record values can't be accessed by name\"")))]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("Integer"), [])))
                              , [ VariableDeclInit(
                                    VariableDecl(Id("index"))
                                  , Expression2VariableInitializer(
                                      InvokeQExp(
                                        ExpressionName2Expression(ExpressionName(Id("headerMap")))
                                      , []
                                      , Id("get")
                                      , [ExpressionName2Expression(ExpressionName(Id("name")))]
                                      )
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            If(
                              Eq(ExpressionName2Expression(ExpressionName(Id("index"))), Literal2Expression(NullLiteral2Literal(Null())))
                            , Block2Statement(
                                Block(
                                  [ Statement2BlockStatement(
                                      Throw(
                                        UnqualifiedInstance2Expression(
                                          NewInstance(
                                            []
                                          , []
                                          , Id("IllegalArgumentException")
                                          , []
                                          , []
                                          , [ InvokeQExp(
                                                ExpressionName2Expression(ExpressionName(Id("String")))
                                              , []
                                              , Id("format")
                                              , [ Literal2Expression(StringLiteral2Literal(StringLiteral("\"Mapping for %s not found, expected one of %s\"")))
                                                , ExpressionName2Expression(ExpressionName(Id("name")))
                                                , InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("headerMap")))
                                                  , []
                                                  , Id("keySet")
                                                  , []
                                                  )
                                                ]
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Try(
                              Block(
                                [ Statement2BlockStatement(
                                    Return(
                                      ArrayAccess2Expression(
                                        ArrayAccess(
                                          ExpressionName2Expression(ExpressionName(Id("values")))
                                        , InvokeQExp(
                                            ExpressionName2Expression(ExpressionName(Id("index")))
                                          , []
                                          , Id("intValue")
                                          , []
                                          )
                                        )
                                      )
                                    )
                                  )
                                ]
                              )
                            , [ Catch(
                                  CatchParam(
                                    [Final2VariableModifier(Final())]
                                  , CatchType(ClassType(Id("ArrayIndexOutOfBoundsException"), []), [])
                                  , VariableDecl(Id("e"))
                                  )
                                , Block(
                                    [ Statement2BlockStatement(
                                        Throw(
                                          UnqualifiedInstance2Expression(
                                            NewInstance(
                                              []
                                            , []
                                            , Id("IllegalArgumentException")
                                            , []
                                            , []
                                            , [ InvokeQExp(
                                                  ExpressionName2Expression(ExpressionName(Id("String")))
                                                , []
                                                , Id("format")
                                                , [ Literal2Expression(StringLiteral2Literal(StringLiteral("\"Index for header '%s' is %d but CSVRecord only has %d values!\"")))
                                                  , ExpressionName2Expression(ExpressionName(Id("name")))
                                                  , ExpressionName2Expression(ExpressionName(Id("index")))
                                                  , InvokeQExp(
                                                      ExpressionName2Expression(ExpressionName(Id("Integer")))
                                                    , []
                                                    , Id("valueOf")
                                                    , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))]
                                                    )
                                                  ]
                                                )
                                              ]
                                            )
                                          )
                                        )
                                      )
                                    ]
                                  )
                                )
                              ]
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getCharacterPosition")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("characterPosition")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("getComment")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("comment")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Map")
                            , [ TypeArguments(
                                  [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                  , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      )
                    , Id("getHeaderMapRaw")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("parser")))
                              , []
                              , Id("getHeaderMapRaw")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("CSVParser"), []))))
                    , Id("getParser")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("parser")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Long())))
                    , Id("getRecordNumber")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("recordNumber")))))])
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("hasComment")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              NotEq(ExpressionName2Expression(ExpressionName(Id("comment"))), Literal2Expression(NullLiteral2Literal(Null())))
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isConsistent")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("Map")
                                    , [ TypeArguments(
                                          [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                          , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                          ]
                                        )
                                      ]
                                    )
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("headerMap"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getHeaderMapRaw")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              LazyOr(
                                Eq(ExpressionName2Expression(ExpressionName(Id("headerMap"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , Eq(
                                  InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("headerMap")))
                                  , []
                                  , Id("size")
                                  , []
                                  )
                                , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isMapped")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("name"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ LocalVariableDeclarationStatement2BlockStatement(
                            LocVarDeclStm(
                              LocalVarDecl(
                                [Final2VariableModifier(Final())]
                              , UnannReferenceType2UnannType(
                                  UnannClassType2UnannReferenceType(
                                    ClassType(
                                      Id("Map")
                                    , [ TypeArguments(
                                          [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                          , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                          ]
                                        )
                                      ]
                                    )
                                  )
                                )
                              , [ VariableDeclInit(
                                    VariableDecl(Id("headerMap"))
                                  , Expression2VariableInitializer(Invoke(MethodName(Id("getHeaderMapRaw")), []))
                                  )
                                ]
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            Return(
                              LazyAnd(
                                NotEq(ExpressionName2Expression(ExpressionName(Id("headerMap"))), Literal2Expression(NullLiteral2Literal(Null())))
                              , InvokeQExp(
                                  ExpressionName2Expression(ExpressionName(Id("headerMap")))
                                , []
                                , Id("containsKey")
                                , [ExpressionName2Expression(ExpressionName(Id("name")))]
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(BooleanType()))
                    , Id("isSet")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), [])))
                          , VariableDecl(Id("name"))
                          )
                        )
                      )
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              LazyAnd(
                                Invoke(
                                  MethodName(Id("isMapped"))
                                , [ExpressionName2Expression(ExpressionName(Id("name")))]
                                )
                              , Lt(
                                  InvokeQExp(
                                    InvokeQExp(
                                      Invoke(MethodName(Id("getHeaderMapRaw")), [])
                                    , []
                                    , Id("get")
                                    , [ExpressionName2Expression(ExpressionName(Id("name")))]
                                    )
                                  , []
                                  , Id("intValue")
                                  , []
                                  )
                                , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))
                                )
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Iterator")
                            , [TypeArguments(
                                 [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                               )]
                            )
                          )
                        )
                      )
                    , Id("iterator")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                Invoke(MethodName(Id("toList")), [])
                              , []
                              , Id("iterator")
                              , []
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeaderTypeParameters(
                      TypeParameters(
                        [ TypeParameterExtends(
                            []
                          , Id("M")
                          , [ ClassType(
                                []
                              , Id("Map")
                              , [ TypeArguments(
                                    [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                    , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                    ]
                                  )
                                ]
                              )
                            ]
                          )
                        ]
                      )
                    , []
                    , UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("M"), []))))
                    , Id("putIn")
                    , SingleParam(
                        FormalParam2LastFormalParam(
                          FormalParam(
                            [Final2VariableModifier(Final())]
                          , UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("M"), [])))
                          , VariableDecl(Id("map"))
                          )
                        )
                      )
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            If(
                              Eq(
                                Invoke(MethodName(Id("getHeaderMapRaw")), [])
                              , Literal2Expression(NullLiteral2Literal(Null()))
                              )
                            , Block2Statement(
                                Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("map")))))])
                              )
                            )
                          )
                        , Statement2BlockStatement(
                            ForEach(
                              [Final2VariableModifier(Final())]
                            , UnannReferenceType2UnannType(
                                UnannClassType2UnannReferenceType(
                                  ClassType(
                                    Id("Entry")
                                  , [ TypeArguments(
                                        [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                        , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("Integer"), [])))
                                        ]
                                      )
                                    ]
                                  )
                                )
                              )
                            , VariableDecl(Id("entry"))
                            , InvokeQExp(
                                Invoke(MethodName(Id("getHeaderMapRaw")), [])
                              , []
                              , Id("entrySet")
                              , []
                              )
                            , Block2Statement(
                                Block(
                                  [ LocalVariableDeclarationStatement2BlockStatement(
                                      LocVarDeclStm(
                                        LocalVarDecl(
                                          [Final2VariableModifier(Final())]
                                        , UnannPrimitiveType2UnannType(NumericType(Int()))
                                        , [ VariableDeclInit(
                                              VariableDecl(Id("col"))
                                            , Expression2VariableInitializer(
                                                InvokeQExp(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("entry")))
                                                  , []
                                                  , Id("getValue")
                                                  , []
                                                  )
                                                , []
                                                , Id("intValue")
                                                , []
                                                )
                                              )
                                            )
                                          ]
                                        )
                                      )
                                    )
                                  , Statement2BlockStatement(
                                      If(
                                        Lt(
                                          ExpressionName2Expression(ExpressionName(Id("col")))
                                        , ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))
                                        )
                                      , Block2Statement(
                                          Block(
                                            [ Statement2BlockStatement(
                                                ExpressionStatement(
                                                  InvokeQExp(
                                                    ExpressionName2Expression(ExpressionName(Id("map")))
                                                  , []
                                                  , Id("put")
                                                  , [ InvokeQExp(
                                                        ExpressionName2Expression(ExpressionName(Id("entry")))
                                                      , []
                                                      , Id("getKey")
                                                      , []
                                                      )
                                                    , ArrayAccess2Expression(
                                                        ArrayAccess(
                                                          ExpressionName2Expression(ExpressionName(Id("values")))
                                                        , ExpressionName2Expression(ExpressionName(Id("col")))
                                                        )
                                                      )
                                                    ]
                                                  )
                                                )
                                              )
                                            ]
                                          )
                                        )
                                      )
                                    )
                                  ]
                                )
                              )
                            )
                          )
                        , Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("map")))))
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannPrimitiveType2UnannType(NumericType(Int())))
                    , Id("size")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [Statement2BlockStatement(
                           Return(ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length"))))
                         )]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Private2MethodModifier(Private())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("List")
                            , [TypeArguments(
                                 [ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))]
                               )]
                            )
                          )
                        )
                      )
                    , Id("toList")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              InvokeQExp(
                                ExpressionName2Expression(ExpressionName(Id("Arrays")))
                              , []
                              , Id("asList")
                              , [ExpressionName2Expression(ExpressionName(Id("values")))]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannClassType2UnannReferenceType(
                            ClassType(
                              Id("Map")
                            , [ TypeArguments(
                                  [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                  , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                  ]
                                )
                              ]
                            )
                          )
                        )
                      )
                    , Id("toMap")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Invoke(
                                MethodName(Id("putIn"))
                              , [ UnqualifiedInstance2Expression(
                                    NewInstance(
                                      []
                                    , []
                                    , Id("LinkedHashMap")
                                    , []
                                    , [ TypeArguments2TypeArgumentsOrDiamond(
                                          TypeArguments(
                                            [ ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                            , ReferenceType2TypeArgument(ClassType2ReferenceType(ClassType([], Id("String"), [])))
                                            ]
                                          )
                                        )
                                      ]
                                    , [ExpressionName2Expression(ExpressionName(AmbiguousName(Id("values")), Id("length")))]
                                    )
                                  )
                                ]
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    [Annotation2MethodModifier(MarkerAnno(TypeName(Id("Override")))), Public2MethodModifier(Public())]
                  , MethodHeader(
                      UnannType2Result(UnannReferenceType2UnannType(UnannClassType2UnannReferenceType(ClassType(Id("String"), []))))
                    , Id("toString")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block(
                        [ Statement2BlockStatement(
                            Return(
                              Add(
                                Add(
                                  Add(
                                    Add(
                                      Add(
                                        Add(
                                          Literal2Expression(StringLiteral2Literal(StringLiteral("\"CSVRecord [comment='\"")))
                                        , ExpressionName2Expression(ExpressionName(Id("comment")))
                                        )
                                      , Literal2Expression(StringLiteral2Literal(StringLiteral("\"', recordNumber=\"")))
                                      )
                                    , ExpressionName2Expression(ExpressionName(Id("recordNumber")))
                                    )
                                  , Literal2Expression(StringLiteral2Literal(StringLiteral("\", values=\"")))
                                  )
                                , InvokeQExp(
                                    ExpressionName2Expression(ExpressionName(Id("Arrays")))
                                  , []
                                  , Id("toString")
                                  , [ExpressionName2Expression(ExpressionName(Id("values")))]
                                  )
                                )
                              , Literal2Expression(StringLiteral2Literal(StringLiteral("\"]\"")))
                              )
                            )
                          )
                        ]
                      )
                    )
                  )
                )
              )
            , ClassMemberDeclaration2ClassBodyDeclaration(
                MethodDeclaration2ClassMemberDeclaration(
                  MethodDecl(
                    []
                  , MethodHeader(
                      UnannType2Result(
                        UnannReferenceType2UnannType(
                          UnannArrayType2UnannReferenceType(
                            UnannArrayTypeClassType(ClassType(Id("String"), []), [AnnotateDim([])])
                          )
                        )
                      )
                    , Id("values")
                    , NoParams()
                    , AnnotatedDims2AnnotatedDimsEmpty([])
                    , []
                    )
                  , Block2MethodBody(
                      Block([Statement2BlockStatement(Return(ExpressionName2Expression(ExpressionName(Id("values")))))])
                    )
                  )
                )
              )
            ]
          )
        )
      )
    ]
  )
)]
