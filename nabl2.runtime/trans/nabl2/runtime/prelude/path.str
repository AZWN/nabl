module nabl2/runtime/prelude/path

imports

  signatures/nabl2/shared/common/Resolution-sig
  signatures/nabl2/runtime/common/AST-sig

strategies

  nabl2--editor-resolve-pp-path = fail

  nabl2-pp-path = nabl2--editor-resolve-pp-path <+ 
    map(nabl2-pp-path-elem);separate-by(|" . ");concat-strings

  nabl2-sort-paths = sort-list(SortL(where((Snd, Snd);nabl2-path-gt)))

  nabl2-pp-path-elem: D(_,_) -> "D"
  nabl2-pp-path-elem: E(_,label) -> $[E([text])]
    with <?Label(text) <+ ?text#(_)> label
  nabl2-pp-path-elem: N(_,label,_,_) -> $[N([text])]
    with <?Label(text) <+ ?text#(_)> label

  nabl2-path-gt: (path1, path2) -> <id>
    where <gt> (<length> path1, <length> path2)

  nabl2-path-gt: (path1, path2) -> <debug>
    where <eq> (<length> path1, <length> path2);
          <?[_|_]> path1;
          <zip;rec x([eq|x] <+ [nabl2-path-elem-gt|id])> (path1, path2)

  nabl2-path-elem-gt: (D(_, _), E(_,_)) -> <id>

  nabl2-path-elem-gt: (D(_, _), N(_,_,_,_)) -> <id>

  nabl2-path-elem-gt: (E(_, _), N(_,_,_,_)) -> <id>

  nabl2-path-elem-gt:
    (D(_,Occurrence(_, _, TermIndex(_, index1))),
     D(_,Occurrence(_, _, TermIndex(_, index2)))) -> <id>
    where <gt> (index1, index2)

  nabl2-path-elem-gt: (E(_, Label(label1)), E(_, Label(label2))) -> <id>
    where <string-gt> (label1, label2)

  nabl2-path-elem-gt: (E(_, label1#([])), E(_, label2#([]))) -> <id>
    where <string-gt> (label1, label2)

  nabl2-path-elem-gt: (N(_, Label(label1), _, _), N(_, Label(label2), _, _)) -> <id>
    where <string-gt> (label1, label2)

  nabl2-path-elem-gt: (N(_, label1#([]), _, _), N(_, label2#([]), _, _)) -> <id>
    where <string-gt> (label1, label2)