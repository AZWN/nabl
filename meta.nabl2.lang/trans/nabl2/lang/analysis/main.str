module nabl2/lang/analysis/main

imports

//nabl2/api
  nabl2/shared/-
//nabl2runtime

  signatures/nabl2/lang/modules/-
  nabl2/lang/analysis/-

rules

//editor-analyze = nabl2-analyze(normalize)

//nabl2-custom-analysis-unit-hook:
//    (resource, ast, _) -> [module-name-error*]
//  with module-name-error* := <check-module-name> (ast, resource)
//
//nabl2-custom-analysis-final-hook(|a):
//    (resource, _, module-errors*) -> (error*, [], [], ())
//  with error* := <flatten-list> module-errors*

rules

  editor-analyze:
      (ast, path, project-path) -> (analyzed-ast, error*, warning*, note*)
    with analyzed-ast := <normalize-all;desugar-all> ast;
         error*       := <check-module-name> (analyzed-ast, path);
         warning*     := [];
         note*        := []

  check-module-name:
      (Module(name,_), path) -> error*
    with filename := <remove-extension> path;
         if <string-ends-with(|$[/[name]])> $[/[filename]] then
           error* := []
         else
           error* := [(name,$[module [name] does not agree with filename [filename]])]
         end

  editor-normalize:
    (node, position, Module(name,section*), path, project-path) -> (filename, result)
    with
      ext            := <get-extension> path;
      filename       := <guarantee-extension(|$[normalized.[ext]])> path;
      normalized-ast := <normalize-all> Module($[[name].normalized],section*);
      result         := <resugar-all;pp-NaBL2-string> normalized-ast

  editor-explicate:
    (node, position, Module(name,section*), path, project-path) -> (filename, result)
    with
      ext            := <get-extension> path;
      filename       := <guarantee-extension(|$[explicated.[ext]])> path;
      explicated-ast := <explicate-all> Module($[[name].explicated],section*);
      result         := <resugar-all;pp-NaBL2-string> explicated-ast
