module nabl2/api

imports

  pp/nabl2/API-pp

rules // ###### Analysis execution ######

  /**
   * Provide a general strategy for pretty-printing object language
   * terms in error messages. To make sure constraint variables in terms
   * are printed correctly, inject `nabl2-prettyprint-term` into your own
   * prettyprinting strategies.
   * 
   * Example:
   *   nabl2-prettyprint-hook    = prettyprint-YOURLANG-Type
   *   prettyprint-YOURLANG-Type = nabl2-prettyprint-term
   *
   * @type Term -> Box
   */
  nabl2-prettyprint-hook = fail

  /**
   * Strategy that prettyprints special NaBL2 constructors. Can be used to
   * inject into pretty-printing rules of the object language, to enable
   * pretty-printing of variables, scopes, and occurrences.
   * 
   * @type Term -> Box
   */
  nabl2-prettyprint-term = fail

  /**
   * Main analysis strategy for NaBL2.
   *
   * @param pre : Term -> Term Strategy to preprocess (e.g. desugar) AST
   */
  nabl2-analyze(pre) = fail


rules // ###### Custom analysis hooks ######

  /**
   * @type resource:String -> CustomInitialResult
   */
  nabl2-custom-analysis-init-hook = fail

  /**
   * @type (resource:String, ast:Term, CustomInitialResult) -> CustomUnitResult
   */
  nabl2-custom-analysis-unit-hook = fail

  /**
   * @param a : Analysis
   * @type (resource:String, CustomInitialResult, List(CustomUnitResult))
   *         -> (errors:List(EditorMessage), warnings:List(EditorMessage), notes:List(EditorMessage), CustomFinalResult)
   */
  nabl2-custom-analysis-final-hook(|a) = fail

  /**
   * @type Analysis -> CustomFinalResult
   */
  nabl2-get-custom-analysis = fail

  /**
   * Use for logging a message during custom analysis. The message
   * printing is subject to the NaBL2 debug settings for resolution.
   *
   * @param msg : String
   * @type _ -> _
   */
  nabl2-custom-analysis-info-msg(|msg) = fail

  /**
   * Use for logging a message and a term during custom analysis. The
   * message printing is subject to the NaBL2 debug settings for resolution.
   *
   * @param msg : String
   * @type Term -> _
   */
  nabl2-custom-analysis-info(|msg) = fail

  /**
   * Test if logging for custom analysis is enabled. Can be used to prevent
   * computation of messages that are not going to be displayed.
   */
  nabl2-is-custom-analysis-info-enabled = fail

rules // ###### Analysis results ######

  /**
   * Get analysis for the given AST node
   *
   * @type node:Term -> Analysis
   */
  nabl2-get-ast-analysis = fail

  /**
   * Get analysis for the given resource
   *
   * @type filename:String -> Analysis
   */
  nabl2-get-resource-analysis = fail

  /**
   * Test if analysis has errors
   *
   * Fails if there are no errors, succeeds otherwise.
   *
   * @type Analysis -> _
   */
  nabl2-analysis-has-errors = fail

  /**
   * @param a : Analysis
   * @type node:Term -> Term
   */
  nabl2-get-ast-params(|a) = fail
  nabl2-get-ast-params =
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-params(|a)

  /**
   * @param a : Analysis
   * @type node:Term -> Type
   */
  nabl2-get-ast-type(|a) = fail
  nabl2-get-ast-type =
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-type(|a)

  /**
   * @param a : Analysis
   * @type node:Term -> List(Occurrence)
   */
  nabl2-get-ast-refs(|a) = fail
  nabl2-get-ast-refs = 
    where(a := <nabl2-get-ast-analysis>); nabl2-get-ast-refs(|a)

  /**
   * @param a : Analysis
   * @type decl:Occurrence -> Type
   */
  nabl2-get-type(|a) = fail

  /**
   * @param a : Analysis
   * @param prop : String
   * @type decl:Occurrence -> Term
   */
  nabl2-get-property(|a,prop) = fail

  /**
   * @param a : Analysis
   * @type ref:Occurrence -> (decl:Occurrence, Path)
   */
  nabl2-get-resolved-name(|a) = fail

  /**
   * @param a : Analysis
   * @type ref:Occurrence -> List((decl:Occurrence, Path))
   */
  nabl2-get-resolved-names(|a) = fail


rules // ###### Scope graphs ######

  /**
   * Get all declarations in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Occurrences)
   */
  nabl2-get-all-decls(|a) = fail

  /**
   * Get all references in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Occurrences)
   */
  nabl2-get-all-refs(|a) = fail

  /**
   * Get all scopes in the scope graph
   *
   * @param a : Analysis
   * @type _ -> List(Scope)
   */
  nabl2-get-all-scopes(|a) = fail

  /**
   * Get the scope of a reference
   *
   * @param a : Analysis
   * @type ref:Occurrence -> Scope
   */
  nabl2-get-ref-scope(|a) = fail

  /**
   * Get the scope of a declaration
   *
   * @param a : Analysis
   * @type decl:Occurrence -> Scope
   */
  nabl2-get-decl-scope(|a) = fail

  /**
   * Get declarations in a scope
   *
   * @param a : Analysis
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-scope-decls(|a) = fail

  /**
   * Get references in a scope
   *
   * @param a : Analysis
   * @type Scope -> List(ref:Occurrence)
   */
  nabl2-get-scope-refs(|a) = fail

  /**
   * Get direct edges from a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,Scope))
   * @type (Scope,Label) -> List(Scope)
   */
  nabl2-get-direct-edges(|a) = fail

  /**
   * Get inverse direct edges from a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,Scope))
   * @type (Scope,Label) -> List(Scope)
   */
  nabl2-get-direct-edges-inv(|a) = fail

  /**
   * Get import edges from a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,ref:Occurrence))
   * @type (Scope,Label) -> List(ref:Occurrence)
   */
  nabl2-get-import-edges(|a) = fail

  /**
   * Get inverse import edges from a reference
   *
   * @param a : Analysis
   * @type ref:Occurrence -> List((Label,Scope))
   * @type (ref:Occurrence,Label) -> List(Scope)
   */
  nabl2-get-import-edges-inv(|a) = fail

  /**
   * Get associated scopes of a declaration
   *
   * @param a : Analysis
   * @type decl:Occurrence -> List((Label,Scope))
   * @type (decl:Occurrence,Label) -> List(Scope)
   */
  nabl2-get-assoc-edges(|a) = fail
 
  /**
   * Get associated declarations of a scope
   *
   * @param a : Analysis
   * @type Scope -> List((Label,decl:Occurrence))
   * @type (Scope,Label) -> List(decl:Occurrence)
   */
  nabl2-get-assoc-edges-inv(|a) = fail

  /**
   * Get visible declarations in scope
   *
   * @param a : Analysis
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-visible-decls(|a) = fail

  /**
   * Get reachable declarations in scope
   *
   * @param a : Analysis
   * @type Scope -> List(Occurrence)
   */
  nabl2-get-reachable-decls(|a) = fail

  /**
   * Make an occurrence in the default namespace
   *
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence = fail

  /**
   * Make an occurrence in the specified namespace
   *
   * @param ns : String
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence(|ns) = fail

  /**
   * Make an occurrence in the specified namespace, using an origin term
   *
   * @param ns : String
   * @param t : Term
   * @type node:Term -> Occurrence
   */
  nabl2-mk-occurrence(|ns,t) = fail

  /**
   * Get namespace of an occurrence
   *
   * @type Occurrence -> Namespace
   */
  nabl2-get-occurrence-ns = fail

  /**
   * Get name of an occurrence
   *
   * @type Occurrence -> Term
   */
  nabl2-get-occurrence-name = fail


rules // ###### Symbolic Constraints ######
  
  /**
   * Get symbolic facts
   *
   * @param a : Analysis
   * @type _ -> List(Term)
   */
  nabl2-get-symbolic-facts(|a) = fail

  /**
   * Get symbolic goals
   *
   * @param a : Analysis
   * @type _ -> List(Term)
   */
  nabl2-get-symbolic-goals(|a) = fail



rules // ###### AST Indices ######

  /**
   * Get AST index. Fails if term has no index.
   *
   * @type Term -> TermIndex
   */
  nabl2-get-ast-index = fail

  /**
   * Set AST index on a term. Throws an exception of the index argument
   * is not a valid index.
   *
   * @param index : Termindex
   * @type Term -> Term
   */
  nabl2-set-ast-index(|index) = fail

  /**
   * Copy AST index from one term to another. Fails if the source has no
   * index.
   *
   * @param from : Termindex
   * @type Term -> Term
   */
  nabl2-copy-ast-index(|from) = fail

  /**
   * Execute a strategy and copy the index of the input term to the output
   * term. If the original term has no index, the result of applying s is
   * returned unchanged. Thus, failure behaviour of s is preserved.
   *
   * @type Term -> Term
   */
  nabl2-preserve-ast-index(s) = fail

  /**
   * Erase AST indices from a term, preserving other annotations and
   * attachments.
   *
   * @type Term -> Term
   */
  nabl2-erase-ast-indices = fail

rules // ###### Editor Integration ######

  /**
   * Editor resolve references integration
   *
   * @type (node, position, ast, path, project-path) -> decl
   */
  nabl2-editor-resolve = fail

  /**
   * Editor hover integration
   *
   * @type (node, position, ast, path, project-path) -> label
   */
  nabl2-editor-hover = fail
  
