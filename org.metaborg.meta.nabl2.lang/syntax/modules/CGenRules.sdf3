module modules/CGenRules

imports
 
  nabl2/shared/common/Identifiers
  nabl2/shared/common/Names
  nabl2/shared/common/Terms
  nabl2/shared/common/Types
  nabl2/shared/common/Vars

  common/Identifiers
  common/Types

template options

  keyword -/- [a-zA-Z0-9\']

context-free syntax

  ModuleSection.CGenRules = <
    constraint-generation rules
 
      <{CGenRule "\n"}*>
  > {longest-match}

  CGenRule.CGenInitRule = <
    init <CGenParamsTerm> <CGenTypeTerm> :=
        <Constraint>.
  >

  CGenRule.CGenMatchRule = <
    <CGenName> [[ <Pattern> <CGenParamsPattern> <CGenTypePattern> ]] :=
        <Constraint>.
  >

  CGenName.NoName      =
  CGenName.Name        = RuleId

context-free syntax

  CGenParamsTerm.List    = <^ (<{TypeTerm ","}*>)>

  CGenParamsPattern.List = <^ (<{VarOrWld ","}*>)>

  CGenTypeTerm.NoType    =
  CGenTypeTerm.Type      = <: <TypeTerm>>

  CGenTypePattern.NoType =
  CGenTypePattern.Type   = <: <TypePattern>>

context-free syntax

  Constraint.CGenRecurse = <<CGenName> [[ <Var> <CGenParamsTerm> <CGenTypeTerm> ]]>

  Constraint.New         = <new <{Var " "}+>>

lexical syntax

  SectionKeyword = "constraint" | "generation" | "rules"
  Keyword        = "new"

 