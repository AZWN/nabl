module analysis/normalize

imports

  nabl2shared

  signatures/common/-
  signatures/modules/-

  generation/-
  util/-

rules

  normalize =
    try(sometd(normalize-term-match));
    try(sometd(normalize-type-match));
    try(sometd(normalize-term-type));
    try(sometd(normalize-message));
    try(sometd(normalize-index <+ normalize-default-index));
    try(sometd(normalize-rule-names))

rules

  // capture the matched term, or (FIXME) the first term in the list in term__ 
  normalize-term-match:
    CGenMatchRule(name,pattern,params,type,C)
      -> CGenMatchRule(name,As(<term-var>, pattern),params,type,C)

rules

  // replace type terms with a variable and an equality constraint
  normalize-type-match:
    CGenMatchRule(name,pattern,param,Type(type),C)
      -> CGenMatchRule(name,pattern,param,Type(<type-var>),
             CConj(CEqual(<type-var>,type,DefaultMessage()),C))
    where <not(is-var)> type

rules

  // assign type to term, if it is not a list
  normalize-term-type:
    CGenMatchRule(name,pattern,param,Type(type),C)
      -> CGenMatchRule(name,pattern,param,Type(type),
             CConj(CTypeOf(DefaultIndex(),type,DefaultMessage()),C))
    where <not(outermost-list-pattern)> pattern

rules

  // create default error message
  normalize-message:
    DefaultMessage() ->
      Message(Error(),Default(),DefaultIndex())

rules

  // get index from occurrence, if name is from AST
  normalize-index:
    Occurrence(ns,name,DefaultIndex()) ->
      Occurrence(ns,name,ASTIndexFromTerm(name))
    where <is-var> name

  // get index from matched term
  normalize-default-index:
    DefaultIndex() -> ASTIndexFromTerm(<term-var>)

  // set default name for anonymous rules
  normalize-rule-names:
    NoName() -> Name(<default-rule-name>)
