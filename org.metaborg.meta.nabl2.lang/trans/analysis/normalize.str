module analysis/normalize

imports

  signatures/nabl2/shared/common/-
  signatures/nabl2/shared/constraints/-

  signatures/common/-
  signatures/modules/-
  signatures/rules/-
  signatures/signatures/-

  generation/-
  util/-

rules

  normalize =
    normalize-axioms;
    normalize-types;
    normalize-term-matches;
    normalize-type-matches;
    normalize-list-matches;
    normalize-rule-vars;
    normalize-constraints;
    normalize-messages;
    normalize-indices;
    normalize-rule-names

rules

  normalize-axioms = try(sometd(normalize-axiom))

  // capture the matched term
  normalize-axiom:
    CGenInitRuleNoConstraint(params,type)
      -> CGenInitRule(params,type, [])

  normalize-axiom:
    CGenMatchRuleNoConstraint(name,pattern,params,type)
      -> CGenMatchRule(name,pattern,params,type, [])

rules

  normalize-types = try(sometd(normalize-types-signature))

  normalize-types-signature: Signature(sig*) -> Signature(sig'*)
    with sig'* := <map(normalize-types-section <+ MkSingleton);concat> sig*

  normalize-types-section:
    Types(typesig*) -> [ctors,rels]
    with opdecl* := <map(normalize-type-sig)> typesig*;
         ctors := Constructors(opdecl*);
         vardecl* := <filter(where(?TypeSig(_,<not(all(?(Invar(),_)))>)))> typesig*;
         relop* := <map(normalize-rel-type)> vardecl*;
         relopt* := [Reflexive(), AntiSymmetric(), Transitive()];
         listrelop := ListVariant(Covar(DefaultRelation()));
         rels := Relations([RelationDef(relopt*,DefaultRelation(),TypeSort(),[listrelop|relop*])])

  normalize-type-sig:
    TypeSig(op,a*) -> OpDecl(op, <map(Snd)> a*, <type-sort>)

  normalize-rel-type:
    TypeSig(op,a*) -> OpVariant(op, <map(Fst;normalize-type-variance)> a*)

  normalize-type-variance: Invar() -> Invar()
  normalize-type-variance: Covar() -> Covar(DefaultRelation())
  normalize-type-variance: Contravar() -> Contravar(DefaultRelation())

rules

  normalize-term-matches = try(sometd(normalize-term-match))

  // capture the matched term
  normalize-term-match:
    CGenMatchRule(name,pattern,params,type,clause*)
      -> CGenMatchRule(name,As(<term-var>, pattern),params,type,clause*)

rules

  normalize-type-matches = try(sometd(normalize-type-match))

  // replace type terms with a variable and an equality constraint
  normalize-type-match:
    CGenMatchRule(name,pattern,param,Type(type),clause*)
      -> CGenMatchRule(name,pattern,param,Type(<type-var>),
             [CEqual(<type-var>,type,DefaultMessage()),clause*])
    where <not(is-var)> type

rules

  normalize-list-matches =
    bottomup(try(normalize-list-match));
    try(sometd(normalize-sublist-index))

  normalize-list-match:
    ListTail(xs*,ListTail(ys*,tl)) -> ListTail([xs*,ys*],tl)
 
  normalize-list-match:
    ListTail(xs*,List(ys*)) -> List([xs*,ys*])

  normalize-sublist-index:
    CGenMatchRule(name,pattern,params,type,clause*)
      -> CGenMatchRule(name,pattern',params,type,[clause'*,clause*])
    with pattern' := <bottomup(try({\
                        ListTail(xs,tail) -> As(listvar,ListTail(xs,tail'))
                        with listvar := Var(<newname> "nabl2__list");
                             if As(_,_) := tail then
                               tail' := tail
                             else
                               tail' := As(Var(<newname> "nabl2__sublist"),tail)
                             end
                      \}))> pattern;
         clause'* := <collect-all(\
                        As(listvar,ListTail(_,As(sublistvar,_))) -> IndexSublist(listvar,sublistvar)
                      \)> pattern'
 
rules

  normalize-rule-vars = 
    try(sometd(normalize-free-vars))

  normalize-free-vars:
    CGenInitRule(params,type,clause*)
      -> CGenInitRule(params,type,[NewVars(free-var*),clause*])
    with new-var* := <clauses-new-vars> clause*;
         used-var* := <all-vars> (params,type,clause*);
         free-var* := <diff> (used-var*, [<term-var>,new-var*])

  normalize-free-vars:
    CGenMatchRule(name,pattern,params,type,clause*)
      -> CGenMatchRule(name,pattern,params,type,[NewVars(free-var*),clause*])
    with new-var* := <clauses-new-vars> clause*;
         bound-var* := <all-vars> (pattern,params,type,new-var*);
         used-var* := <all-vars> clause*;
         free-var* := <diff> (used-var*, bound-var*)

  clauses-new-vars =
    filter(clause-new-vars); concat

  clause-new-vars: NewScopes(v*) -> v*

rules

  normalize-constraints =
    topdown(try(normalize-constraint));
    topdown(try(CGenInitRule(id,id,flatten-list) + CGenMatchRule(id,id,id,id,flatten-list)))

  normalize-constraint:
    CDeclType(o,ty,prio,msginfo) ->
      CDeclProperty(o,Type(),ty,prio,msginfo)

  normalize-constraint:
    CSetEq(s1,proj,s2,msginfo) ->
      [CSubsetEq(s1,proj,s2,msginfo),CSubsetEq(s2,proj,s1,msginfo)]

rules

  normalize-messages = topdown(try(normalize-message))

  // create default error message
  normalize-message:
    DefaultMessage() ->
      Message(Error(),Default(),DefaultIndex())

rules

  normalize-indices = topdown(try(normalize-occurrence-index <+ normalize-default-index))

  // get index from occurrence, if name is from AST
  normalize-occurrence-index:
    Occurrence(ns,name,DefaultIndex()) ->
      Occurrence(ns,name,IndexFromTerm(name))
    where <is-var> name

  // get index from matched term
  normalize-default-index:
    DefaultIndex() -> IndexFromTerm(<term-var>)

rules

  normalize-rule-names = topdown(try(normalize-rule-name))

  // set default name for anonymous rules
  normalize-rule-name:
    NoName() -> Name(<default-rule-name>)
