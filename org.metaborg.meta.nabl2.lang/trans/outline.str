module trans/outline

imports

  libspoofax/editor/outline
  
  analysis/-
  signatures/signatures/-
  signatures/rules/-
  pp/rules/-
  pp

rules

  editor-outline:
    (_, _, ast, path, project-path) -> outline
    with outline := <outline> ast
 
  outline = custom-label-outline(to-outline-label, to-outline-node)

  to-outline-label = pp-rule-label

  to-outline-node:
    Signature(_) -> Node("signature",[])

  to-outline-node:
    Rules(rule*) -> Node("rules", children)
    with children := <collect-om(outline);concat> rule*

rules

  pp-rule-label = pp-NaBL2(prettyprint-rule-label)

  prettyprint-rule-label:
     _ -> [ H([SOpt(HS(), "0")], [name', S(" [[ "), pattern', S(" "), params', S(" "), type', S(" ]]")]) ]
    where ?CGenMatchRuleNoConstraint(name, pattern, params, type) + ?CGenMatchRule(name, pattern, params, type, _)
    with name' := <pp-one-Z(prettyprint-NaBL2-RuleName) <+ pp-one-Z(prettyprint-completion-aux)> name
    with pattern' := <pp-one-Z(prettyprint-NaBL2-Pattern) <+ pp-one-Z(prettyprint-completion-aux)> pattern
    with params' := <pp-one-Z(prettyprint-NaBL2-CGenParamsPattern) <+ pp-one-Z(prettyprint-completion-aux)> params
    with type' := <pp-one-Z(prettyprint-NaBL2-CGenTypePattern) <+ pp-one-Z(prettyprint-completion-aux)> type

  prettyprint-rule-label:
     _ -> [ H([SOpt(HS(), "0")], [S("init "), params', S(" "), type']) ]
    where ?CGenInitRule(params, type, _) + ?CGenInitRuleNoConstraint(params, type)
    with params' := <pp-one-Z(prettyprint-NaBL2-CGenParamsTerm) <+ pp-one-Z(prettyprint-completion-aux)> params
    with type' := <pp-one-Z(prettyprint-NaBL2-CGenTypeTerm) <+ pp-one-Z(prettyprint-completion-aux)> type
