module nabl2/lang/analysis/signatures

imports

  signatures/nabl2/lang/common/-
  signatures/nabl2/lang/modules/-
  signatures/nabl2/lang/rules/-
  signatures/nabl2/lang/signatures/-

rules

  [[ Signature(signatures) ^ (s) ]] :=
    Map1(Sig)[[ signatures ^ (s) ]].

rules

  Sig[[ CGen(rulesigs) ^ (s) ]] :=
    Map1(Sig)[[ rulesigs ^ (s) ]].

  Sig[[ CGenSig(def, sort, params, type) ^ (s) ]].

rules 

  Sig[[ Constructors(_) ^ (_) ]]. // TODO

rules

  Sig[[ NameResolution(nameresparams) ^ (s) ]] :=
    new s_init, s_init -L-> s, InitMarker{()} -> s_init,
    InitMarker{()} |-> _ | error "name resolution parameters must be specified in module with init rule",
    Map1(Sig)[[ nameresparams ^ (s) ]].

  Sig[[ Labels(labels) ^ (s) ]] :=
    Map1(LabelDef)[[ labels ^ (s) ]].

  Sig[[ Order(orders) ^ (s) ]] :=
    Map1(LabelOrder)[[ orders ^ (s) ]].

  Sig[[ WF(re) ^ (s) ]] :=
    WellFormednessMarker{()} <- s,
    LabelRE[[ re ^ (s) ]].

rules

  Sig[[ Namespaces(namespacedefs) ^ (s) ]] :=
    new s_init, s_init -L-> s, InitMarker{()} -> s_init,
    InitMarker{()} |-> _ | error "namespaces must be specified in module with init rule",
    Map1(Sig)[[ namespacedefs ^ (s) ]].

  Sig[[ NamespaceDef(ns,type,properties) ^ (s) ]] :=
    NamespaceDef[[ ns ^ (s) ]]
    // TODO: type
    // TODO: properties
    .

rules 

  Sig[[ Relations(relsigs) ^ (s) ]] :=
    new s_init, s_init -L-> s, InitMarker{()} -> s_init,
    InitMarker{()} |-> _ | error "relations must be specified in module with init rule",
    Map1(Sig)[[ relsigs ^ (s) ]].

  Sig[[ RelationDef(opts,rel,type,variances) ^ (s) ]] :=
    RelationDef[[ rel ^ (s) ]]
    // TODO: type
    // TODO: variances
    .

rules

  Sig[[ Functions(funsigs) ^ (s) ]] :=
    new s_init, s_init -L-> s, InitMarker{()} -> s_init,
    InitMarker{()} |-> _ | error "functions must be specified in module with init rule",
    Map1(Sig)[[ funsigs ^ (s) ]].

  Sig[[ FunctionDef(fun,type,cases) ^ (s) ]] :=
    FunctionDef[[ fun ^ (s) ]]
    // TODO: type
    // TODO: cases
    .
