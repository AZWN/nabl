module namingexperiment

imports
  libstratego-lib
  libstratego-aterm
  include/NamingExperiment
  lib/editor-common.generated
  lib/analysis-auto.generated
  lib/index-library
  lib/analysis-library
  lib/compilation-library
  check
  generate
  prettyprint
  refactorings
  analysis-manual
  libstratego-xtc

rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
  
  // Defines the current language.
  language = !"NamingExperiment"
  
  // Analyzes the current program, returning a tuple with the analyzed AST, errors, warnings, notes and
  // files that should be re-analyzed.
  analyze:
    (ast, path, project-path) -> (ast'', errors, warnings, notes, filesToAnalyze')
    with
      ast'                    := <id> ast; // Optional AST desugaring
      (ast'', filesToAnalyze) := <analyze-top(|Editor(), <language>)> (ast', path, project-path);
      errors                  := <collect-all(constraint-error, conc)> ast'';
      warnings                := <collect-all(constraint-warning, conc)> ast'';
      notes                   := <collect-all(constraint-note, conc)> ast'';
      filesToAnalyze'         := <map(index-filepair-to-file)> filesToAnalyze

  // Main entry point for analyzes, called when a single file is opened in the editor.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', errors, warnings, notes, filesToAnalyze) := <analyze>;
      <editor-queue-analysis> filesToAnalyze
      
  // Main entry point for analyzes, called when multiple (changed) files have changed. 
  editor-analyze:
    files -> None()
    where
      not(is-tuple)
    with
      index-setup(|<language>, [<project-path>], ".");
      disable-commit-and-compile
    with
      editor-queue-analysis
    with
      <enable-commit-and-compile> <language>;
      <trigger-commit-and-compile> <language>
      
  // Called when current file is saved.
  editor-save:
    (ast, _, _, _, _) -> None()
    with
      language  := <index-origin-language> ast;
      index-setup(|language, [<project-path>], ".");
      <trigger-commit-and-compile> language
      
  // Queue parallel analysis for given list of files.
  editor-queue-analysis = queue-strategy(|"editor-parallel-analyze", "Analyzing files")
      
  // Executes parallel analysis using the index library.
  editor-parallel-analyze:
    files -> None()
    with
      index-parallel-analyze-files(analyze)
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
  
  // Prints the analyzed abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze-top> (selected, path, project-path)   
  
  generate-defs:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      Results(_, result, _, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
  
  generate-uses:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      Results(_, _, result, _, _, _, _) := <analyze-top-internal> (selected, path, project-path)
  
  /*
  generate-reads:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      (_, _, _, _, _, _, result) := <analyze-top> (selected, path, project-path)
  */
      
  // Prints the entries in the index of the current file.
  index-currentfile:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  index-allfiles:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      language  := <index-origin-language> ast;
      index-setup(|language, [project-path], $[[project-path]/[path]]);
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <map(\filename -> FileEntries(filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      language  := <index-origin-language> ast;
      index-setup(|language, [project-path], $[[project-path]/[path]]);
      def     := <index-lookup> node;
      target  := def

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[[def-path'']]
    where
      // FIXME: this only works for definition paths
      language  := <index-origin-language> ast;
      index-setup(|language, [project-path], $[[project-path]/[path]]);
      def-term           := <nam-get-definition-key> target;
      _{[ns | def-path]} := def-term;
      def-path'  := <take-until(?Anon(_))> def-path;
      def-path'' := <reverse; separate-by(|".")> def-path'

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      ast'              := <analyze-top> (ast, path, project-path);
      x                 := <collect-one(?COMPLETION(_))> ast';
      COMPLETION(name)	:= x;
      (
        proposals       := <index-lookup-all-levels(|name)> x
      <+ 
        proposals 			:= []
      );
      proposals'        := <map(def-to-name)> proposals

  def-to-name:
    Def([namespace, name | _]) -> name

  create-quoted-libraries:
    (_, _, _, path, project-path) -> None()
    with
      files := [$[[project-path]/lib/index-library], $[[project-path]/lib/analysis-library], $[[project-path]/lib/compilation-library]];
      strings := <map(\file -> (file, <read-text-file> $[[file].str])\)> files;
      <map(\(file, string) -> <write-lib> ($[[file].generated.str], string)\)> strings
      
  write-lib:
  	(file, string) -> None()
  	with
      replaces := [
        ("\\",                       "\\\\"                              ),
        ("\"",                       "\\\""                              ),
        ("lib/index-library",        "lib/index-library.generated"       ),
        ("lib/analysis-library",     "lib/analysis-library.generated"    ),
        ("lib/compilation-library",  "lib/compilation-library.generated" )
      ];
      string' := <list-string-replace> (string, replaces);
      <fclose> <fputs> (string', <fopen> (file, "w"))
  		
  list-string-replace:
    (string, replaces) -> string'
    with
  		string' := <foldl(\((r, w), str) -> <string-replace(|r, w)> str\)> (replaces, string)
