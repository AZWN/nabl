module namingexperiment

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/NamingExperiment
  lib/editor-common.generated
  lib/analysis-library
  check
  generate
  prettyprint
  refactorings
  analysis-manual
  analysis-generated

rules // Main editor interface (defined by editor/NamingExperiment-Builders and -References.esv)
  
  // Analyzes the current program, returning a tuple with errors, warnings, and notes;
  // each a list of (term, message) tuples or simply (message) terms.
  editor-analyze:
    (ast, path, project-path) -> (ast', errors, warnings, notes)
    with
      editor-init;
      (ast', _, _, _, _, _) := <analyze-top>;
      errors   := <collect-all(constraint-error, conc)> ast';
      warnings := <collect-all(constraint-warning, conc)> ast';
      notes    := <collect-all(constraint-note, conc)> ast'
  
  // Prints the abstract syntax ATerm of a selection.
  generate-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected
  
  // Prints the analyzed abstract syntax ATerm of a selection.
  generate-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := <analyze-top> (selected, path, project-path)   
  
  generate-defs:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      (_, result, _, _, _, _) := <analyze-top> (selected, path, project-path)
  
  generate-uses:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      (_, _, result, _, _, _) := <analyze-top> (selected, path, project-path)
  
  /*
  generate-reads:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      editor-init;
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      (_, _, _, _, _, _, result) := <analyze-top> (selected, path, project-path)
  */
      
  // Prints the entries in the index of the current file.
  index-currentfile:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <index-get-all-in-file> path
      
  // Prints the entries in the index of all files.
  index-allfiles:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"index.currentfile.aterm")> path;
      result   := <map(\filename -> (filename, <index-get-all-in-file> filename)\)> <index-get-all-files>
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> target
    where
      if <is-test-file> path then
        // HACK: Workaround for testing language selecting wrong node to resolve
        !node => <collect-one(?subnode{[_|_]})>
      else
        !node => subnode
      end;
      def     := <index-lookup> subnode;
      target  := def

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> $[[def-path'']]
    where
      // FIXME: this only works for definition paths
      def-term           := <nam-get-definition-key> target;
      _{[ns | def-path]} := def-term;
      def-path'  := <take-until(?Anon(_))> def-path;
      def-path'' := <reverse; separate-by(|".")> def-path'

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals'
    where
      editor-init;
      (ast', _, _, _, _, _) := <analyze-top> (ast, path, project-path);
      x                     := <collect-one(?COMPLETION(_))> ast';
      COMPLETION(name)		:= x;
      (
        proposals           := <index-lookup-all-levels(|name)> x 
      <+ 
        proposals 			:= []
      );
      proposals'            := <map(def-to-name)> proposals

  def-to-name:
    Def([namespace, name | _]) -> name