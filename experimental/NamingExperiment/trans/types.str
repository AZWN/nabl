module types

imports
  include/NamingExperiment
  lib/index-library
  lib/analysis-library

signature constructors

  ENTITY     : STRING -> Type
  Type       : DefDataKind
  ParamTypes : DefDataKind

rules // type projections

  type-of:
    Property(_, x) -> ENTITY(x)
  
  type-of:
    Entity(x, _) -> ENTITY(x)
  
  type-of:
    VarDecl(_, x) -> ENTITY(x)
  
  type-of:
    VarDeclInit(_, x, _) -> ENTITY(x)
  
  type-of:
    Param(_, x) -> ENTITY(x)
  
  type-of:
    Var(v) -> <type-of> <index-lookup> v
  
  type-of:
    PropAccess(e, p) -> <type-of> <index-lookup> p

  type-of:
    Def(uri) -> <index-get-data(|Type())> Def(uri)

rules // utility

  is-params-compatible(|arg-types):
    Def(uri) -> <id>
    with
      param-types := <index-get-data(|ParamTypes())>
    where
      <eq> (<length> arg-types, <length> param-types);
      <zip(is-assignable-to)> (arg-types, param-types)

  is-assignable-to:
    (to-type, from-type) -> to-type
    where
      <eq> (from-type, to-type)


rules // store definition and parameter types
    
  adjust-index-def-data(store-results |namespace, path):
    def -> <store-results> DefData([namespace | path], Type(), type)
    where
      type := <type-of> def
  
  adjust-index-def-data(store-results |namespace, path):
    Function(_, params, _) -> <store-results> DefData([namespace | path], ParamTypes(), types)
    with
      types := <map(type-of)> params
