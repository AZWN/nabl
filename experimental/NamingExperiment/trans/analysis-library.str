module analysis-library

imports
  include/NamingExperiment
  libstratego-lib
  types
  lib/editor-common.generated
  analysis-generated

signature constructors

  // Index elements:
  Def     : List(UriPart) -> Summary
  Use     : List(UriPart) * List(UriPart) -> Summary
  BadUse  : List(UriPart) -> Summary
  DefData : List(UriPart) * DefDataType * Term -> Summary

  // TODO: add a new constructor for URI header/path separation?
  
  // URI header:
  Namespace      : UriPart
  Unresolved     : Namespace -> UriPart
  INTERNAL_ERROR : UriPart
  
  // Remainder of URI:
  String : UriPart
  Anon   : Int -> UriPart
  Anon   : UriPart

rules // extension points
  
  // Should return list of Def(_) and/or [namespace | path]
  adjust-index-lookup(is-use |namespace, path) = fail
  
  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
  
  // Should call <store-results> on a (list of) DefData 
  adjust-index-def-data(store-results |namespace, path) = fail
  
  // Should return a path
  adjust-index-path(is-def |namespace, path) = fail
  
  // adjust-index-path-from-filesystem(|project-path, path)

rules // analysis traversals
   
  analyze-top:
    (ast, path, project-path) -> (ast5, defs, uses, data)
    with
      {| CurrentAnalysisAst:
        rules(
          CurrentAnalysisAst := ast
        );
        // HACK: use Some() constructor to force origin tracking...
        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast);
        full-path    := $[[project-path]/[path]];
        prim("LANG_index_setup", $[[full-path]/.cache/index], $[project-path], [], []);
        prim("LANG_index_clear_file", full-path);
        <index-summary-parts(|full-path)> defs;
        ast3         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
        <index-tree-terms> ast3;
        data         := <origin-track-forced(analyze-tree-data)> ast3;
        <index-summary-parts(|full-path)> data;
        // TODO: resolve any URIs in index data at this point? or re-index data after uses analysis?
        (ast4, uses) := <analyze-uses> ast3;
        ast5         := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4
      |}
  
  /**
   * Identifies all definitions in the tree
   * and annotates them with their URI.
   * Also annotates uses with a preliminary "Unresolved(_)" URI.
   */
  analyze-defs(|head-scope, head-scope-ns):
    ast -> (ast', defs')
    with
      if def := <nam-get-definition> ast then
        Def(def-path)                     := def;
        [head-scope-ns', head-scope' | _] := def-path
      else
        def-path       := INTERNAL_ERROR();
        head-scope-ns' := head-scope-ns;
        head-scope'    := head-scope
      end;
      if scope-types := <nam-get-scope-types> ast then
        {| IndexPath:
          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
          // <balanced-update-path> head-scope';
          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
        |}
      else
        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
      end;
      defs' := <![def | defs] <+ !defs>
  
  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
    ast -> (ast'', defs)
    where
      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
      (ast', defs)  := <unzip-analyzed> analyzed;
      ast''         := <try(nam-annotate-names(|def-path))> ast'
  
  update-index-path(|head-scope, head-scope-ns, ast):
    scope-type -> scope-type
    where
      if !head-scope-ns => Anon() then
        path  := <IndexPath <+ ![]> scope-type;
        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
      else
        path  := <IndexPath <+ ![]> head-scope-ns;
        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
      end;
      rules(IndexPath: scope-type -> path')
  
  /* TODO: consider using simple-update-def-path
   *       which uses "balanced" path scopes
   *       e.g. when Entity doesn't scope Function
   *       then it's hard to access properties from a function
  balanced-update-index-path:
    head-scope -> head-scope
    where
      if !head-scope => Anon() then
        head-scope' := Anon(<new>)
      else
        head-scope' := head-scope
      end;
      (something with do-adjust-path)
      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
  */
  
  /**
   * Analyze all uses, changing their preliminary
   * "Unresolve(_)" URI to a definite URI of their definition. 
   */
  analyze-uses:
    ast -> (ast'', uses')
    with
      analyzed     := <all(analyze-uses)> ast;
      (ast', uses) := <unzip-analyzed> analyzed;
      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
        if Def(path') := <index-lookup(id |namespace, path)> ast' then
          ast'' := ast{path'};
          uses' := [Use([namespace | path], path') | uses]
        else
          ast'' := ast';
          uses' := [BadUse(unresolved) | uses]
        end
      else
        ast'' := ast';
        uses' := uses
      end
  
  /**
   * Collects all index data (e.g., types of definitions).
   */
  analyze-tree-data:
    tree -> data
    where
      set := <new-iset>;
      <topdown(analyze-tree-data-part(|set))> tree;
      data := <iset-elements> set
  
  analyze-tree-data-part(|set):
    tree -> tree
    where
      if def-term := <nam-get-definition-key> then
        _{[namespace | path]} := def-term;
        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
        end
      end
  
  store-index-data-results(|set):
    t -> <fail>
    where
      if is-list then
        <iset-addlist(|t)> set
      else
        <iset-add(|t)> set
      end
  
  /**
   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
   * to a tuple (C(a1, a2), [b1, b2, b3]).
   */
  unzip-analyzed:
    appl -> (appl', unzipped-parts)
    with
      appl'          := <all(\(a, _) -> a\)> appl;
      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl

rules // index construction
  
  // TODO: optimize: use hashtables instead of dynamic rules
    
  index-summary-parts(|file) =
    list-loop(with(prim("LANG_index_add", <id>, file)))

  index-tree-terms:
    tree -> tree
    where
      if def-term{uri} := <nam-get-definition-key> then
        def := Def(uri);
        rules(
          IndexedTerm: uri -> tree
        )
      end;
      <all(index-tree-terms)> tree

rules // index API

  /** @deprecated */
  index-get-term:
    <with(?Def(uri) | "Def expected")> -> <IndexedTerm> uri
  
  index-get-data(|kind):
    <with(?Def(uri) | "Def expected")> -> data
    where
      prim("LANG_index_get", DefData(uri, kind, [])) => [DefData(_, _, data) | _]
  
  index-get-data-all(|kind):
    <with(?Def(uri) | "Def expected")> -> datas'
    where
      datas  := <prim("LANG_index_get", DefData(uri, kind, []))>;
      datas' := <map(\DefData(_, _, d) -> d\)> datas

  index-namespace:
    x{[namespace | path]} -> <index-namespace-unwrap> namespace

  index-path:
    x{[namespace | path]} -> path'
    where
      if !namespace => Unresolved(namespace) then
        Def(path') := <index-lookup> 
      else
        path' := path
      end

  index-lookup:
    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path)>

  index-lookup(is-adjust-lookup-enabled |namespace, path):
    x -> def
    where
      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
      def        := <index-select(|namespace, path, x)>
    <+
      // TODO: optimize: try not to call do-adjust-index-lookup from here
      [_ | path'] := path;
      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path')> x

  index-lookup-outermost:
    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path)>

  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path):
    x -> def
    where
      // TODO: optimize: just like index-lookup
      [_ | path'] := path;
      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path')> x
    <+
      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path)>;
      def        := <index-select(|namespace, path, x)>

  index-lookup-one-level:
    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
  
  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path):
    x -> defs
    with
      is-adjusted-lookup-enabled;
      do-adjusted-index-lookup(|namespace, path, x);
      mapconcat(\Def(p) -> [Def(p)]\
          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path')> x\
          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
      ?defs
    <+
      defs := <prim("LANG_index_get_children", Def([namespace | path]))>

  index-lookup-all-levels:
    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
  
  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path):
    x -> all-defs
    with
      is-adjust-lookup-enabled;
      do-adjusted-index-lookup(|namespace, path, x);
      mapconcat(\Def(p) -> [Def(p)]\
          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path')> x\
          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
      ?all-defs
    <+
      one-level := <prim("LANG_index_get", Def([namespace | path]))>;
      if [_ | path'] := path then
        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path')> x]
      else
        all-defs := one-level
      end

  index-lookup-contained(|namespace):
    x{[ns | path]} -> defs
    with
      if !ns => Unresolved(_) then
        Def([_ | def-path]) := <index-lookup>;
        defs := <index-lookup-one-level(id|namespace, def-path)> x 
      else
        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path)>
      end

  index-lookup-contained-all-levels(|namespace):
    x{[ns | path]} -> defs
    with
      if !ns => Unresolved(_) then
        Def([_ | def-path]) := <index-lookup>;
        defs := <index-lookup-all-levels(id|namespace, def-path)> x
      else
        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path)>
      end
  
  index-lookup-container(|namespace):
    x{[ns | path]} -> def
    with
      def := ();
      fatal-err(|"Not implemented") // TODO: index-lookup-container

  index-namespace-unwrap =
    \Unresolved(n) -> n\ <+ id
  
  do-adjusted-index-lookup(|namespace, path, use) =
    // UNDONE: try(origin-term);
    repeat-until(
      prim("SSL_EXT_get_parent", <id>)
    , adjust-index-lookup(origin-equal(|use) |namespace, path)
    )

  index-select(|namespace, path, use) =
    getfirst(
      where(
        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
      )
    )
  
  do-adjusted-index-path(|namespace, path, def) =
    adjust-index-path(origin-equal(|def) |namespace, path)
  <+
    ![def | path]
  
  index-eq(|namespace, expected) =
    where(
      ?Def([_, name | _]);
      <SRTS-EXT-eq-ignore-annos(|expected)> name
    )
  
  external SRTS-EXT-eq-ignore-annos(|t)

rules // interface for generated code
  
  nam-get-def(|namespace):
    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
    
  nam-annotate-use(|namespace):
    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
    
  nam-get-scope-types = fail
  nam-get-definition = fail
  nam-get-definition-key = fail
  nam-annotate-names(|def-path) = fail
