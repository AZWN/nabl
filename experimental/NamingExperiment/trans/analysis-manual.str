module analysis-manual

imports
  include/NamingExperiment
  lib/analysis-library
  analysis-generated
  types

rules
  
  // Adjust the URI of the Module element
  //adjust-index-path(is-def |namespace, path):
  //  Module(<is-def>, _) -> ["ROOT"]
  
  // Adjust the lookup behavior for properties,
  // overriding the lookup with a list of property Defs
  adjust-index-lookup(is-use |namespace, path, prefix, files):
    PropAccess(e, <is-use>) -> p*
    with
      if ENTITY(e-type) := <type-of> e then
        p* := (<index-lookup-children(|Property(), prefix, files)> e-type)
      else
        p* := []
      end

  // Adjust the lookup behavior for variables,
  // overriding the lookup with a list of URIs
  adjust-index-lookup(is-use |namespace, path, name, files):
    Var(<is-use>) -> [[Var() | path], [Property() | path]]
    
  // Why is this needed? shouldn't the Var() adjust handle this?
  // Adjust the lookup behavior for assignments,
  // overriding the lookup with a list of URIs
  adjust-index-lookup(is-use |namespace, path, name, files):
    Assign(<is-use>, _) -> [[Var() | path], [Property() | path]]

  // Adjust the lookup behavior for function calls,
  // selecting a function with matching parameter types
  // (if this fails, the normal lookup behavior is used!)
  adjust-index-lookup(is-use |namespace, path, prefix, files):
    Call(<is-use>, args) -> def
    where
      arg-types := <map(type-of)> args;
      all-defs  := <index-lookup-all-levels(fail |namespace, path, prefix, files)>;
      def       := <getfirst(is-params-compatible(|arg-types))>
