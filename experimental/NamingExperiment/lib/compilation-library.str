module lib/compilation-library

imports
  libstratego-lib
  lib/editor-common.generated
  lib/index-library
  lib/analysis-library
  
rules // Extension points
    
  // Should compile given analysed ast.
  index-compile-ast(|file, subfile, project-path) = fail
  
rules // Compilation
  
  index-schedule-compilation:
    _ -> None()
    with
      queue-strategy(|"index-compilation", "Compiling files")
  
  index-compilation:
    language -> None()
    with
      // Init
      project-path := <project-path>;
      index-setup(|language, [project-path], ".")
    with
      // Determine the files to compile by looking at changed files
      diffs         := <analyze-get-compilediffs>;
      files         := <map(index-compilation-restore-read-file)> diffs;
      filteredFiles := <make-set> <remove-all(index-compilation-filter-file)> files;
      
      // Clean compile time reads
      <filter(index-compilation-clean-reads)> filteredFiles;
      
      // Set total work units to number of files to compile for visual indication
      <set-total-work-units> <length> filteredFiles;
      
      // Compile the files
      <filter(index-compilation-file(|language, project-path); complete-work-unit)> filteredFiles

  index-compilation-file(|language, project-path):
    (file, subfile) -> None()
    with
      // Parse and analyze ast.
      ast                             := <parse-file> file;
      Results(ast', _, _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
    with
      {| Index-ReadSet:
        readSet := <new-iset>;
        rules(Index-ReadSet: _ -> readSet);
        
        // Compile file
        <index-compile-ast(|file, subfile, project-path)> ast';
        
        // Store compile-time reads.
        reads := <iset-elements> readSet;
        <index-add-all(|<index-compilation-file-tuple> (file, subfile))> reads
      |}

  index-compilation-filter-file = 
    ?(<id>, _); (is-test-file <+ index-is-fake-file <+ not(file-exists))

rules // Compile time reads

  index-compilation-restore-read-file:
    (file, subfile) -> (file', subfile)
    with
      file' := <string-replace(|<index-compilation-read-path>, "")> file
      
  index-compilation-clean-reads = 
    ?(file, subfile); index-compilation-file-tuple; index-clear-file
      
  index-compilation-file-tuple:
    (file, subfile) -> ($[[<index-compilation-read-path>]/[file]], subfile)
    
  index-compilation-read-path =
    !"/.internal/reads/compile"
    
rules // On save handling
  
  commit-and-compile:
    language -> None()
    with
      index-commit
    with
      index-schedule-compilation

  trigger-commit-and-compile:
    language -> <id>
    with
      if not(index-is-global-enabled(|"delay-compile")) then
        commit-and-compile
      else
        index-enable-global(|"trigger-compile")
      end
  
  enable-commit-and-compile:
    language -> <id>
    with
      if index-is-global-enabled(|"trigger-compile") then
        commit-and-compile
      end;
      index-disable-global(|"delay-compile")
  
  disable-commit-and-compile = index-enable-global(|"delay-compile")
  