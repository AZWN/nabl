module lib/analysis-library
 
imports
  libstratego-lib
  lib/editor-common.generated
  lib/index-library
 
signature constructors
 
  // Analyze constructors
  AnalysedResult : AST * List(Def) * List(Use) * List(DefData) * List(Def) * List(Def) -> AnalysedResult
  Editor      : AnalysisPhase
  Compile     : AnalysisPhase
 
  // Index elements
  Def          : List(UriPart) -> Summary
  Use          : List(UriPart) * List(UriPart) -> Summary
  BadUse       : List(UriPart) -> Summary
  Read         : List(UriPart) -> Summary
  ReadWildcard : List(UriPart) * String -> Summary
 
rules // extension points
 
  // Should return list of Def(_) and/or [namespace | path]
  adjust-index-lookup(is-use |namespace, path, prefix) = fail
 
  // adjust-index-select(|namespace, path, use) = fail // (e.g., for imports)
 
  // Should call <store-results> on a (list of) DefData
  adjust-index-def-data(store-results |namespace, path) = fail
 
  // Should return a path
  adjust-index-path(is-def |namespace, path) = fail
 
  // adjust-index-path-from-filesystem(|project-path, path)
  
  // Should compile given analysed ast.
  index-compile-ast(|file, subfile, project-path) = fail
 
rules // analysis traversals
  
  /**
   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
   * Defaults to Editor() phase and tries to automatically determine language name.
   *
   * @see analyze-top(|phase, language)
   */
  analyze-top = analyze-top(|Editor())
  
  /**
   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
   * Tries to automatically determine language name.
   *
   * @see analyze-top(|phase, language)
   */
  analyze-top(|phase) = ?(ast, _, _); analyze-top(|phase, <index-origin-language> ast)
   
  /**
   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
   *
   * @param phase     The type of analysis phase. There are currently 2 phases to choose from:
   *                  - Editor():   All information is stored into the index and dependent files
   *                                are automatically scheduled for re-analysis.
   *                  - Compile():  No information is stored and no re-analysis is done.
   * @param language  The name of the language that is being analysed.
   *
   * @see analyze-top-internal(|phase, language)
   */
  analyze-top(|phase, language):
    (ast, path, project-path) -> ast'
    with
      AnalysedResult(ast', _, _, _, _, _) := <analyze-top-internal(|phase, language)> (ast, path, project-path)
  
  /**
   * Analyses given AST and annotates definition and use sites found in the AST with URIs.
   *
   * @internal
   */
  analyze-top-internal = 
    analyze-top-internal(|Editor())
  analyze-top-internal(|phase) = 
    ?(ast, path, project-path); analyze-top-internal(|phase, <index-origin-language> ast)
  analyze-top-internal(|phase, language) = 
    ?(_, path, project-path); analyze-top-internal(|phase, language, $[[project-path]/[path]])
  analyze-top-internal(|phase, language, full-path):
    (ast, path, project-path) -> AnalysedResult(ast5, defs, uses, data', added, removed)
    with
      // Init
      index-setup(|language, [project-path])
    with
    	// Store copy of defs for diff and clear file
      olddefs := <filter(?Def(_))> <index-get-all-in-file> full-path;
      <index-clear-file> full-path
    with
      {| Index-ReadSet, Index-UnresolvedSet:
        readSet := <new-iset>;
        unresolvedSet := <new-iset>;
        
        rules(Index-ReadSet: _ -> readSet);
        rules(Index-UnresolvedSet: _ -> unresolvedSet);
       
        // Add Unresolved annotations, record globals
        (Some(ast2), defs) := <analyze-defs(|Anon(), Anon())> Some(ast); // HACK: force origin tracking with Some()... // TODO: still needed?
        <index-add-all(|full-path)> defs;

        // Find DefData
        ast3 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast2;
        data := <origin-track-forced(analyze-tree-data)> ast3;
        <index-add-all(|full-path)> data;

        // Resolve an references in DefData (using what we just stored)
        (data', data-uses) := <analyze-uses> data;
        <index-remove-all(|full-path)> data;
        <index-add-all(|full-path)> data';
       
        // Resolve all unresolved references in the tree
        (ast4, uses) := <analyze-uses> ast3;
        <index-add-all(|full-path)> uses;
        
        ast5 := <prim("SSL_EXT_clone_and_set_parents", <id>)> ast4;
       
        // Store reads into the index (if current language is not testing language)
        if not(<is-test-input(|language)> (ast, path)) then
          <index-add-all(|full-path)> <iset-elements> readSet
        end
      |}
    with
      // Schedule re-analysis of dependent files (if current file is not testing language file)
      // HACK: Depends on file extension, could be other languages with .spt extension?
      if Editor() := phase; not(<is-test-file> path) then
	      // Find removed and added definitions
	      (added, removed) := <analyze-diff> (olddefs, defs);
	      // Schedule re-analysis of files that have a Use or Read of a removed def and Read of an added def
	      reanalyze-all(|added, removed, full-path)
	    else
	      (added, removed) := ([], [])
      end
     
  analyze-diff:
    (defs1, defs2) -> (added, removed)
    with
      added   := <diff(analyze-diff-eq)> (defs2, defs1);
      removed := <diff(analyze-diff-eq)> (defs1, defs2)
 
  // Compensate for changing anonymous namespace names
  analyze-diff-eq = ?(Def(u1), Def(u2)); (<eq> (u1, u2) <+ <eq> (<remove-all(?Anon(_))> u1, <remove-all(?Anon(_))> u2))
 
  // Tests if the current file is just a testing language input
  is-test-file = string-ends-with(|".spt")
  is-test-input(|language):
    (ast, path) -> (ast, path)
    where
      <is-test-file> path;
      not(!language => "Spoofax-Testing")
     
  analyze-changed(get-all):
    defs -> filenames
    with
      uses := <mapconcat(get-all)> defs;
      filesAndSubFiles := <mapconcat(index-get-files-of)> uses;
      filenames := <map(Fst)> filesAndSubFiles
       
  analyze-all-changed-files(|added, removed, full-path):
    _ -> changed
    with
    changed := <make-set> <remove-all(?full-path <+ is-test-file <+ index-is-fake-file)> <concat> [
	    <analyze-changed(index-get-uses-all)> removed,
	    <analyze-changed(index-get-reads-all)> removed,
	    <analyze-changed(index-get-reads-all)> added
    ]
         
  reanalyze-all(|added, removed, full-path) =
    analyze-all-changed-files(|added, removed, full-path);
    map(debug(!"Re-analyzing "); prim("SSL_EXT_queue_analysis"))
 
  /**
   * Identifies all definitions in the tree
   * and annotates them with their URI.
   * Also annotates uses with a preliminary "Unresolved(_)" URI.
   */
  analyze-defs(|head-scope, head-scope-ns):
    ast -> (ast', defs')
    with
      if def := <nam-get-definition> ast then
        Def(def-path)                     := def;
        [head-scope-ns', head-scope' | _] := def-path
      else
        def-path       := INTERNAL_ERROR();
        head-scope-ns' := head-scope-ns;
        head-scope'    := head-scope
      end;
      if scope-types := <nam-get-scope-types> ast then
        {| IndexPath:
          <list-loop(update-index-path(|head-scope', head-scope-ns', ast))> scope-types;
          // <balanced-update-path> head-scope';
          (ast', defs) := <analyze-defs-recurse(|Anon(), Anon(), def-path)> ast
        |}
      else
        (ast', defs) := <analyze-defs-recurse(|head-scope', head-scope-ns', def-path)> ast
      end;
      defs' := <![def | defs] <+ !defs>
 
  analyze-defs-recurse(|head-scope, head-scope-ns, def-path):
    ast -> (ast'', defs)
    where
      analyzed      := <all(analyze-defs(|head-scope, head-scope-ns))> ast;
      (ast', defs)  := <unzip-analyzed> analyzed;
      ast''         := <try(nam-annotate-names(|def-path))> ast'
 
  update-index-path(|head-scope, head-scope-ns, ast):
    scope-type -> scope-type
    where
      if !head-scope-ns => Anon() then
        path  := <IndexPath <+ ![]> scope-type;
        path' := <do-adjusted-index-path(|scope-type, path, Anon(<new>))> ast
      else
        path  := <IndexPath <+ ![]> head-scope-ns;
        path' := <do-adjusted-index-path(|scope-type, path, head-scope)> ast
      end;
      rules(IndexPath: scope-type -> path')
 
  /* TODO: consider using simple-update-def-path
   *       which uses "balanced" path scopes
   *       e.g. when Entity doesn't scope Function
   *       then it's hard to access properties from a function
  balanced-update-index-path:
    head-scope -> head-scope
    where
      if !head-scope => Anon() then
        head-scope' := Anon(<new>)
      else
        head-scope' := head-scope
      end;
      (something with do-adjust-path)
      rules(IndexPath := [head-scope' | <IndexPath <+ ![]> ()])
  */
 
  /**
   * Analyze all uses, changing their preliminary
   * "Unresolve(_)" URI to a definite URI of their definition.
   */
  analyze-uses = analyze-uses(|None())
  analyze-uses(|parent):
    ast -> (ast'', uses')
    with
      analyzed     := <all(analyze-uses(|ast))> ast;
      (ast', uses) := <unzip-analyzed> analyzed;
      if !ast' => _{unresolved@[Unresolved(namespace), x | path]} then
        if Def(def-uri) := <index-lookup(id |namespace, path, <strip-annos> ast')> ast' then
          ast'' := ast{def-uri};
          if key{keyUri} := <nam-get-definition-key> parent ; not(<eq>(key, ast')) then
            uses' := [Use(def-uri, keyUri) | uses]
          else
            uses' := [Use(def-uri, [namespace | path]) | uses]
          end
        else
          ast'' := ast';
          uses' := [BadUse([namespace, x]) | uses]
        end
      else
        ast'' := ast';
        uses' := uses
      end
 
  /**
   * Collects all index data (e.g., types of definitions).
   */
  analyze-tree-data:
    tree -> data
    where
      set := <new-iset>;
      <topdown(analyze-tree-data-part(|set))> tree;
      data := <iset-elements> set
 
  analyze-tree-data-part(|set):
    tree -> tree
    where
      if def-term := <nam-get-definition-key> then
        _{[namespace | path]} := def-term;
        if result := <adjust-index-def-data(store-index-data-results(|set) |namespace, path)> tree then
          <fatal-err(|"Unexpected result from adjust-index-def-data; should call <store-results>")> result
        end
      end
 
  store-index-data-results(|set):
    t -> <fail>
    where
      if is-list then
        <iset-addlist(|t)> set
      else
        <iset-add(|t)> set
      end
 
  /**
   * Transforms a term C( (a1, [b1]), (a2, [b2, b3]) )
   * to a tuple (C(a1, a2), [b1, b2, b3]).
   */
  unzip-analyzed:
    appl -> (appl', unzipped-parts)
    with
      appl'          := <all(\(a, _) -> a\)> appl;
      unzipped-parts := <concat> <get-appl-arguments(\(_, b) -> b\) <+ map(\(_, b) -> b\) <+ ![]> appl
 
rules // compilation
  
  index-schedule-compilation = 
    queue-strategy(|"index-compilation", "Compiling!"); !None()
    
  index-compilation:
    (ast, _, _, path, project-path) -> <index-compilation(|path, project-path)> ast
  
  index-compilation(|path, project-path):
    ast -> None()
    with
      // Init
      full-path := $[[project-path]/[path]];
      language  := <index-origin-language> ast;
      index-setup(|language, [project-path])
    with
      // Get all changes files by looking at the timestamps.
      changedFiles      := <index-timestamp-get-updates(|"compile")>;
      
      // Determine the files to compile by looking at dependencies.
      allDependentFiles := <make-set> <mapconcat(index-get-dependent-files)> changedFiles;
      files             := <make-set> <conc> (allDependentFiles, changedFiles);
      
      // Restore compile time reads.
      <filter(index-compilation-restore-reads)> files;
      
      // Compile the files
      <filter(index-compilation-file(|language, project-path))> files;
      
      // Update timestamps to current time.
      index-timestamp-set-updated(|"compile")

  index-compilation-file(|language, project-path):
    (file, subfile) -> None()
    where
      not(<is-test-file <+ index-is-fake-file> file) // Don't try to compile testing language or 'fake' files.
    with
      // Parse and analyze ast.
      ast                                 := <parse-file> file;
      AnalysedResult(ast', _, _, _, _, _) := <analyze-top-internal(|Compile(), language, file)> (ast, file, project-path)
    with
      {| Index-ReadSet:
        readSet := <new-iset>;
        rules(Index-ReadSet: _ -> readSet);
        
        // Compile file
        <index-compile-ast(|file, subfile, project-path)> ast';
        
	      // Store compile-time reads.
	      reads := <iset-elements> readSet;
	      <index-add-all(|(file, subfile))> reads;
	      <index-add-all(|<index-compilation-file-tuple> (file, subfile))> reads
      |}
      
  index-compilation-restore-reads:
    (file, subfile) -> None()
    with
      compilationFiles := <index-compilation-file-tuple> (file, subfile);
      reads := <index-get-all-in-file> compilationFiles;
      <index-add-all(|(file, subfile))> reads;
      <index-clear-file> compilationFiles
      
  index-compilation-file-tuple:
    (file, subfile) -> ($[/.internal/reads/compile/[file]], subfile)
 
rules // index API primitives
 
  /**
   * Gets all DefData entries that match the kind of data and URI in given definition.
   *
   * @param kind Only data of this kind is returned.
   *
   * Example:
   *   <index-get-data(|Type())> Def([Entity(), "Bar"]) => [DefData([Entity(), "Bar"], Type(), TYPE("Bar")), ...]
   */
  index-get-data(|kind):
    <with(?Def(uri) | "Def expected")> -> <index-get-value> DefData(uri, kind, ())
      
	/**
	 * Gets all data entries that match the kind of data and URI in given definition.
	 *
	 * @param kind Only data of this kind is returned.
	 *
	 * Example:
	 *   <index-get-data-all(|Type())> Def([Entity(), "Bar"]) => [TYPE("Bar"), ...]
	 */
  index-get-data-all(|kind):
    <with(?Def(uri) | "Def expected")> -> <index-get-all-values> DefData(uri, kind, ())
     
  /**
   * Gets all Use entries that match the URI in given definition.
   *
   * Example:
   *   <index-get-uses-all> Def([Entity(), "M", "Bar"]) => [Use([Entity(), "M", "Bar"], [Entity(), "M"]), ...]
   */
  index-get-uses-all:
    <with(?Def(uri) | "Def expected")> -> <index-get-all> Use(uri, [])
     
  /**
   * Gets all Read or ReadWildcard entries that match the given template.
   *
   * Example:
   *   <index-get-reads-all> [Property(), "Bar", "p"] => [Read([Property(), "Bar", "p"]), ...]
   */
  index-get-reads-all:
    template -> <conc> (reads, readwildcards')
    where
      uri   := <index-uri> template;
      reads := <index-get-all> Read(uri);
      if !uri => [namespace, prefix | path-parent] then
        readwildcards  := <index-get-all> ReadWildcard([namespace | path-parent], ());
        readwildcards' := <filter(index-readwildcard-substring(|prefix))> readwildcards
      else
        readwildcards' := []
      end
 
  /**
   * Get all index entries that match the given template.
   *
   * Example:
   *   <index-get-all> Def([Entity(), "Bar"]) => [Def([Entity(), "Bar"]), ...]
   */
  index-get-all:
    template -> <indexlib-get-all> template
      with
       if set := <Index-ReadSet> then
         uri := <index-uri>;
         <iset-add(|Read(uri))> set
       end
       
  /**
   * Get all values of index entries that match the given template.
   *
   * @see index-value
   *
   * Example:
   *   <index-get-all-values> DefData([Property(), "s"], Type(), ()) => [TYPE("String"), ...]
   */
  index-get-all-values:
    template -> <map(index-value)> <index-get-all> template
       
  /**
   * Get the first index entry that matches the given template, or fail.
   *
   * Example:
   *   <index-get> Def([Entity(), "Bar"]) => Def([Entity(), "Bar"])
   */
  index-get:
    template -> <index-get-first> <index-get-all> template
      
  /**
   * Get the value of first index entry that matches the given template, or fail.
   *
   * @see index-value
   *
   * Example:
   *   <index-get-value> DefData([Entity(), "Bar"], Type(), ()) => TYPE("Bar")
   */
  index-get-value:
    template -> <index-value> <index-get-first> <index-get-all> template
 
  /**
   * Gets the URI for given term.
   */
  index-uri:
    Def(uri) -> uri
    
  /**
   * Gets the URI for given term.
   */
  index-uri:
    Use(uri, _) -> uri
    
  /**
   * Gets the URI for given term.
   */
  index-uri:
    Read(uri) -> uri
 
  // TODO: Should second part of ReadWildcard be included in the URI, between namespace and path?
  /**
   * Gets the URI for given term.
   */
  index-uri:
    ReadWildcard(uri, _) -> uri
    
  /**
   * Gets the URI for given term.
   */ 
  index-uri:
    term -> <?_#(<index-get-first>)> term
    where 
      not(<?Def(_) <+ ?DefData(_, _, _) <+ ?Use(_, _) <+ ?Read(_) <+ ?ReadWildcard(_, _)> term)
   
  /**
   * Gets the URI for given term.
   */
  index-uri:
    x{[namespace | path]} -> [<index-namespace-unwrap> namespace | path]
   
  /**
   * Gets the namespace part of the URI for given term.
   */
  index-namespace:
    x{[namespace | path]} -> <index-namespace-unwrap> namespace

  /**
   * Gets the path part of the URI for given term.
   */
  index-path:
    x{[namespace | path]} -> path'
    where
      if !namespace => Unresolved(namespace) then
        Def(path') := <index-lookup>
      else
        path' := path
      end

  /**
   * Gets the value part for given term.
   */ 
  index-value:
    Def(value) -> value
    
  /**
   * Gets the value part for given term.
   */ 
  index-value:
    Use(_, value) -> value
    
  /**
   * Gets the value part for given term.
   */ 
  index-value:
    Read(value) -> value
    
  /**
   * Gets the value part for given term.
   */ 
  index-value:
    ReadWildcard(_, value) -> value
    
  /**
   * Gets the value part for given term.
   */ 
  index-value:
    term -> <?_#(<index-get-second>)> term
    where 
      not(<?Def(_) <+ ?DefData(_, _, _) <+ ?Use(_, _) <+ ?Read(_) <+ ?ReadWildcard(_, _)> term)  
 
  /**
   * Determines if a given AST node is a definition site,
   * according to the syntax.
   */
  index-is-definition =
    where(nam-get-definition-key)
 
  /**
   * Returns all children of a Def.
   *
   * @param namespace Only child Defs with this namespace are returned.
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   *
   */
  index-get-children(|namespace, prefix):
    <with(?Def([parent-ns | path]) | "Def expected")> -> children'
    with
      with(not(!namespace => Def(_)) | "index-get-children interface changed");
      prefix'   := <strip-annos> prefix;
      template  := Def([namespace | path]);
      children  := <prim("LANG_index_get_children", template)>;
      children' := <filter(index-is-name-substring(|prefix'))> children;
      store     := [namespace, prefix' | path];
      // Store read in index.
      if set := <Index-ReadSet> then
        <iset-add(|ReadWildcard([namespace | path], prefix'))> set
      end
      
  /**
   * Gets a set of all references to other files the given file (and subfile) has, including the file itself.
   *
   * @param entryFilter Filter strategy that is applied to all entries of given file to only look
   *                    at dependency constructs such as Use(_, _) or Read(_)
   *
   * Example:
   *   <index-file-references(?Read(_) <+ ?ReadWildcard(_, _) <+ ?Use(_, _))> "fullpath/file.ext" => 
   *     [("fullpath/otherfile.ext", "subfile"), ...]
   *   <index-file-references(?Use(_, _)> ("fullpath/file.ext", "subfile") => 
   *     [("fullpath/otherfile.ext", "othersubfile"), ...]
   */
  index-get-file-references(entryFilter):
    file -> files
    where
      entries     := <index-get-all-in-file> file;
      references  := <filter(entryFilter)> entries;
      uris        := <filter(index-uri)> references;
      defs        := <map(\uri -> Def(uri)\)> uris;
      files       := <make-set> <mapconcat(index-get-files-of)> defs
      
  /**
   * Convenience function for finding Read and Use dependencies to other files of given file and subfile.
   *
   * @see index-file-references(entryFilter)
   *
   * Example:
   *   <index-file-dependencies> "fullpath/file.ext" => [("fullpath/otherfile.ext", "subfile"), ...]
   *   <index-file-dependencies> ("fullpath/file.ext", "subfile") => 
   *     [("fullpath/otherfile.ext", "othersubfile"), ...]
   */
  index-get-file-dependencies = index-get-file-references(?Read(_) <+ ?ReadWildcard(_, _) <+ ?Use(_, _))
  
  /**
   * Gets a set of all files that have a reference to the given file and subfile.
   *
   * @param createFromDef Construction strategy that creates a list of reference constructs from all 
   *                      defs of the given file, such as Def(uri) -> [Read(uri), Use(uri, [])]
   *
   * Example:
   *   <index-file-referenced(\Def(uri) -> [Read(uri), Use(uri, [])]\)> "fullpath/file.ext" => 
   *     [("fullpath/otherfile.ext", "subfile"), ...]
   *   <index-file-referenced(\Def(uri) -> [Read(uri), Use(uri, [])]\)> ("fullpath/file.ext", "subfile") => 
   *     [("fullpath/otherfile.ext", "othersubfile"), ...]
   */
  index-get-referenced-files(constructFromDef):
    file -> files
    where
      entries     := <index-get-all-in-file> file;
      defs        := <filter(?Def(_))> entries;
      referenced  := <concat> <filter(constructFromDef)> defs;
      files       := <make-set> <mapconcat(index-get-files-of)> referenced
 
  /**
   * Convenience function for finding files with Read and Use dependencies to the given file and subfile.
   *
   * @see index-file-referenced(entryFilter)
   * @see index-file-dependent-construct
   *
   * Example:
   *   <index-file-dependent> "fullpath/file.ext" => [("fullpath/otherfile.ext", "subfile"), ...]
   *   <index-file-dependent> ("fullpath/file.ext", "subfile") => 
   *     [("fullpath/otherfile.ext", "othersubfile"), ...]
   */
  index-get-dependent-files = index-get-referenced-files(index-file-dependent-construct)
     
rules // index lookup rules (take into account adjust-index-lookup)
 
  /**
   * Given an annotated AST node, resolves it, returning its Def.
   */
  index-lookup:
    x{[namespace | path]} -> <index-lookup(id |<index-namespace-unwrap> namespace, path, <strip-annos> x)>
 
  /**
   * Given an annotated AST node, resolves it, returning all its Defs.
   */
  index-lookup-all:
    x{[namespace | path]} -> <index-lookup-all(id |<index-namespace-unwrap> namespace, path, <strip-annos> x)>
 
  /**
   * Given an annotated AST node, resolves it, returning all its Defs.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   *
   * @internal
   */
  index-lookup(is-adjust-lookup-enabled |namespace, path, prefix):
    x -> def
    where
      index-is-unresolved(|x);
      def := <fail>
    <+
      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
      def        := <index-select(|namespace, path, x)>
    <+
      // TODO: optimize: try not to call do-adjust-index-lookup from here
      [_ | path'] := path;
      def         := <index-lookup(is-adjust-lookup-enabled |namespace, path', prefix)> x
    <+
      [] := path;
      <iset-add(|x)> <Index-UnresolvedSet>
      
  /**
   * Given an annotated AST node, resolves it, returning all its Defs.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   *
   * @internal
   */
  index-lookup-all(is-adjust-lookup-enabled |namespace, path, prefix):
    x -> defs'
    where
      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
      defs       := <index-select-all(|namespace, path, x)>;
      // TODO: optimize: try not to call do-adjust-index-lookup from here
      if [_ | path'] := path then
        defs2 := <index-lookup-all(is-adjust-lookup-enabled |namespace, path', prefix)> x;
        defs' := <conc> (defs, defs2)
      else
        defs' := defs
      end
 
  /**
   * Given an annotated AST node, returns the outermost Def with a corresponding URI.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-outermost(|prefix):
    x{[namespace | path]} -> <index-lookup-outermost(id |<index-namespace-unwrap> namespace, path, prefix)>
 
  /**
   * Given an annotated AST node, returns the outermost Def with a corresponding URI.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   *
   * @internal
   */
  index-lookup-outermost(is-adjust-lookup-enabled |namespace, path, prefix):
    x -> def
    where
      // TODO: optimize: just like index-lookup
      [_ | path'] := path;
      def         := <index-lookup-outermost(is-adjust-lookup-enabled |namespace, path', prefix)> x
    <+
      candidates := <index-lookup-one-level(is-adjust-lookup-enabled|namespace, path, prefix)>;
      def        := <index-select(|namespace, path, x)>
 
  /**
   * Given an annotated AST node, returns a Def that has the same parent URI.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-one-level(|prefix):
    x{[namespace | path]} -> <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path, prefix)>
 
  /**
   * Given an annotated AST node, returns a Def that has the same parent URI.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-one-level(is-adjusted-lookup-enabled |namespace, path, prefix):
    x{_} -> defs
    with
      is-adjusted-lookup-enabled;
      do-adjust-index-lookup(|namespace, path, x, prefix);
      mapconcat(\d@Def(p) -> [d]\
          <+ \[namespace' | path'] -> <index-lookup-one-level(fail |namespace', path', prefix)> x\
          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
      ?defs
    <+
      defs := <index-get-children(|namespace, prefix)> Def([namespace | path])
 
  /**
   * Given an annotated AST node, returns a Def with a common ancestor URI.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-all-levels(|prefix):
    x{[namespace | path]} -> <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path, prefix)>
 
  /**
   * Given an annotated AST node, returns a Def with a common ancestor URI.
   *
   * @param prefix    Only Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-all-levels(is-adjust-lookup-enabled |namespace, path, prefix):
    x{_} -> all-defs
    with
      is-adjust-lookup-enabled;
      do-adjust-index-lookup(|namespace, path, x, prefix);
      mapconcat(\d@Def(p) -> [d]\
          <+ \[namespace' | path'] -> <index-lookup-all-levels(fail |namespace', path', prefix)> x\
          <+ fatal-err(|"Unexpected result from adjust-index-lookup, should be a Def(_) or [namespace | path]"));
      ?all-defs
    <+
      one-level := <index-get-children(|namespace, prefix)> Def([namespace | path]);
      if [_ | path'] := path then
        all-defs := <concat> [one-level, <index-lookup-all-levels(fail |namespace, path', prefix)> x]
      else
        all-defs := one-level
      end
 
  /** @Deprecated */
  index-lookup-contained(|namespace, prefix) =
    index-lookup-children(|namespace, prefix)
   
  /** @Deprecated */
  index-lookup-contained-all-levels(|namespace, name) =
    index-lookup-descendants(|namespace, name)
 
  /**
   * Given an annotated AST node, resolves it,
   * and returns all child Defs of its definition.
   *
   * @param namespace Only child Defs with this namespace are returned.
   * @param prefix    Only child Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-children(|namespace, prefix):
    x{[ns | path]} -> defs
    with
      if !ns => Unresolved(_) then
        Def([_ | def-path]) := <index-lookup>;
        defs := <index-lookup-one-level(id|namespace, def-path, prefix)> x
      else
        defs := <index-lookup-one-level(id|<index-namespace-unwrap> namespace, path, prefix)>
      end
    <+
      defs := []
 
  /**
   * Given an annotated AST node, resolves it,
   * and returns all descendant Defs of its definition.
   *
   * @param namespace Only child Defs with this namespace are returned.
   * @param prefix    Only child Defs with a name that starts with this
   *                  string are returned.
   */
  index-lookup-descendants(|namespace, name):
    x{[ns | path]} -> defs
    with
      if !ns => Unresolved(_) then
        Def([_ | def-path]) := <index-lookup>;
        defs := <index-lookup-all-levels(id|namespace, def-path, name)> x
      else
        defs := <index-lookup-all-levels(id|<index-namespace-unwrap> namespace, path, name)>
      end
    <+
      defs := []
 
/** @internal */
rules // Internal helpers
       
  index-origin-language = (origin-term <+ id); prim("SSL_EXT_origin_language", <id>)
       
  index-is-name-substring(|name):
    template -> <id>
    with
      [_, uri-name | _] := <index-uri>
    where
      <is-substring(!name)> uri-name
      
  index-readwildcard-substring(|prefix):
    ReadWildcard(_, name) -> <id>
    where <is-substring(!prefix)> name
      
  index-is-unresolved(|x) = <iset-contains(|x)> <Index-UnresolvedSet>
  
  index-file-dependent-construct: 
    Def(uri@[namespace | path]) -> [Read(uri), ReadWildcard([namespace | rest], firstElem), Use(uri, [])]
    where
      [firstElem | rest] := path
 
  do-adjust-index-lookup(|namespace, path, use, prefix) =
    // UNDONE: try(origin-term);
    repeat-until(
      prim("SSL_EXT_get_parent", <id>)
    , adjust-index-lookup(origin-equal(|use) |namespace, path, prefix)
    )
 
  index-select(|namespace, path, use) =
    getfirst(
      where(
        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
      )
    )
 
  index-select-all(|namespace, path, use) =
    filter(
      where(
        ?Def([_, <SRTS-EXT-eq-ignore-annos(|use)> | _])
      )
    )
 
  do-adjusted-index-path(|namespace, path, def) =
    adjust-index-path(origin-equal(|def) |namespace, path)
  <+
    ![def | path]
 
  index-eq(|namespace, expected) =
    where(
      ?Def([_, name | _]);
      <SRTS-EXT-eq-ignore-annos(|expected)> name
    )
  
  external SRTS-EXT-eq-ignore-annos(|t)
 
rules // interface for generated code
 
  nam-get-def(|namespace):
    x -> Def([namespace, x | <IndexPath <+ ![]> namespace])
   
  nam-annotate-use(|namespace):
    t -> t{[Unresolved(namespace), t | <IndexPath <+ ![]> namespace]}
   
  nam-get-scope-types = fail
  nam-get-definition = fail
  nam-get-definition-key = fail
  nam-annotate-names(|def-path) = fail
  