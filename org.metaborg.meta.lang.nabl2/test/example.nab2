module example

rules

  Program(dec*):
    new scope s,
    s scopes dec*
  
  Module(m, dec*) in scope s:
    new scope s' with parent s,
    declares m in s 
           with associated scope s',
    s' scopes dec*
    
  Import(m) in scope s:
    references m in s,
    imports m into s

  LetPar(b*, e) in scope s:
    new scope s' with parent s,
    s, s' scope b*,
    s' scopes e
    
  LetRec(b*, e) in scope s:
    new scope s' with parent s,
    s', s' scope b*,
    s' scopes e,
    s' scopes e
    
  Bind(x, e) in scopes s, ds:
    declares x in ds,
    s scopes e  

  FieldRef(e, f) in scope s:
    references f in s_e,
    s scopes e
    e has type ty,
    ty == TRec(d),
    d has associated scope s_e
        
  FieldRef(e, f) in scope s:
    new scope s' without parent,
    imports s_e into s',
    references f in s',
    s scopes e    
    e has type ty,
    ty == TRec(d),
    d has associated scope s_e
    
  FieldRef(e, f) : t
  where e : TRec(d) and definition of f : t
    
	  // where e has type ty
	  //   and ty == TRec(d)
	  //   and d has associated scope es
  
//   Let(x, e1, e2):
//     create scope s
//     declares x in s
//     s scopes e2
//     
//   LetSeq([], e) with s:
//     visit e with s=s
//   
//   LetSeq([b|b*], e):
//     create scope s'
//     b.ds=s' 
//     s' scopes LetSeq(b*, e)
//   
//   LetSeq2(b*, e):
//     visit b* returns s
//     s scopes e
//   
//   [BindSeq(x, e)|b*]:
//     create scope s
//     declares x in s
//     visit b* with s, returns s2
//     returns s2
//     
//   VarRef(x) with s:
//     create reference x in s
//     
//   FieldRef(e, f) with s:
//     create scope s' 
//     create import es into s'
//     create reference f in s'
//     visit e with s=s
// 	  where e has type ty
// 	    and ty == TRec(d)
// 	    and d has associated scope es
//   
//   New(r, i*):
//     create reference r
//     visit i* with rs=s
// 	  where r resolves to d
// 	    and d has associated scope s
//      
//   // new R(x1 = y1, x2 = y2)
//   RecInit(x, e) with rs:
//     create reference x in rs
//     visit e
// 
//   LetRec2(b*, e):
//     create scope s'
//     s' scopes
//         
//   RecBind(x, e):
//     declares x
//     
// 
