module example

rules

  Program(dec*):
    new scope s,
    s scopes dec*
  
  Module(m, d*) in scope s:
    new scope ms with parent s,
    declares m in s 
      with associated scope ms,
    ms scopes d*
    
  Import(m) in scope s:
    references m in s,
    imports m into s

  LetPar(b*, e) in scope s:
    new scope ds with parent s,
    ds, s scope b*,
    ds scopes e
    
  LetRec(b*, e) in scope s:
    new scope ds with parent s,
    ds, ds scope b*,
    ds scopes e
    
  Bind(x, e) in scopes ds, rs:
    declares x in ds,
    rs scopes e  

  LetSeq(b*, e) in scope s:
    s scopes LetSeq2(b*, e)
      
  LetSeq2([b|b*], e) in scope s:
    new scope ds with parent s,
    s, ds scope b,
    ds scopes LetSeq2(b*, e)
 
  LetSeq2([], e) in scope s:
    s scopes e
    
  VarRef(x) in scope s:
    references x in s
    
  FieldRef(e, f) in scope s:
    new scope s',
    imports es into s',
    references f in s',
    s scopes e
	where 
	  e has type ty,
	  ty == TRec(d),
	  d has associated scope es
  
  New(r, i*) in scope s:
    references r in s,
    s, rs scope i*
	where 
    r resolves to d,
	  d has associated scope rs
     
  // new R(x1 = y1, x2 = y2)
  RecInit(x, e) in scopes s, rs:
    references x in rs,
    s scopes e

  RecBind(x, e) in scope s:
    declares x in s
