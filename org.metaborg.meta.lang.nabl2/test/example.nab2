module example

rules

  Program(dec*):
    create scope s
    visit dec* with s=s
  
  Module(m, d*):
    create scope s' with parent s
    create declaration m in s 
           with associated scope s'
    visit d* with s = s'
    // s' scopes d*
    
  Import(m) with s:
    create reference m in s
    create import m into s
  
  LetPar(b*, e) with s:
    create scope s' with parent s
    visit b* with ds=s'
      and e with s=s'
    
  LetRec(b*, e) with s:
    create scope s' with parent s
    s' scopes b* with ds=s'
    s' scopes e
    // s' scopes e
    // current scope scopes b* with ds=s'
    
  Bind(x, e) with ds:
    create declaration x in ds
    visit e  
  
  Let(x, e1, e2):
    create scope s
    declares x in s
    s scopes e2
    
  LetSeq([], e) with s:
    visit e with s=s
  
  LetSeq([b|b*], e):
    create scope s'
    b.ds=s' 
    s' scopes LetSeq(b*, e)
  
  LetSeq2(b*, e):
    visit b* returns s
    s scopes e
  
  [BindSeq(x, e)|b*]:
    create scope s
    declares x in s
    visit b* with s, returns s2
    returns s2
    
  VarRef(x) with s:
    create reference x in s
    
  FieldRef(e, f) with s:
    create scope s' 
    create import es into s'
    create reference f in s'
    visit e with s=s
	  where e has type ty
	    and ty == TRec(d)
	    and d has associated scope es
  
  New(r, i*):
    create reference r
    visit i* with rs=s
	  where r resolves to d
	    and d has associated scope s
     
  // new R(x1 = y1, x2 = y2)
  RecInit(x, e) with rs:
    create reference x in rs
    visit e

  LetRec2(b*, e):
    create scope s'
    s' scopes
        
  RecBind(x, e):
    declares x
    

