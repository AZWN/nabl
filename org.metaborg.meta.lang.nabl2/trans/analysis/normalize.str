module analysis/normalize

imports
  libstrc
  src-gen/signatures/-
  src-gen/signatures/constraints/-
  src-gen/pp/-
  src-gen/pp/constraints/-
  util

strategies
   
  normalize-all = normalize-module

signature constructors
  	
	Rule: Pattern * List(Var) * List(Fact) * List(Visit) * List(Constraint) -> Rule
  	  
rules
  
  normalize-module:
    Module(name, section*) -> Module(name, [Imports(i*), Rules(r*)])
    with i*  := <filterconcat(?Imports(<id>))> section*
       ; r*  := <filterconcat(?Rules(<map(try(normalize-rule))>))> section*

  normalize-rule:
    Rule(pattern, scopes, part*, constr) ->
    Rule(pattern, scope*, fact*, visit*, constr*)
    with scope*  := <normalize-scopes> scopes
       ; fact*   := <filter(normalize-fact <+ is-Fact)> part*
       ; visit*  := <filter(normalize-visit <+ is-Visit)> part* 
       ; constr* := <normalize-constraints> constr
  
  normalize-rule:
    TypeRule(pattern, scopes, type, fact*, constr) ->
    TypeRule(pattern, scope*, type, fact'*, constr*)
    with scope*  := <normalize-scopes> scopes
       ; fact'*  := <filter(normalize-fact)> fact*
       ; constr* := <normalize-constraints> constr
  
  normalize-fact:
    NewScope(s, None()) -> NewScope(s, NoParent())
  
  normalize-visit:
    Scopes(v, t) -> Scope([v], t)
    
  normalize-scopes: None()         -> []
  normalize-scopes: Scope(scope)   -> [scope]
  normalize-scopes: Scopes(scope*) -> scope*
  
  normalize-constraints: None()    -> []
  normalize-constraints: Where(c*) -> c*
