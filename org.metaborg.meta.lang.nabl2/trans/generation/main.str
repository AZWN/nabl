module generation/main

imports
  
  libstrc
  src-gen/signatures/terms/-
  generation/rules
  generation/signatures
  
rules
  
  generate-collection:
    (selected, position, ast@Module(name, _), path, project-path)
      -> (filename, result)
    with
      filename := <create-src-gen(|project-path, "nabl2",  ".str")> name;
      str-module := <strip-annos; module-to-str> ast
    with
       result := <fix-str; pp-stratego-string> str-module
    <+ <bottomup(try(not(is-string) ;
                     not(is-list) ;
                     not(fix-str;pp-stratego-string) ;
                     debug(!"cannot pp ")))> str-module
    ;  result := ""

    get-dir(|path) :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      names' := <at-last(![])> names;
    //  debug(!"names ");
      if [h | tl] := names'
      then      
        first := <concat-strings> [path, "/" ,h]; 
      //  debug(!"get-dir ");
        <create-dirs(|first)> tl;
      //  debug(!"create-dirs ");
        s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
        else
          s' := path
        end
      
   
   create-dir  = not( file-exists ; filemode ; isdir) < mkdir + id
   
   create-dirs(|dir):
    [h | tl] -> None()
    where
      <create-dir> dir;
      new-dir := <concat-strings> [dir, "/", h];
   //   debug(!"create-dirs new dir ");
      <create-dirs(|new-dir)> tl
    
  create-dirs(|dir):
    [] -> None()
    where
      <create-dir> dir
    //  ; debug(!"create-dirs empty ")
  
  get-filename :
    s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s;
      //debug(!"names ");
      s' := <last> names
 
  create-src-gen(|project-path, folder, ext):
    filename -> filename'
  with
    fn := <get-filename> filename; 
    src-gen-path := <concat-strings; create-dir> [project-path, "/src-gen"];
    src-gen-folder := <concat-strings; create-dir> [src-gen-path, "/" ,folder];
    file-folder := <get-dir(|src-gen-folder)> filename ;
    filename' := <concat-strings> [file-folder, "/" , fn, ext]
    //;debug(!"filename' ")

rules
	
  fix-str = topdown(try(fix-var + fix-decl))
    
  fix-var: VarRef(x)     -> Var(x)
  fix-var: ListVarRef(x) -> Var(x)
  fix-var: ListVar(x)    -> Var(x)
  fix-decl: RDefP(n, sp*, tp*, r) -> RDefT(n, sp*, tp*, r)
  
rules // modules
  
  module-to-str:
    Module(n, s*) -> Module(n', [Imports(lib*)|s'*])
    with
      n'   := $[src-gen/analysis/[n]]
    ; lib* := [
      	        Import("libstratego-gpp"),
      	        Import("runtime/editor/annotations"),
      	        Import("libanalysis2/-"),
                Import("libanalysis2/abstract-syntax/-"),
                Import("libanalysis2/namebinding/-"),
                Import("libanalysis2/typechecking/-"),
                Import("libanalysis2/nabl-ts/-"),
                Import("src-gen/signatures/libanalysis2/-") 
              ]
    ; s'* := <map(section-to-str)> s*
      
  section-to-str = ?Imports(_) <+ rules-to-str <+ signature-to-str
  