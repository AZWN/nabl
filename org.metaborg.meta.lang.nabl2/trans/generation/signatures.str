module generation/signatures

imports
  
  libstrc
  src-gen/signatures/signatures/-
  
rules
  
  signature-to-str:
    Signature(d*) -> [Signature([Constructors(<mapconcat(decl-to-constrs)> d*)]), Rules(<map(decl-to-strategy)> d*)]
  
  
  decl-to-constrs:
    TypeDecl(c, tp*) -> <make-set> [ Constr |[c: tp1 ]|, Constr |[c: tp2 ]| ]
    where
      (ty1*, ty2*) := <partition(?Decl(); to-sort, to-sort)> tp*
    ; tp1 := <to-type(| Type |[ TypeConstr ]|)> ty1*
    ; tp2 := <to-type(| Type |[ Type ]|)> [ty1*, ty2*]
  
  to-sort:
    Decl() -> Sort |[ Declaration ]|
  
  to-sort:
    Type(_) -> Sort |[ Type ]|
  
  to-sort:
    Types(_) -> Sort |[ List(Type) ]|
      
  to-type(|ty) =
  	?[] < !ty + !FunType(<id>, ty)
  	
  decl-to-strategy:
    TypeDecl(c, tp*) -> |[ type-app: c(~var*) -> TApp(c(t1*), [~t2*]) ]|
    where
      var-tp*    := <map-with-index((!Var($[p[<id>]]), id))> tp*
    ; var*       := <map(Fst)> var-tp*
    ; (t1*, t2*) := <partition(where(Snd; ?Decl()); Fst, Fst; to-rec-call)> var-tp*

  to-rec-call:
    t -> Term |[<type-app> t]|
    
    
    