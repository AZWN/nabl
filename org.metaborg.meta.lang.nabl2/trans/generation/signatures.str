module generation/signatures

imports
  
  libstrc
  src-gen/signatures/signatures/-
  src-gen/signatures/terms/-
  
rules
  
  signature-to-str:
    Signature(d*) -> [Signature([Constructors(<mapconcat(decl-to-constrs)> d*)]), Rules(<mapconcat(decl-to-strategies)> d*)]
  
  
  decl-to-constrs:
    TypeDecl(c, tp*) -> <make-set> [ Constr |[c: tp1 ]|, Constr |[c: tp2 ]| ]
    with
      (ty1*, ty2*) := <partition(?Decl(); to-sort, to-sort)> tp*
    ; tp1 := <to-type(| Type |[ TypeCon ]|)> ty1*
    ; tp2 := <to-type(| Type |[ Type ]|)> [ty1*, ty2*]
  
  to-sort:
    Decl() -> Sort |[ Declaration ]|
  
  to-sort:
    Type(_) -> Sort |[ Type ]|
  
  to-sort:
    Types(_) -> Sort |[ List(Type) ]|
      
  to-type(|ty) =
  	?[] < !ty + !FunType(<id>, ty)
  	
  decl-to-strategies:
    TypeDecl(c, tp*) -> 
    [ |[ type-app: c(~var*) -> TApp(c(~tv1*), [~acall*]) ]|
    , |[ type-def: c(~var*) -> TDef(c(~tv1*), [~dcall*]) ]|
    , |[ build-subtype-rel = hashtable-push(|c(~tvt1*), (c(~tvt1*), [~tvt2*])); fail ]| 
    , |[ subtype-variance: c(~w*) -> [~variance*] ]| 
    , |[ is-TypeCon = ?c(~w*) ]|
    , |[ prettyprint-TypeCon: c(~tv1*) -> [ H([SOpt(HS(), "0")], [S(~cs)])] ]|
    ]
    with
      var-tp*      := <map-with-index((!Var($[p[<id>]]), id))> tp*
    ; var*         := <map(Fst)> var-tp*
    ; (tv1*, tv2*) := <partition(where(Snd; ?Decl()); Fst, Fst)> var-tp*
    ; variance*    := <filter(?Type(<variance-to-term>) + ?Types(<variance-to-term>))> tp*
    ; acall*       := <map(to-app-call)> tv2*
    ; dcall*       := <zip(to-arg-call)> (variance*, acall*)
    ; tvt1*        := <map(var-to-term)> tv1*
    ; tvt2*        := <map(var-to-term)> tv2*
    ; w*           := <map(!Wld())> tv1*
    ; cs           := Str(<double-quote> c)
    
  to-app-call:
    t -> Term |[<type-app> t]|
  
  to-arg-call:
    (v, a) -> Term |[ TArg(~v, ~a) ]|
           
  var-to-term:
    _ -> Term |[ Var(x) ]|
    with
      ?Var(v)
    + ?ListVar(v)
    + ?VarRef(v) 
    + ?ListVarRef(v)
    with
      x := <double-quote> v
      
  variance-to-term:
    Invariant() -> Term |[ Invariant() ]|

  variance-to-term:
    Covariant() -> Term |[ Covariant() ]|
  
  variance-to-term:
    Contravariant() -> Term |[ Contravariant() ]|
    
    
    