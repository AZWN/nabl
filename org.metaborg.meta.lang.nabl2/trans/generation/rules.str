module generation/rules

imports
  
  libstrc
  include/NameBindingLanguage2
  util
  generation/visits
  generation/constraints
  generation/facts
  
rules // binding rules

  rules-to-str:
    Rules(r*) -> Rules(<map(rule-to-strategy)> r*)
 
  rule-to-strategy:
    Rule(pattern, With(scope*), [Where(w*), Create(c*), Visit(v*)]) ->
    |[ nabl-ts-constraint(|constraints,scopes):
    	   ~pattern -> <id>
         with [~scope*] := scopes <+ ( debug(!$[wrong scope count [<length> scopes] for ]) ; fail )
         with ~ccollect
         with ~fcollect
         with ~visit
    ]|
    with ccollect*   := <mapconcat(constraint-to-strategies)> w*
       ; constraint* := <map(constraint-to-term)> w* 
       ; ccollect  := <to-seq> [ccollect*, |[ <iset-addlist(|[~constraint*])> constraints ]| ]
    with fcollect* := <filter(fact-to-strategy)> c*
       ; fact*     := <mapconcat(fact-to-terms)> c* 
       ; fcollect  := <to-seq> [fcollect*, |[ <iset-addlist(|[~fact*])> constraints ]| ]
    with if [] := v* then
           visit := |[ nabl-ts-traverse-children(|constraints,scopes) ]|
         else      
           visit := <map(visit-to-appl); to-seq> v*
         end