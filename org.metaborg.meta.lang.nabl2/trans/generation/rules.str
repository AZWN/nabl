module generation/rules

imports
  
  libstrc
  src-gen/signatures/rules/core/-
  src-gen/signatures/terms/-
  analysis/-
  util
  generation/visits
  generation/constraints
  generation/facts
  
rules // binding rules

  rules-to-str:
    Rules(r*) -> Rules(<map(rule-to-strategy)> r*)
 
  rule-to-strategy:
    ScopeRule(pattern, InScopes(scope*), fact*, [], constr*) ->
    |[ nabl-ts-constraint(|facts,constraints,scopes):
         ~pattern -> <fail>
         with [~scope* | _] := scopes <+ ( debug(!$[wrong scope count [<length> scopes] for ]) ; fail )
         with position := <get-position>
         with ~var
         with <iset-addlist(|[~fcoll*])> facts
            ;  <iset-addlist(|[~ccoll*])> constraints
    ]|
    with fvar* := <filterconcat(fact-to-strategies)> fact*
       ; cvar* := <mapconcat(constraint-to-strategies)> constr*
       ; var   := <make-set; to-seq> [fvar*, cvar*]
    with fcoll* := <mapconcat(fact-to-terms)> fact* 
       ; ccoll* := <mapconcat(constraint-to-terms(|Var("position")))> constr* 

  rule-to-strategy:
    ScopeRule(pattern, InScopes(scope*), fact*, visit*, constr*) ->
    |[ nabl-ts-constraint(|facts,constraints,scopes):
         ~pattern -> <id>
         with [~scope* | _] := scopes <+ ( debug(!$[wrong scope count [<length> scopes] for ]) ; fail )
         with position := <get-position>
         with ~var
         with <iset-addlist(|[~fcoll*])> facts
            ;  <iset-addlist(|[~ccoll*])> constraints
         with ~visit
    ]|
    with fvar* := <filterconcat(fact-to-strategies)> fact*
       ; cvar* := <mapconcat(constraint-to-strategies)> constr*
       ; var   := <make-set; to-seq> [fvar*, cvar*]
    with fcoll* := <mapconcat(fact-to-terms)> fact* 
       ; ccoll* := <mapconcat(constraint-to-terms(|Var("position")))> constr* 
    where [_|_] := visit*
    with visit := <map(visit-to-appl); to-seq> visit*

   rule-to-strategy:
    TypeRule(pattern, type, constr*) ->
    |[ nabl-ts-constraint(|facts,constraints,scopes):
         ~pattern -> <fail>
         with position := <get-position>
         with ~var
         with <iset-addlist(|[CTypeOf(position, ~tp, position), ~ccoll*])> constraints
    ]|
    with 
    	var := <mapconcat(constraint-to-strategies); make-set; to-seq> constr*
    ; ccoll* := <mapconcat(constraint-to-terms(|Var("position")))> constr*
    ; tp  := <type-pattern> type
           