module generation/rules

imports
  
  libstrc
  src-gen/signatures/-
  src-gen/signatures/constraints/-
  src-gen/signatures/terms/-
  analysis/-
  util
  generation/visits
  generation/constraints
  generation/facts
  
rules // binding rules

  rules-to-str:
    Rules(r*) -> Rules(<map(rule-to-strategy)> r*)
 
  rule-to-strategy:
    Rule(pattern, scope*, fact*, [], constr*) ->
    |[ nabl-ts-constraint(|tvars,facts,constraints,scopes):
         ~pattern -> <fail>
         with [~scope* | _] := scopes <+ ( debug(!$[wrong scope count [<length> scopes] for ]) ; fail )
         with position := <get-position>
         with ~var
         with <iset-addlist(|[~fcoll*])> facts
            ;  <iset-addlist(|[~ccoll*])> constraints
    ]|
    with fvar* := <filter(fact-to-strategy)> fact*
       ; cvar* := <mapconcat(constraint-to-strategies); make-set> constr*
       ; var   := <to-seq> [fvar*, cvar*]
    with fcoll* := <mapconcat(fact-to-terms)> fact* 
       ; ccoll* := <map(constraint-to-term(|Var("position")))> constr* 

  rule-to-strategy:
    Rule(pattern, scope*, fact*, visit*, constr*) ->
    |[ nabl-ts-constraint(|tvars,facts,constraints,scopes):
         ~pattern -> <id>
         with [~scope* | _] := scopes <+ ( debug(!$[wrong scope count [<length> scopes] for ]) ; fail )
         with position := <get-position>
         with ~var
         with <iset-addlist(|[~fcoll*])> facts
            ;  <iset-addlist(|[~ccoll*])> constraints
         with ~visit
    ]|
    with fvar* := <filter(fact-to-strategy)> fact*
       ; cvar* := <mapconcat(constraint-to-strategies); make-set> constr*
       ; var   := <to-seq> [fvar*, cvar*]
    with fcoll* := <mapconcat(fact-to-terms)> fact* 
       ; ccoll* := <map(constraint-to-term(|Var("position")))> constr* 
    where [_|_] := visit*
    with visit := <map(visit-to-appl); to-seq> visit*

   rule-to-strategy:
    TypeRule(pattern, scope*, type, fact*, constr*) ->
    |[ nabl-ts-constraint(|tvars,facts,constraints,scopes):
         ~pattern -> <fail>
         with [~scope* | _] := scopes <+ ( debug(!$[wrong scope count [<length> scopes] for ]) ; fail )
         with position := <get-position>
         with type-var := <get-type-var(|tvars)>
         with ~var
         with <iset-addlist(|[~fcoll*])> facts
            ; <iset-addlist(|[~ccoll*])> constraints
    ]|
    with fvar* := <filter(fact-to-strategy)> fact*
       ; cvar* := <mapconcat(constraint-to-strategies); make-set> constr*
       ; var   := <to-seq> [fvar*, cvar*]
    with fcoll* := <mapconcat(fact-to-terms)> fact* 
       ; ccoll* := <map(constraint-to-term(|Var("position")))> [Match(VarRef("type-var"), type)|constr*]
         