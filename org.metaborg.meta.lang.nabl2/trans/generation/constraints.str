module generation/constraints

imports
  
  libstrc
  signatures/rules/core/-
  signatures/terms/-
  generation/facts
  
rules
  
  collect-vars = collect-all(?Var(_) + ?ListVar(_))
  
  collect-constraint-vars =
    ?HasType(_, <collect-vars>)
  
  collect-constraint-vars =
    ?LubType(_, _, _); collect-vars
  
  collect-constraint-vars =
    ?SubType(_, _); collect-vars
         
  collect-constraint-vars =
  	?Declares(_, <MkSingleton>)
 
  collect-constraint-vars:
    Resolves(_, BindV(_, v), p) -> [v, p]
  
  collect-constraint-vars =
    ?HasScope(_, <MkSingleton>)
    
  collect-constraint-vars =
  	?Match(_, _); collect-vars
  
  collect-constraint-vars =
    ?Success(<collect-constraint-vars>, _)
  
  collect-constraint-vars =
    ?Failure(<collect-constraint-vars>, _)
  
  collect-constraint-vars =
    ?MakeSub(<MkSingleton>, _, _)
  
  collect-constraint-vars =
    ?ExtractSub(<MkSingleton>, _)
  
  collect-constraint-vars =
    ?ApplySub(<MkSingleton>, _, _)
 
rules
      
  constraint-to-terms(|pos):
    Success(c, msg) -> t*
    with pos' := <message-to-term> msg
    with t*   := <constraint-to-terms(|pos')> c
    
  constraint-to-terms(|pos):
    Failure(c, msg) -> t*
    with pos' := <message-to-term> msg
    with t*   := <constraint-to-terms(|pos')> c
         
  message-to-term:
    Message(_, _, t) -> Term |[ <get-position> t ]|
  
  // dynamic check could be avoided with proper static analysis
  constraint-to-terms(|msg):
    HasType(v, t) -> [ Term |[ CTypeOf(<get-position> ~v, ~tp, ~msg) ]| ]
    where not (ListVarRef(_) := v)
    with tp := <type-pattern> t
  
  constraint-to-terms(|msg):
    HasType(v@ListVarRef(_), t) -> [ Term |[ <type-of-constraints(|~tp, ~msg)> ~v ]| ]
    with tp := <type-pattern> t
  
  constraint-to-terms(|msg):
    LubType(t1, t2, t3) -> [ Term |[ CLubType(~tp1, ~tp2, ~tp3, ~msg) ]| ]
    with tp1 := <type-pattern> t1
       ; tp2 := <type-pattern> t2
       ; tp3 := <type-pattern> t3
   
  constraint-to-terms(|msg):
    SubType(t1, t2) -> [ Term |[ CSubType(~tp1, ~tp2, ~msg) ]| ]
    with tp1 := <type-pattern> t1
       ; tp2 := <type-pattern> t2
  
  constraint-to-terms(|msg):
    MakeSub(t1, t2, t3) -> [ Term |[ CMkSub(~tp1, ~tp2, ~tp3, ~msg) ]| ]
    with tp1 := <type-pattern> t1
       ; tp2 := <type-pattern> t2
       ; tp3 := <type-pattern> t3
   
  constraint-to-terms(|msg):
    ExtractSub(t, p) -> [ Term |[ CComposeSub(~tp, ~p, ~msg) ]| ]
    with tp := <type-pattern> t
  
  constraint-to-terms(|msg):
    ApplySub(t1, s, t2) -> [ Term |[ CApplySub(~tp1, ~s, ~tp2, ~msg) ]| ]
    with tp1 := <type-pattern> t1
       ; tp2 := <type-pattern> t2
        
  constraint-to-terms(|msg):
    Resolves(v, BindV(ns, dv), pv) -> [ Term |[ CResolves(~ref, ~pv', ~dv, ~msg) ]| ]
    with
      ref := <binder-to-ref> Bind(ns, v)
    ; pv' := <try(wld-var)> pv
      
  constraint-to-terms(|msg):
    Declares(v, dv) -> [ Term |[CEqual(~dv, ~decl, ~msg)]| ]
    with
      decl := <binder-to-decl> v
      
  constraint-to-terms(|msg):
    HasScope(v, sv) -> [ Term |[ CAssoc(~v, ~sv, ~msg) ]| ]
   
  constraint-to-terms(|msg):
  	Match(pattern1, pattern2) -> [ Term |[ CEqual(~tp1, ~tp2, ~msg) ]| ]
  	with tp1 := <type-pattern> pattern1
  	   ; tp2 := <type-pattern> pattern2
