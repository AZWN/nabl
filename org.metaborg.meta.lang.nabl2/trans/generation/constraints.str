module generation/constraints

imports
  
  libstrc
  include/NameBindingLanguage2

rules
  
  constraint-to-strategies:
    HasType(_, v) -> [ |[ ~v := TVar(<NewTVar>) ]| ]
  
  constraint-to-strategies:
    Resolves(_, v) -> [ |[ ~v := DeclVar(<NewDeclVar>) ]| ]
    
  constraint-to-strategies:
    HasScope(_, v) -> [ |[ ~v := ScopeVar(<NewScopeVar>) ]| ]
  
  constraint-to-strategies:
    Match(_, pattern) -> str*
    with var* := <collect-all(?Var(_) + ?ListVar(_))> pattern
       ; str* := <map(!|[ ~<id> := TVar(<NewTVar>) ]|)> var*
  
  constraint-to-strategies:
    Success(c, _) -> str*
    with str* := <constraint-to-strategies> c
  
  constraint-to-strategies:
    Failure(c, _) -> str*
    with str* := <constraint-to-strategies> c
    
  constraint-to-term(|pos):
    Success(c, msg) -> t
    with pos' := <message-to-term> msg
    with t    := <constraint-to-term(|pos')> c
    
  constraint-to-term(|pos):
    Failure(c, msg) -> t
    with pos' := <message-to-term> msg
    with t    := <constraint-to-term(|pos')> c
         
  message-to-term:
    Message(_, _, t) -> Term |[ <get-position> t ]|
      
  constraint-to-term(|msg):
    HasType(v, tv) -> Term |[ CTypeOf(~v, ~tv, ~msg) ]|
   
  constraint-to-term(|msg):
    Resolves(v, dv) -> Term |[ CResolves(~v, ~dv, ~msg) ]|
   
  constraint-to-term(|msg):
    HasScope(v, sv) -> Term |[ CAssoc(~v, ~sv, ~msg) ]|
   
  constraint-to-term(|msg):
  	Match(v, pattern) -> Term |[ CEqType(~v, ~tp, ~msg) ]|
  	with tp := <try(type-pattern)> pattern
  	
  type-pattern:
  	Op(tc, t*) -> Term |[ TApp(~tc', ~tp*) ]|
  	with tc' := Str(<double-quote> tc)
  	   ; tp* := <map(try(type-pattern))> t*
  	     
  type-pattern:
  	Wld() -> Term |[ TVar(<NewTVar>) ]|
  	