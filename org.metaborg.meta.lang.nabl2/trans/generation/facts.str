module generation/facts

imports
  
  libstrc
  src-gen/signatures/rules/core/-
  
rules
  
  fact-to-strategy:
    NewScope(scope, _) -> |[ ~scope := Scope(<NewScope>) ]|

rules
    
  fact-to-terms:
    Declaration(term, scope, assoc-scope) -> [ Term |[ FDecl(~decl, ~scope) ]| , aconstr* ]
    with
      decl     := <binder-to-decl> term
    ; aconstr* := <assoc-scope-to-terms(|decl)> assoc-scope
  
  fact-to-terms:
    Reference(term, scope) -> [ Term |[ FRef(~ref, ~scope) ]| ]
    with
      ref := <binder-to-ref> term
  
  fact-to-terms:
    NamedImport(term, scope) -> [ Term |[ FImportR(~ref, ~scope) ]| ]
    with
      ref := <binder-to-ref> term
  
  fact-to-terms:
    DirectImport(v, scope) -> [ Term |[ FImportS(~v, ~scope) ]| ]
  
  fact-to-terms:
    NewScope(scope, Global()) -> [ Term |[ FParent(~scope, NoneScope()) ]| ]
  
  fact-to-terms:
    NewScope(scope, parent) -> [ Term |[ FParent(~scope, SomeScope(~parent)) ]| ]
    where not(Global() := parent)
    
  fact-to-terms:
  	SubType(ty1, ty2) -> [ Term |[ FSubType(~ty1', ~ty2', position) ]| ]
  	with
  	  ty1' := <type-pattern> ty1
  	; ty2' := <type-pattern> ty2
      
  assoc-scope-to-terms(|decl):
    None() -> []
    
  assoc-scope-to-terms(|decl):
    Assoc(scope) -> [ Term |[ FAssoc(~decl, ~scope) ]| ]

rules

  binder-to-decl: 
  	Bind(ns, term) -> Term |[ DeclId(~nst, ~term, <get-position> ~term) ]|
    with nst := <namespace-to-term> ns
    
  binder-to-ref: 
  	Bind(ns, term) -> Term |[ RefId(~ns, ~term, <get-position> ~term) ]|   
    with nst := <namespace-to-term> ns

  namespace-to-term: Name()        -> Term |[ None() ]|
  namespace-to-term: Namespace(ns) -> Term |[ Namespace(~ns) ]|
   
rules
   
  type-pattern:
    TApp(tc, cp*, t*) -> Term |[ TApp(~tc', [~tp*]) ]|
    with 
      tc' := Op(tc, cp*)
    ; tp* := <alltd(try(wld-var))> t*
       
  wld-var:
    Wld() -> Term |[ TVar(<NewTVar>) ]|
    
