module generation/facts

imports
  
  libstrc
  include/NameBindingLanguage2

rules
  
  fact-to-strategy:
    Scope(scope, _) -> |[ ~scope := Scope(<NewScope>) ]|

rules
    
  fact-to-terms:
    Declaration(term, InScope(scope), assoc-scope) -> [ Term |[ FDecl(~decl, ~scope) ]| , aconstr* ]
    with
      decl     := <term-to-decl> term
    ; aconstr* := <assoc-scope-to-terms(|decl)> assoc-scope
  
  fact-to-terms:
    Reference(term, InScope(scope)) -> [ Term |[ FRef(~ref, ~scope) ]| ]
    with
      ref := <term-to-ref> term
  
  fact-to-terms:
    Import(term, IntoScope(scope)) -> [ Term |[ FImportR(~ref, ~scope) ]| ]
    with
      ref := <term-to-ref> term
  
  fact-to-terms:
    ImportScope(v, IntoScope(scope)) -> [ Term |[ FImportS(~v, ~scope) ]| ]
  
  fact-to-terms:
    Scope(scope, None()) -> [ Term |[ FParent(~scope, NoneScope()) ]| ]
  
  fact-to-terms:
    Scope(scope, Parent(v)) -> [ Term |[ FParent(~scope, SomeScope(~v)) ]| ]
  
  assoc-scope-to-terms(|decl):
    None() -> []
    
  assoc-scope-to-terms(|decl):
    Assoc(scope) -> [ Term |[ FAssoc(~decl, ~scope) ]| ]  

  term-to-decl: term -> Term |[ DeclId(None(), ~term, <get-position> ~term) ]|

  term-to-ref: term -> Term |[ RefId(None(), ~term, <get-position> ~term) ]|