module generation/imports

imports

  include/NameBindingLanguage2
  generation/namespaces
  generation/util

rules
	
  clauses-to-imports-strategy(|term,scope) =
    collect-strategies(filter(imports-clause-to-strategy(|term,scope)))

  imports-clause-to-strategy(|term,scope):
    ImportClause([SingleImport(All(), NamespaceRef(CurrentLanguage(),ns),
                               name, [], Current(), None(), Current(),
                               NoWhere())])
      -> (|[ ~pos := <get-position> ~term
           ; ~ref := RefId(~ns',~name,~pos)
           ; ~decl := DeclVar(<NewDeclVar>)
           ; ~imports-c := [FRef(~ref,~scope), FImportR(~ref,~scope), CResolves(~ref,~decl,~pos)]
           ; ~imports-a := [~ref]
          ]|, imports-c, imports-a)
    with
      ns'   := <ns-name;str-op0> ns;
      pos   := <newname;str-var> "pos";
      ref   := <newname;str-var> "ref";
      decl  := <newname;str-var> "decl";
      imports-c := <newname;str-list-var> "imports-c";
      imports-a := <newname;str-list-var> "imports-a"

  imports-clause-to-strategy(|term,scope):
    ImportClause([SingleImport(All(), NamespaceRef(CurrentLanguage(),ns),
                               namev@VarRef(name), [], Current(), None(), Current(),
                               Where(ResolvesTo(subterm, NamespaceRef(CurrentLanguage(),ns), Var(name))))])
      -> (|[ ~ref := <get-refid(|~ns')> ~subterm
           ; ~imports-c := [FImportR(~ref,~scope)]
           ; ~imports-a := []
          ]|, imports-c, imports-a)
    with
      ns'   := <ns-name;str-op0> ns;
      ref   := <newname;str-var> "ref";
      imports-c := <newname;str-list-var> "imports-c";
      imports-a := <newname;str-list-var> "imports-a"

  imports-clause-to-strategy(|term,scope):
    ImportClause(_) -> <fail>
  with debug(!"IGNORED ")