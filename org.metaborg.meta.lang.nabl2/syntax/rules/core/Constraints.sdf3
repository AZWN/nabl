module rules/core/Constraints

imports 

  terms/Terms 
  terms/Vars
  common/Identifiers  
  rules/core/Messages
  rules/core/Facts
  
context-free syntax

  Constraint         = BaseConstraint
  Constraint.Success = <<BaseConstraint> and <Message>>
  Constraint.Failure = <<BaseConstraint> else <Message>>

  // pseudo-constraint
  Constraint.Declares = <<Binder> declares <Var>> 

context-free syntax

  BaseConstraint.Resolves = <<Term> resolves to <Namespace> <Var> through <Var>> 
  BaseConstraint.Match    = [[VarRef] == [Pattern]]
  BaseConstraint.HasType  = <<VarRef> : <Pattern>> 
  BaseConstraint.SubType  = [[Pattern] <: [Pattern]] 
  BaseConstraint.LubType  = [[Var] == lub ([Pattern], [Pattern])] {prefer} 
  BaseConstraint.HasScope = [[VarRef] is associated with scope [Var]]
  BaseConstraint.MkSub    = <<Var> == [<Term>/<Term>]>
  BaseConstraint.CmpSub   = <<Var> == <VarRef>.<VarRef>>
  BaseConstraint.ApplSub  = <<Pattern> == <VarRef>(<Pattern>)>
  
lexical syntax

  Keyword = "where"
