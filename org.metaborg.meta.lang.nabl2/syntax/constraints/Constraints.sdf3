module constraints/Constraints

imports 

  terms/Terms 
  terms/Vars  
  constraints/Messages
  
context-free syntax

  BaseConstraint.Match   = [[VarRef] == [Pattern]] 
  BaseConstraint.HasType = <<VarRef> has type <Type>> 
  BaseConstraint.HasType = <<VarRef> : <Type>> 
  BaseConstraint.SubType = [[VarRef] <: [Type]] 
  BaseConstraint.Resolves = <<VarRef> resolves to <Var>>
  BaseConstraint.HasScope = <<Term> has associated scope <Var>>

  Constraint         = <<BaseConstraint>>
  Constraint.Success = <<BaseConstraint> and <Message>>
  Constraint.Failure = <<BaseConstraint> else <Message>>
  
  Type      = Pattern
  
  Type.Type = <<Pattern>[<{Pattern ","}*>]>  