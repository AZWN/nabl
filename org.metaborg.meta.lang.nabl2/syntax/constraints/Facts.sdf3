module constraints/Facts

imports 

  terms/Terms 
  terms/Vars  
  constraints/Constraints
  
context-free syntax

  Fact.Scope       = <new scope <Var> <Parent>>
  Fact.Declaration = <declares <Term> <InScope> <AssocScope>>
  Fact.Reference   = <references <Term> <InScope>>
  Fact.Import      = <imports <Term> <IntoScope>>
  Fact.ImportScope = <imports from <VarRef> <IntoScope>>

  InScope.CurrentScope = 
  InScope.InScope      = <in <VarRef>>

  IntoScope.CurrentScope = 
  IntoScope.IntoScope    = <into <VarRef>>

  AssocScope.None  = 
  AssocScope.Assoc = <with associated scope <VarRef>>
  
  Parent.NoParent = <without parent>
  Parent.Parent   = <with parent <VarRef>>
  
  // sugar
  Parent.None     = 

  Fact.HasType = <<VarRef> : <Type>> 
  Fact.SubType = [[VarRef] <: [Type]] 
  
lexical syntax

  Keyword = "scope"
  Keyword = "declaration"
  Keyword = "reference"
  Keyword = "import"
  Keyword = "with"
  Keyword = "without"
  