module statics/syntax

signature

  sorts ID = string

  sorts Program constructors                                                     // prog :=
    Program : list(ClassDecl) -> Program                                         //       | L*
    Let     : list(ClassDecl) * Exp -> Program                                   //       | let L* in e

  sorts TypeExp constructors                                                     // T :=
    TVar   : ID -> TypeExp                                                       //    | X
    CTE2TE : ClassTypeExp -> TypeExp                                             //    | N

  sorts ClassTypeExp constructors                                                // N :=
    ClassT : ID * list(TypeExp) -> ClassTypeExp                                  //    | C<T*>

  sorts ClassDecl constructors                                                   // L :=
    ClassDecl : ID * list(TVarDecl) * ClassTypeExp *                             //    | class C<V*> <: N { F* K M* }
                list(FieldDecl) * CtorDecl * list(MethodDecl) -> ClassDecl

  sorts TVarDecl constructors                                                    // V :=
    TVarDecl : ID * ClassTypeExp -> TVarDecl                                     //    | X <: N

  sorts FieldDecl constructors                                                   // F :=
    FieldDecl : TypeExp * string -> FieldDecl                                    //    | T f;

  sorts CtorDecl constructors                                                    // K :=
    CtorDecl : ID * list(Param) * list(Exp) * list(FieldInit) -> CtorDecl        //    | C(P*) { super(e*); finit* }

  sorts FieldInit constructors                                                   // finit :=
    FieldInit : ID * Exp -> FieldInit                                            //        | this.f = e;

  sorts MethodDecl constructors                                                  // M :=
    MethodDecl : list(TVarDecl) * TypeExp * ID *                                 //    | <V*> T m(P*) { return e; }
                 list(Param) * Exp -> MethodDecl

  sorts Param constructors                                                       // P :=
    Param : TypeExp * ID -> Param                                                //    | T x

  sorts Exp constructors                                                         // e :=
    Var     : ID -> Exp                                                          //    | x
    Fld     : Exp * ID -> Exp                                                    //    | e.f
    Call    : Exp * list(TypeExp) * ID * list(Exp) -> Exp                        //    | e.<T*>m(e*)
    New     : ClassTypeExp * list(Exp) -> Exp                                    //    | new N(e*)
    Cast    : TypeExp * Exp -> Exp                                               //    | (N)e
    Ascribe : Exp * TypeExp -> Exp                                               //    | e:T
