module statics // Static semantics of STLCrec using scopes-as-types

signature

  sorts ID = string                                  // x

  sorts Exp constructors                             // e :=
    Unit    : Exp                                    //    | unit
    Num     : int -> Exp                             //    | n
    Plus    : Exp * Exp -> Exp                       //    | e + e
    Fun     : ID * TypeExp * Exp -> Exp              //    | fun (x : te) { e }
    Var     : ID -> Exp                              //    | x
    App     : Exp * Exp -> Exp                       //    | e e
    Rec     : list(Bind) -> Exp                      //    | { b* }
    FAccess : Exp * ID -> Exp                        //    | e.x
    ERec    : Exp * Exp -> Exp                       //    | e extends e
    With    : Exp * Exp -> Exp                       //    | with e do e
    TypeLet : ID * TypeExp * Exp -> Exp              //    | type x = te in e
    Let     : list(Bind) * Exp -> Exp                //    | let b+ in e
    TAS     : Exp * TypeExp -> Exp                   //    | e : te

  sorts Bind constructors                            // b :=
    Bind : ID * Exp -> Bind                          //    | x = e

  sorts TypeExp constructors                         // te :=
    UnitType : TypeExp                               //     | unit
    NumType  : TypeExp                               //     | num
    FunType  : TypeExp * TypeExp -> TypeExp          //     | te -> te
    RecType  : list(Decl) -> TypeExp                 //     | { d* }
    ERecType : TypeExp * TypeExp -> TypeExp          //     | te extends te
    TypeRef  : ID -> TypeExp                         //     | x

  sorts Decl constructors                            // d :=
    Decl : ID * TypeExp -> Decl                      //    | x : te

  sorts Type constructors
    UNIT  : Type
    NUM   : Type
    FUN   : Type * Type -> Type
    REC   : scope -> Type

  relations
    typeOfDecl : occurrence -> scope

  namespaces
    Var  : string
    Fld  : string
    Type : string

  name-resolution
    labels P R E
    resolve Fld filter (R|E)* min $ < R, $ < E, R < E
    resolve Type filter P* min $ < P

rules

  projectOK : scope

  projectOK(s).


  fileOK : scope * Exp

  fileOK(_, e) :- {s T}
    new s,
    typeOfExp(s, e) == T.

rules

  typeOfExp : scope * Exp ->  Type

  [T-Unit]
  typeOfExp(s, Unit()) = UNIT().

  [T-Num]
  typeOfExp(s, Num(_)) = NUM().

  [T-Plus]
  typeOfExp(s, Plus(e1, e2)) = NUM() :-
    typeOfExp(s, e1) == NUM(),
    typeOfExp(s, e2) == NUM().

  [T-Fun]
  typeOfExp(s, Fun(x, te, e)) = FUN(S, T) :- {s_fun}
    typeOfTypeExp(s, te) == S,
    new s_fun, s_fun -P-> s,
    s_fun -> Var{x} with typeOfDecl withType(S),
    typeOfExp(s_fun, e) == T.

  [T-Var]
  typeOfExp(s, v@Var(x)) = typeOf(T) :- {d} @x.ref := varOrFldPos(d),
    query typeOfDecl
          filter P*(R|E)* and { d :- varOrFld(x, d) }
          min $ < P, $ < R, $ < E, R < P, R < E and true
          in s |-> [(_, (d, T))].

  [T-App]
  typeOfExp(s, App(e1, e2)) = T :- {S U}
    typeOfExp(s, e1) == FUN(S, T),
    typeOfExp(s, e2) == U,
    subType(U, S).

  [T-Rec]
  typeOfExp(s, Rec(finits)) = REC(rs) :-
    new rs, fieldInitsOK(s, finits, rs).

  [T-ERec]
  typeOfExp(s, ERec(e1, e2)) = REC(rs) :- {rs1 rs2}
    typeOfExp(s, e1) == REC(rs1),
    typeOfExp(s, e2) == REC(rs2),
    new rs, rs -R-> rs1, rs -E-> rs2.

  [T-With]
  typeOfExp(s, With(e1, e2)) = T :- {rs s_with}
    typeOfExp(s, e1) == REC(rs),
    new s_with, s_with -R-> rs, s_with -P-> s,
    typeOfExp(s_with, e2) == T.

  [T-FAccess]
  typeOfExp(s, FAccess(e, x)) = typeOf(T) :- {rs x'} @x.ref := x',
    typeOfExp(s, e) == REC(rs),
    typeOfDecl of Fld{x} in rs |-> [(_, (Fld{x'}, T))].

  [T-TypeLet]
  typeOfExp(s, TypeLet(x, te, e)) = S :- {s_let}
    new s_let, s_let -P-> s,
    s_let -> Type{x} with typeOfDecl withType(typeOfTypeExp(s, te)),
    typeOfExp(s_let, e) == S.

  [T-Let]
  typeOfExp(s, Let(binds, e)) = T :- {s_let}
    new s_let, s_let -P-> s,
    letBindsOK(s, binds, s_let),
    typeOfExp(s_let, e) == T.

  [T-TAS]
  typeOfExp(s, TAS(e, te)) = T :- {S}
    typeOfExp(s, e) == S,
    typeOfTypeExp(s, te) == T,
    subType(S, T).

rules

  letBindOK : scope * Bind * scope
  letBindsOK maps letBindOK(*, list(*), *)

  [T-Bind]
  letBindOK(s, Bind(x, e), s_bnd) :-
    s_bnd -> Fld{x} with typeOfDecl withType(typeOfExp(s, e)).

rules

  fieldInitOK : scope * Bind * scope
  fieldInitsOK maps fieldInitOK(*, list(*), *)

  [T-FieldInit]
  fieldInitOK(s, Bind(x, e), rs) :- {T}
    rs -> Fld{x} with typeOfDecl withType(typeOfExp(s, e)),
    unique(x, rs).

  unique : ID * scope
  unique(x, s) :-
    Fld{x} in s |-> [_].

rules

  typeOfTypeExp : scope * TypeExp ->  Type

  [TE-Unit]
  typeOfTypeExp(s, UnitType()) = UNIT().

  [TE-Num]
  typeOfTypeExp(s, NumType()) = NUM().

  [TE-Fun]
  typeOfTypeExp(s, FunType(te1, te2)) = FUN(T1, T2) :-
    typeOfTypeExp(s, te1) == T1,
    typeOfTypeExp(s, te2) == T2.

  [TE-Rec]
  typeOfTypeExp(s, RecType(ftypes)) = REC(rs) :-
    new rs, fieldTypesOK(s, ftypes, rs).

  [TE-ERec]
  typeOfTypeExp(s, ERecType(te1, te2)) = REC(rs) :- {rs1 rs2}
    typeOfTypeExp(s, te1) == REC(rs1),
    typeOfTypeExp(s, te2) == REC(rs2),
    new rs, rs -R-> rs1, rs -E-> rs2.

  [TE-Ref]
  typeOfTypeExp(s, TypeRef(x)) = typeOf(T) :- {x'} @x.ref := x',
    typeOfDecl of Type{x} in s |-> [(_, (Type{x'}, T))].

rules

  fieldTypeOK : scope * Decl * scope
  fieldTypesOK maps fieldTypeOK(*, list(*), *)

  [TE-Decl]
  fieldTypeOK(s, Decl(x, te), rs) :-
    rs -> Fld{x} with typeOfDecl withType(typeOfTypeExp(s, te)),
    unique(x, rs).

rules

  subType  : Type * Type
  subField : scope * (path * occurrence)
  subFields maps subField(*, list(*))

  subType(UNIT(), UNIT()).

  subType(NUM(), NUM()).

  subType(FUN(S1, T1), FUN(S2, T2)) :- subType(S2, S1), subType(T1, T2).

  subType(REC(s_sub), REC(s_sup)) :- subFields(s_sub, allFields(s_sup)).

  subField(s_sub, (p_sup, d_sup@Fld{x})) :- {S T}
    S == ?typeOfDecl[d_sup] in dst(p_sup),
    typeOfDecl of Fld{x} in s_sub |-> [(_, (_, T))],
    subType(typeOf(T), typeOf(S)).

  allFields: scope -> list((path * occurrence))
  allFields(s) = ps :-
    query decl
          filter (R|E)* and { Fld{_} }
          min $ < R, $ < E, R < E and { Fld{x}, Fld{x} }
          in s |-> ps.

rules

  varOrFld : string * occurrence

  varOrFld(x, Var{x}).
  varOrFld(x, Fld{x}).

  varOrFldPos : occurrence -> ID

  varOrFldPos(Var{x}) = x.
  varOrFldPos(Fld{x}) = x.

rules

  dst : path -> scope
  dst(_PathEmpty(s)) = s.
  dst(_PathStep(_, _, s)) = s.

signature

  relations
    typeOf : -> Type
    
rules

  typeOf : scope -> Type
  
  typeOf(s) = T :-
    query typeOf
      filter e and true
      min /* */ and true
      in s |-> [(_, T)].
      
      
  withType : Type -> scope
  
  withType(T) = s :-
    new s, !typeOf[T] in s.
  