module statix/lang/Type

imports

  nabl2/API

  statix/lang/Common
  statix/lang/Core

sorts

  IType // internal type
  TType // term type

context-free syntax

  IType.PRED = [[TTypes]]
  IType.FUN  = [[TTypes] -> [TType]]
  IType.NS   = [[TTypes]]
  IType.OP   = [[TTypes] -> [TType]]

  TTypes = {TType " * "}*

  TType.SORT       = <<NaBL2Occurrence>>
  TType.INT        = <int>
  TType.STRING     = <string>
  TType.PATH       = <path>
  TType.LABEL      = <label>
  TType.OCCURRENCE = <occurrence>
  TType.AST_ID     = <astId>
  TType.SCOPE      = <scope>
  TType.LIST       = <list(<TType>)>
  TType.TUPLE      = <(<TTypes>)>

sorts

  ExtOrigin // custom prettyprint rule in statix/lang/scope-extension.str

context-free syntax

  ExtConstraints = <| <{ExtConstraint "\n"}*>>

  ExtConstraint.ExtProvides  = [[ExtSet] ! [ExtSet][ExtOrigin]]
  ExtConstraint.ExtRequires  = [[ExtSet] ? [ExtSet][ExtOrigin]]
  ExtConstraint.ExtIsCovered = [[ExtSet] is closed[ExtOrigin]]
  ExtConstraint.ExtBarrier   = [[ExtBarrier] is barrier]


  ExtSets = <| <{ExtSet "\n"}*>>

  ExtSet.ExtParam = [[ExtId].[Int]]
  ExtSet.ExtVar   = [[ExtId]]
  ExtSet.ExtLit   = [{[{ExtLabel ", "}*]}]
  ExtSet.ExtAll   = "*"
  ExtSet.ExtNone  = "0"


  ExtBarriers = <| <{ExtBarrier "\n"}*>>

  ExtBarrier = ID
  ExtBarrier = NaBL2Scope


  ExtId = ID
  ExtId = NaBL2Occurrence


  ExtLabel = RelRef
  ExtLabel = EdgeRef


  ExtEqs = <| <{ExtEq "\n"}*>>

  ExtEq = [[ExtSet] := [ExtOp]]


  ExtOp.Union        = [union([{ExtOp ", "}*])]
  ExtOp.Intersection = [isect([{ExtOp ", "}*])]
  ExtOp              = ExtSet
