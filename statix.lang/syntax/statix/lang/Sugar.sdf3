module statix/lang/Sugar

imports

  statix/lang/Common
  statix/lang/Core

template options

  keyword -/- [a-zA-Z0-9\_\-\']

/******************************************************************
 * User Constraints                                               *
 ******************************************************************/

context-free syntax

  // lifting of constraints

  Rule             = <constraint <CDerive>>
  Rule             = CDerive

  Rule.CDecl       = [[CInd]constraint [ConstraintId] : [Type]]
  Rule.CDecl       = [[CInd][ConstraintId] : [Type]]

  CDecl            = CDerive

  CDerive.CDeriveMap = [[ConstraintId] maps [ConstraintId]([{Lift ", "}*])]
  CDerive.FDeriveMap = [[ConstraintId] maps [ConstraintId]([{Lift ", "}*]) = [Lift]]

  Lift.IdLift     = "*"
  Lift.ListLift   = "list(*)"
  Lift.Tuple0Lift = <( )>
  Lift.TupleNLift = <(<Lift>, <{Lift ", "}+>)>

  // rule shorthands

  Rule.AxiomRule = <
    <RuleHead>.
  >

  RuleHead.F = [[ConstraintId]([{Term ", "}*]) = [Term]]

  LocalVars.NoLocalVars = <>

  HoConstraint.LLam = <{ <{Term ", "}+> }>

  HoConstraint.LC = ConstraintId

syntax

  Term-CF.COp = ConstraintId-CF "(" LAYOUT?-CF CommaTerms-CF LAYOUT?-CF ")"

/******************************************************************
 * Base Constraints                                               *
 ******************************************************************/

context-free syntax

  HoConstraint.LTrue  = "true"
  HoConstraint.LFalse = "false"

  Term.NewOp    = "new"
  Term.TermIdOp = <termId(<Term>)>

lexical syntax

  VARID = "new" {reject}

/******************************************************************
 * Relations                                                      *
 ******************************************************************/

context-free syntax

syntax

  // short-hand for querying relations

  Constraint-CF.CAskRel  = "?" LabelRef-CF "[" CommaTerms-CF "]" LAYOUT?-CF "in" LAYOUT?-CF Term-CF

  Term-CF.AskRelOp = "?" LabelRef-CF "[" LAYOUT?-CF CommaTerms-CF LAYOUT?-CF "]" LAYOUT?-CF "in" LAYOUT?-CF Term-CF

lexical syntax

  RelationId = "decl" {reject}
  RelationId = "ref" {reject}

/******************************************************************
 * Scope Graph                                                    *
 ******************************************************************/

context-free syntax

  // default resolution policies
  NamespaceQuery.NamespaceQuery = <resolve <NamespaceId><NamespaceFilter><NamespaceMin>>

  ResolutionParam = NamespaceQuery
  Rule            = NamespaceQuery

  NamespaceFilter.NamespaceFilter   = < filter <LabelRE>>
  NamespaceFilter.NoNamespaceFilter = 

  NamespaceMin.NamespaceMin   = < min <LabelPairs>>
  NamespaceMin.NoNamespaceMin = 

  Constraint.CTellDecl        = [[Term] -> [Occurrence]]
  Constraint.CTellDeclWithRel = [[Term] -> [Occurrence] with [LabelRef] [Term]]

//LabelRE = <<LabelRE>?>
//LabelRE = <<LabelRE>+>

syntax

  HoConstraint-CF.LPathMatch  = "pathMatch" "[" LAYOUT?-CF LabelRE-CF LAYOUT?-CF "]"
  HoConstraint-CF.LPathLt     = "pathLt" "[" LAYOUT?-CF LabelOrd-CF LAYOUT?-CF "]"

/******************************************************************
 * Resolve & Query
 ******************************************************************/

context-free syntax

  // short-hand forms for occurrences using default resolution policies

  QueryFilter.NoFilter =
  QueryFilter.Filter   = < filter <LabelRE>>


  QueryMin.NoMin =
  QueryMin.Min   = < min <LabelOrd>>

  Constraint.CResolveRef        = [[Occurrence] in [Term] |-> [Term]]
  Constraint.CResolveRefWithRel = [[LabelRef] of [Occurrence] in [Term] |-> [Term]]

syntax

  LabelRE-CF.ResolveMatch = "resolveMatch" "[" LAYOUT?-CF Occurrence-CF LAYOUT?-CF  "," LAYOUT?-CF LabelRef-CF LAYOUT?-CF "]"

  LabelOrd-CF.ResolveLt = "resolveLt" "[" LAYOUT?-CF Occurrence-CF LAYOUT?-CF "," LAYOUT?-CF LabelRef-CF LAYOUT?-CF "]"

  HoConstraint-CF.OccurrenceMatch = "occurrenceMatch" "[" LAYOUT?-CF Occurrence-CF LAYOUT?-CF "]"

lexical syntax

  Keyword = "resolveMatch" | "resolveLt"

/******************************************************************
 * Sorts & Constructors                                           *
 ******************************************************************/

context-free syntax

  Type.FunType    = [[{SortRef " * "}*] -> [SortRef]]

/******************************************************************
 * Terms                                                          *
 ******************************************************************/
