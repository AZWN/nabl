module Sugar

imports

  Common
  Core

template options

  keyword -/- [a-zA-Z0-9\_\-\']

/******************************************************************
 * User Constraints                                               *
 ******************************************************************/

context-free syntax

  // lifting of constraints

  Rule             = <constraint <CDerive>>
  Rule             = CDerive

  Rule.CDecl       = [[CInd]constraint [ConstraintId] : [Type]]
  Rule.CDecl       = [[CInd][ConstraintId] : [Type]]

  CDecl            = CDerive

  CDerive.CDeriveMap = [[ConstraintId] maps [ConstraintId]([{LiftSort ", "}*])]

  LiftSort.Id     = "*"
  LiftSort.ToList = "list(*)"

  // rule shorthands

  Rule.AxiomRule = <
    <RuleHead>.
  >
  Rule.GuardRule = <
    <RuleHead> | <LocalVars>
      <Constraint>.
  >
  Rule.BodyRule = <
    <RuleHead> :- <LocalVars>
      <Constraint>.
  >

  RuleHead.F = [[ConstraintId]([{Term ", "}*]) = [Term]]

  LocalVars.NoLocalVars = <>

  HoConstraint.LLam = <{ <{Term ", "}+> }>
  HoConstraint.LLam = <{ <{Term ", "}+> :- <LocalVars> <Constraint> }>

syntax

  Term-CF.COp = ConstraintId-LEX "(" LAYOUT?-CF CommaTerms-CF LAYOUT?-CF ")"

/******************************************************************
 * Base Constraints                                               *
 ******************************************************************/

context-free syntax

  HoConstraint.LTrue  = "true"
  HoConstraint.LFalse = "false"

  Term.NewOp = "new"

lexical syntax

  VARID = "new" {reject}

/******************************************************************
 * Relations                                                      *
 ******************************************************************/

context-free syntax

  // built-in relations for declarations

  RelRef.Decl = "decl"

syntax

  // short-hand for querying relations

  Constraint-CF.CAskRel  = "?" RelRef-CF "[" CommaTerms-CF "]" LAYOUT?-CF "in" LAYOUT?-CF Term-CF

  Term-CF.AskRelOp = "?" RelRef-CF "[" LAYOUT?-CF CommaTerms-CF LAYOUT?-CF "]" LAYOUT?-CF "in" LAYOUT?-CF Term-CF

context-free priorities

  { Term.PathSrcOp Term.PathScopesOp Term.PathLabelsOp Term.PathDstOp } >
  { Term.AskRelOp }

lexical syntax

  RelationId = "decl" {reject}
  RelationId = "ref" {reject}

/******************************************************************
 * Scope Graph                                                    *
 ******************************************************************/

context-free syntax

  // declaration constraints

  Constraint.CTellDecl        = [[Term] -> [Term]]
  Constraint.CTellDeclWithRel = [[Term] -> [Term] with [RelRef] [Term]]

  Term.PathSrcOp    = <src(<Term>)>
  Term.PathDstOp    = <dst(<Term>)>
  Term.PathScopesOp = <scopes(<Term>)>
  Term.PathLabelsOp = <labels(<Term>)>

syntax

  HoConstraint-CF.LPathMatch  = "pathMatch" "[" LAYOUT?-CF LabelRE-CF LAYOUT?-CF "]"
  HoConstraint-CF.LPathLt     = "pathLt" "[" LAYOUT?-CF LabelPairs-CF LAYOUT?-CF "]"

/******************************************************************
 * Resolve & Query
 ******************************************************************/

context-free syntax

  // short-hand forms for occurrences using default resolution policies

  QueryFilter.NoFilter =
  QueryFilter.Filter   = < filter <HoConstraint>>

  QueryMin.NoMin =
  QueryMin.Min   = < min <HoConstraint>>

  Constraint.CResolveDecl        = [[Term] in [Term] |-> [Term]]
  Constraint.CResolveRel         = [[RelRef] of [Term] in [Term] |-> [Term]]

/******************************************************************
 * Sorts & Constructors                                           *
 ******************************************************************/

context-free syntax

  // convenient sort aliases

  SortDecl.SortAlias = <<SortId> = <SortRef>>
