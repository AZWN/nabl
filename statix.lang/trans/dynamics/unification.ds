module dynamics/unification

signature

  native datatypes
    "mb.nabl2.terms.ITerm" as ITerm {}

  native operators
    buildVar    : String               -> ITerm
    buildInt    : String               -> ITerm
    buildString : String               -> ITerm
    buildAppl   : String * List(ITerm) -> ITerm
    buildTuple  : List(ITerm)          -> ITerm
    buildNil    :                         ITerm
    buildCons   : ITerm * ITerm        -> ITerm

    matchInt    : ITerm -> List(String)
    matchString : ITerm -> List(String)
    matchAppl   : ITerm -> List((String * List(ITerm)))
    matchTuple  : ITerm -> List(List(ITerm))
    matchNil    : ITerm -> List(Unit)
    matchCons   : ITerm -> List((ITerm * ITerm))

signature

  sorts
    UnifyResult
    Unit

  constructors
    Unit : Unit

    UnifyFail : UnifyResult
    UnifyOkay : UnifyResult

  native datatypes
    "mb.nabl2.terms.unification.IUnifier" as IUnifier {}

  native operators
    newUnifier : IUnifier

  components
    U : IUnifier

  arrows
    unify(ITerm, ITerm) :: U --> UnifyResult :: U
    unifys(List(ITerm), List(ITerm)) :: U --> UnifyResult :: U
    match(ITerm, ITerm) :: U --> UnifyResult :: U
    matchs(List(ITerm), List(ITerm)) :: U --> UnifyResult :: U

signature // private

  sorts
    UnifyResult_

  constructors
    UnifyFail_ :                        UnifyResult_
    UnifyOkay_ : IUnifier * IUnifier -> UnifyResult_

  native operators
    match_ : IUnifier * ITerm * ITerm -> UnifyResult_
    unify_ : IUnifier * ITerm * ITerm -> UnifyResult_

rules

    unifys([], []) --> UnifyOkay()

    unifys([l|ls], [r|rs]) --> result
      where case unify(l,r) of {
              UnifyFail() =>
                UnifyFail() => result
              UnifyOkay() =>
                unifys(ls, rs) --> result
            }

    unify(left, right) :: U --> result :: U'
      where case unify_(U, left, right) of {
              UnifyFail_() =>
                U => U';
                UnifyFail() => result
              UnifyOkay_(_, U') =>
                UnifyOkay() => result
            }

    matchs([], []) --> UnifyOkay()

    matchs([p|ps], [t|ts]) --> result
      where case match(p,t) of {
              UnifyFail() =>
                UnifyFail() => result
              UnifyOkay() =>
                matchs(ps, ts) --> result
            }

    match(pattern, term) :: U --> result :: U'
      where case match_(U, pattern, term) of {
              UnifyFail_() =>
                U => U';
                UnifyFail() => result
              UnifyOkay_(_, U') =>
                UnifyOkay() => result
            }
