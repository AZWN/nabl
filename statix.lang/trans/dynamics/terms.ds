module dynamics/terms

imports

  dynamics/sig-fixes
  ds-signatures/StatixLang-sig
  ds-signatures/NoParse-sig
  dynamics/unification

signature

  sort aliases
    Sub = Map(String, ITerm)

  components
    S : Sub

  arrows
    S |- buildTerm(Term) --> ITerm
    S |- buildTerms(List(Term)) --> List(ITerm)

    matchTerm(Term, ITerm) --> List(Sub)
    matchTerms(List(Term), List(ITerm)) --> List(Sub)

rules

  S |- buildTerm(Var(x)) --> S[x]

  buildTerm(Int(i)) --> buildInt(i)

  buildTerm(Op(x, ts)) --> buildAppl(x, buildTerms(ts))

  buildTerm(Tuple(ts)) --> buildTuple(buildTerms(ts))

  buildTerm(List_([])) --> buildNil()
  buildTerm(List_([t|ts])) --> buildCons(buildTerm(t), buildTerm(List_(ts)))

  buildTerm(ListTail(ts,t)) --> buildCons(buildTerm(List_(ts)), buildTerm(t))

  buildTerm(Ascribe(t,_)) --> buildTerm(t)

  buildTerm(As(_,t)) --> buildTerm(t)

  buildTerms([]) --> []
  buildTerms([t|ts]) --> [buildTerm(t):ITerm|buildTerms(ts):List(ITerm)]

rules

  matchTerm(Var(x), t) --> [ S ]
    where { /*x |â€“> t*/ } => S

  matchTerm(Int(i), t) --> result
    where case matchInt(t) of {
      [i]       => [{}] => result
      otherwise => [] => result
    }

  matchTerm(Op(x, ps), t) --> result
    where case matchAppl(t) of {
      [(x, ts)] => matchTerms(ps, ts) --> result
      otherwise => [] => result
    }

  matchTerm(Tuple(ps), t) --> result
    where case matchTuple(t) of {
      [ts]      => matchTerms(ps, ts) --> result
      otherwise => [] => result
    }

  matchTerm(List_([]), t) --> result
    where case matchNil(t) of {
      [_]       => [{}] => result
      otherwise => [] => result
    }
  matchTerm(List_([p|ps]), t) --> result
    where case matchCons(t) of {
      [(x, xs)] => matchTerm(p, x) --> R; case R of {
        [S] => matchTerm(List_(ps), xs) --> Rs; case Rs of {
          [Ss]      => [{ S, Ss }] => result
          otherwise => [] => result
        }
        otherwise => [] => result
      }
      otherwise => [] => result
    }

  matchTerm(ListTail([], p), t) --> matchTerm(p, t)
  matchTerm(ListTail([p|ps], tl), t) --> result
    where case matchCons(t) of {
      [(x, xs)] => matchTerm(p, x) --> R; case R of {
        [S] => matchTerm(ListTail(ps, tl), xs) --> Rs; case Rs of {
          [Ss]      => [{ S, Ss }] => result
          otherwise => [] => result
        }
        otherwise => [] => result
      }
      otherwise => [] => result
    }

  matchTerm(Ascribe(p,_), t) --> matchTerm(p, t)

  matchTerm(As(Var(x), p), t) --> result
    where { /*x |-> t*/ } => S;
          matchTerm(p, t) --> R; case R of {
            [Ss] =>      [{ S, Ss }] => result
            otherwise => [] => result
          }

  matchTerms([], []) --> [{}]
  matchTerms([p|ps], [t|ts]) --> result
    where matchTerm(p, t) --> R; case R of {
      [S] => matchTerms(ps, ts) --> Rs; case Rs of {
        [Ss]      => [{ S, Ss }] => result
        otherwise => [] => result
      }
      otherwise => [] => result
    }
