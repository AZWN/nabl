module statix/test/scope-extension

imports

  signatures/statix/test/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/scope-extension/-

rules

  base-extensions(|error-iset, note-iset): Test(_, body, section*) -> ext*
    with new-var* := <all-fresh> body;
         all-ext*   := <collect-om(base-extension);concat> body;

         new-ext*   := <filter(\ (v, lbl) -> (v, lbl) where <raw-elem> (v, new-var*) \)> all-ext*;
       //<map(\ (v, lbl) -> <iset-add(|(v, $[Extends locally fresh scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> note-iset \)> new-ext*;

         local-ext* := <filter(not(base-extends(|new-var*)))> all-ext*;
         <map(\ (v, lbl) -> <iset-add(|(v, $[Cannot extend non-local scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> error-iset \)> local-ext*;

         ext* := <collect-om(base-extensions(|error-iset, note-iset));concat> section*


rules

  derived-extensions(|ext, error-iset, note-iset): Test(_, body, section*) -> ext*
    with (y, i, lbl) := ext;
         new-var* := <all-fresh> body;
         all-ext*   := <collect-om(derive-extension(|y, i))> body;

         new-ext*   := <filter(\ v -> v where <raw-elem> (v, new-var*) \)> all-ext*;
       //<map(\ v -> <iset-add(|(v, $[Extends locally fresh scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> note-iset \)> new-ext*;

         local-ext* := <filter(not(derive-extends(|new-var*)))> all-ext*;
         <map(\ v -> <iset-add(|(v, $[Cannot extend non-local scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> error-iset \)> local-ext*;

         ext* := <collect-om(derived-extensions(|ext, error-iset, note-iset));concat> section*
