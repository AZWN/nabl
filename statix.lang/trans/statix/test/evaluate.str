module statix/test/evaluate

imports

  nabl2/api
  
  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/normalize

  signatures/statix/test/-
  pp/statix/test/-
  statix/test/-
  
  statix/api
  statixruntime
  statix/runtime/analysis

signature
  constructors
    SUCCEEDS : TestResult
    FAILS    : TestResult

rules
  
  editor-evaluate:
      (_, _, Module(_, _), path, project-path) -> None()

  editor-evaluate:
      (_, _, ast@Test(_, _, _), path, project-path) -> (filename, result)
    with result := <evaluate;pp-Statix-string(prettyprint-Statix-TestResult)> ast;
         filename := <guarantee-extension(|"stxresult")> path

rules

  evaluate-test: ast -> result
    with if (_, [], _, _) := <evaluate> ast then
           result := SUCCEEDS()
         else
           result := FAILS()
         end

  evaluate: ast@Test(_, _, _) -> result
    with a      := <nabl2-get-ast-analysis> ast;
         CustomAnalysis(ext) := <nabl2-get-custom-analysis> a;
         ast'   := <normalize(|a)> ast;
         Test(bvs, body, _) := ast';
         spec   := <core-ast-to-spec-aterm> (ast', ext);
         level  := <stx--log-level>;
         body'  := <eliminate-all;stx--index-ast(|""/*path*/)> body;
         s@Solution(_, a') := <stx--solve-constraint(|spec, level)> (bvs, body');
         (error*, warning*, note*) := <stx--delays-as-errors;stx--extract-messages> a';
         result := (s, error*, warning*, note*)
