module statix/lang/analysis

imports

  libspoofax/analysis/constraint

  nabl2shared
  nabl2/shared/ast // for index-ast
  nabl2runtime
  nabl2/api
  nabl2/runtime/analysis/main
  nabl2/runtime/analysis/query // for private set-custom-analysis

  signatures/statix/lang/-

  statix/lang/statics/-
  statix/lang/normalize/-

  pp

rules // Analysis

  editor-analyze:
      AnalyzeSingle(change*) -> AnalysisResult(result*)
    with
      ast* := <filter((id, ?Added(<id>) + ?Changed(<id>, _)))> change*
    ; result* := <map({ resource, ast, ast', a', error*, warning*, note*:
                        ?(resource, ast)
                      ; ( (ast', a', error*, warning*, note*) :=
                              <editor--analyze> (resource, ast)
                        < !(resource, Full(ast', a', error*, warning*, note*))
                        + !(resource, Failed())
                        )
                      })> ast*

  editor--analyze:
      (resource, ast) -> (ast'', result, error*, warning*, note*)
    with nabl2-custom-analysis-info-msg(|"Desugaring AST...");
         ast' := <desugar-all> ast;
         nabl2-custom-analysis-info-msg(|"Desugared AST.");

         nabl2-custom-analysis-info-msg(|"Normalizing AST...");
         < step( analyze(|resource)
               , normalize-mapping-constraints
               ; normalize-functional-constraints
               ; normalize-ho-constraints
               ; normalize-resolves
               ; normalize-queries
         , step( analyze(|resource)
               , normalize-functional-relations
               ; normalize-terms
               , analyze(|resource)
         ))> ast';
         ?(ast'', a', e*, w*, n*);

         nabl2-custom-analysis-info-msg(|"Detecting overlapping rules...");
         or-e* := <detect-overlapping-rules> ast';

         nabl2-custom-analysis-info-msg(|"Computing scope extensions...");
         (ext*, ext-e*, ext-w*, ext-n*) := <compute-scope-extensions> ast'';

         result := <nabl2--set-custom-analysis(|a')> ext*;
         error*   := [e*, ext-e*, or-e*];
         warning* := [w*, ext-w*];
         note*    := [n*, ext-n*]

  analyze(|resource) = try(Snd); // accept ast or (a, ast)
    nabl2-custom-analysis-info-msg(|"| Analyzing...");
    nabl2-erase-ast-indices;nabl2-analyze-ast(|resource)

  step(a,s,k) =
    a;
    if ?(ast, a, [], _, _) then
      nabl2-custom-analysis-info-msg(|"| Transforming...");
      <keep-origin(s)> (a, ast);
      k
    else
      nabl2-custom-analysis-info-msg(|"| ERRORS DURING TRANSFORMATION")
    end

  nabl2-prettyprint-hook   = prettyprint-Statix-IType
  prettyprint-Statix-IType = nabl2-prettyprint-term

  nabl2-prettyprint-hook   = prettyprint-Statix-TType
  prettyprint-Statix-TType = nabl2-prettyprint-term
