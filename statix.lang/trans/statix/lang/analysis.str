module statix/lang/analysis

imports

  libspoofax/analysis/constraint

  nabl2shared
  nabl2/shared/ast // for index-ast
  nabl2runtime
  nabl2/api
  nabl2/runtime/analysis/main
  nabl2/runtime/transform/query // for private set-custom-analysis

  signatures/statix/lang/-

  statix/lang/statics/-
  statix/lang/normalize
  statix/lang/scope-extension

  pp
  statix/lang/pp

rules // Analysis

  editor-analyze:
      AnalyzeSingle(change*) -> AnalysisResult(result*)
    with
      ast* := <filter((id, ?Added(<id>) + ?Changed(<id>, _)))> change*
    ; result* := <map({ resource, ast, ast', a', error*, warning*, note*:
                        ?(resource, ast)
                      ; ( (ast', a', error*, warning*, note*) :=
                              <editor--analyze> (resource, ast)
                        < !(resource, Full(ast', a', error*, warning*, note*))
                        + !(resource, Failed())
                        )
                      })> ast*

  editor--analyze:
      (resource, ast) -> (analyzed-ast, result, error*, warning*, note*)
    with nabl2-custom-analysis-info-msg(|"Desugaring AST...");
         desugared-ast := <desugar-all> ast;
         nabl2-custom-analysis-info-msg(|"Desugared AST.");

         nabl2-custom-analysis-info-msg(|"Analyzing AST...");
         (analyzed-ast, a, e*, w*, n*) :=
            <nabl2-analyze-ast(|resource)> desugared-ast;

         facts := <nabl2-get-symbolic-facts(|a)>;
         goals := <nabl2-get-symbolic-goals(|a)>;
         <nabl2-custom-analysis-info-msg(|"Facts: ")> facts;
         <pp-TypeCs;debug> facts;
         <nabl2-custom-analysis-info-msg(|"Goals: ")> goals;
         <pp-TypeCs;debug> goals;
         // TODO Reject overlapping injections (exactly the same is fine)
         //      - No two list injections
         //      - No two tuple injections with the same arity
         // TODO Solve the constraints

         if [] := e* then
           nabl2-custom-analysis-info-msg(|"Detecting overlapping rules...");
           or-e* := <detect-overlapping-rules> analyzed-ast;

           nabl2-custom-analysis-info-msg(|"Computing scope extensions...");
           (ext*, ext-e*, ext-w*, ext-n*) :=
               <compute-scope-extensions> analyzed-ast;

           result   := <nabl2--set-custom-analysis(|a)> ext*;
           error*   := [e*, ext-e*, or-e*];
           warning* := [w*, ext-w*];
           note*    := [n*, ext-n*]
         else
           result   := a;
           error*   := e*;
           warning* := w*;
           note*    := n*
         end;
         nabl2-custom-analysis-info-msg(|"Analyzed AST.")
