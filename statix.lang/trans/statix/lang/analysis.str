module statix/lang/analysis

imports

  nabl2shared
  nabl2runtime
  nabl2/api
  nabl2/runtime/analysis/main
  nabl2/runtime/analysis/query // for private set-custom-analysis

  signatures/statix/lang/-

  statix/lang/statics/-

  pp

rules // Analysis

  editor-analyze:
      AnalyzeUnit(resource, ast) -> UnitResult(ast', result, error*, warning*, note*)
    with nabl2-custom-analysis-info-msg(|"Desugaring AST...");
         <desugar-all> ast;
         nabl2-custom-analysis-info-msg(|"Desugared AST.");

         nabl2-custom-analysis-info-msg(|"Normalizing AST...");
         let analyze = nabl2-custom-analysis-info-msg(|"| Analyzing...");
                       nabl2-erase-ast-indices;nabl2-analyze-ast(|resource)
             step(s,k) = { ast, a:
                           analyze;
                           if ?(ast, a, [], _, _) then
                             nabl2-custom-analysis-info-msg(|"| Transforming...");
                             <keep-origin(s(|a))> ast;
                             k
                           end
                         }
         in
           step(normalize-0,
           step(normalize-1,
           step(normalize-2,
           step(normalize-3,
           analyze))))
         end;
         ?(ast', a', e*, w*, n*);
         nabl2-custom-analysis-info-msg(|"Normalized AST.");

         nabl2-custom-analysis-info-msg(|"Computing scope extensions...");
         (ext*, ext-e*, ext-w*, ext-n*) := <compute-scope-extensions> ast';
         nabl2-custom-analysis-info-msg(|"Computed scope extensions.");

         result := <nabl2--set-custom-analysis(|a')> ext*;
         error*   := [e*, ext-e*];
         warning* := [w*, ext-w*];
         note*    := [n*, ext-n*]

  nabl2-prettyprint-hook   = prettyprint-Statix-IType
  prettyprint-Statix-IType = nabl2-prettyprint-term

  nabl2-prettyprint-hook   = prettyprint-Statix-TType
  prettyprint-Statix-TType = nabl2-prettyprint-term
