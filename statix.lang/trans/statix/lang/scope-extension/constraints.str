module statix/lang/scope-extension/constraints

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-

rules

  explicate-ext-constraints(|a): c* -> (c-ok*, e*)
    with (b*, c'*) := <partition(ext-explicate-barrier(|a))> c*
       ; <ext-log(prettyprint-Statix-ExtBarriers|"barriers:")> b*
       ; (c-ok*, c-e*) := <partition(ext-explicate-constraint(|a, b*))> c'*
       ; e* := <map(ext-barrier-error)> c-e*


  ext-explicate-barrier(|a): ExtBarrier(x) -> s
    with s := <nabl2-get-ast-property(|a,"scope")> x


  ext-explicate-constraint(|a, b*) =
    ExtProvides(ext-explicate-set(|a, b*), ext-explicate-set(|a, b*), id)

  ext-explicate-constraint(|a, b*) =
    ExtRequires(ext-explicate-set(|a, b*), ext-explicate-set(|a, b*), id)

  ext-explicate-constraint(|a, b*) =
    ExtIsCovered(ext-explicate-set(|a, b*), id)


  ext-explicate-set(|a, b*): ExtParam(x, i) -> ExtParam(d, i)
    with d := <nabl2-get-ast-property(|a, "decl")> x

  ext-explicate-set(|a, b*): ExtVar(x) -> ExtVar(d)
    with d := <nabl2-get-ast-property(|a, "decl")> x
    with if r := <nabl2-get-ast-property(|a, "ref")> x
          ; (d, p) := <nabl2-get-resolved-name(|a)> r then
           s* := <ext-path-scopes> p
         else
           s* := []
         end
    where [] := <isect> (s*, b*)

  ext-explicate-set(|a, b*): ExtLit(_) -> <id>

  ext-explicate-set(|a, b*): ExtAll() -> <id>


  ext-barrier-error: ExtProvides(x, _, o) -> (o, $[Scope creation crosses barrier])

  ext-barrier-error: ExtRequires(x, _, o) -> (o, $[Scope extension crosses barrier])


  ext-get-id: ExtParam(d, i) -> <try(nabl2-get-occurrence-name)> d

  ext-get-id: ExtVar(d) -> <try(nabl2-get-occurrence-name)> d


  ext-get-barrier(|name): t -> b
    with b := <nabl2-copy-ast-index(|t)> name


  ext-path-scopes = nabl2-get-path-scopes; init
