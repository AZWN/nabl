module statix/lang/scope-extension/core

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-

rules // shared

  rule-vars: rule -> (head-proj*, new-var*)
    where
         <?Rule(head, var*, body) + ?ModuleRule(head, _, var*, body)> rule
    with head-proj* := <head-projs> head;
         new-var*   := <all-fresh> body

  head-name: C(x, _) -> x

  head-projs: C(_, arg*) -> proj*
    with proj* := <map-with-index(Swap);filter(?(Var(_), _))> arg*

  all-fresh = collect-om(\ CNew(var*) -> var* \); concat

rules // base facts, constraints directly adding to the scope graph

 base-extensions(|error-iset, note-iset): rule -> rule-ext*
    where
         <?Rule(head, _, body) + ?ModuleRule(head, _, _, body)> rule
    with x := <head-name> head;
         (head-proj*, new-var*) := <rule-vars> rule;
         head-var*  := <map(Fst)> head-proj*;
         all-ext*   := <collect-om(base-extension);concat;filter(?(Var(_),_))> body;

         new-ext*   := <filter(\ (v, lbl) -> (v, lbl) where <raw-elem> (v, new-var*) \)> all-ext*;
       //<map(\ (v, lbl) -> <iset-add(|(v, $[Extends locally fresh scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> note-iset \)> new-ext*;

         head-ext*  := <filter({v' : \ (v, lbl) -> (v', lbl) where (v', _) := <raw-lookup> (v, head-proj*) \})> all-ext*;
       //<map(\ (v, lbl) -> <iset-add(|(v, $[Extends parameter scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> note-iset \)> head-ext*;

         local-ext* := <filter(\ (v, lbl) -> (v, lbl) where <not(raw-elem)> (v, <conc> (head-var*, new-var*)) \)> all-ext*;
         <map(\ (v, lbl) -> <iset-add(|(v, $[Cannot extend non-local scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> error-iset \)> local-ext*;

         rule-ext*  := <join(\ ((v1, i), (v2, lbl)) -> (x, i, lbl) where <raw-eq> (v1, v2) \)> (head-proj*, head-ext*)

  base-extension: CTellEdge(s, lbl, _) -> [(s, lbl)]
  base-extension: CTellRel(rel, _, s) -> [(s, rel)]

rules // derived facts, constraints indirectly adding to the scope graph

  derive-extensions(|ast, error-iset, note-iset): ext -> ext*
    with ext* := <collect-om(derived-extensions(|ext, error-iset, note-iset));concat> ast

  derived-extensions(|ext, error-iset, note-iset): rule -> rule-ext*
    where
         <?Rule(head, var*, body) + ?ModuleRule(head, _, var*, body)> rule
    with x := <head-name> head;
         (y, i, lbl) := ext;
         (head-proj*, new-var*) := <rule-vars> rule;
         head-var*  := <map(Fst)> head-proj*;
         all-ext*   := <collect-om(derive-extension(|y, i);?Var(_))> body;

         new-ext*   := <filter(\ v -> v where <raw-elem> (v, new-var*) \)> all-ext*;
       //<map(\ v -> <iset-add(|(v, $[Extends locally fresh scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> note-iset \)> new-ext*;

         head-ext*  := <filter({v' : \ v -> v' where (v', _) := <raw-lookup> (v, head-proj*) \})> all-ext*;
       //<map(\ v -> <iset-add(|(v, $[Extends parameter scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> note-iset \)> head-ext*;

         local-ext* := <filter(\ v -> v where <not(raw-elem)> (v, <conc> (head-var*, new-var*)) \)> all-ext*;
         <map(\ v -> <iset-add(|(v, $[Cannot extend non-local scope [<pp-partial-Statix-string> v] in [<pp-partial-Statix-string> lbl]]))> error-iset \)> local-ext*;

         rule-ext* := <join(\ ((v1, i), v2) -> (x, i, lbl) where <raw-eq> (v1, v2) \)> (head-proj*, head-ext*)

  derive-extension(|y, i): C(x, arg*) -> arg
    where <raw-eq> (x, y)
    with arg := <index(|i)> arg*
