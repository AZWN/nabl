module statix/lang/scope-extension/core

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/scope-extension/-

rules // collect extension constraints

  ext-constraints: r@Rule(_, C(x, ps), _) -> c*
    with c-ps* := <ext-params-constraints(|x)> ps
       ; c-b*  := [ExtBarrier(<ext-get-barrier(|"rule")> r)]
       ; c* := <conc> (c-ps*, c-b*)

  ext-params-constraints(|x): ps -> c*
    with (i_v*, i_t*) := <add-indices;partition((id, is-var))> ps
       ; c1* := <map(\ (i, v@Var(y)) -> [ ExtProvides(ExtParam(x, i), ExtVar(y), v)
                                        , ExtRequires(ExtParam(x, i), ExtVar(y), v)
                                        ] \);concat> i_v*
       ; z* := <raw-diff> (<all-vars> i_t*, <all-vars> i_v*)
       ; c2* := <map(\ v@Var(z) -> [ExtIsCovered(ExtVar(z), v)] \);concat> z*
       ; c* := <conc> (c1*, c2*)


  ext-constraints: l@LLam(ps, body) -> c*
    with c-ps* := <all-vars;map(\ Var(y) -> ExtIsCovered(ExtVar(y), l) \)> ps
       ; c-b*  := [ExtBarrier(<ext-get-barrier(|"lam")> l)]
       ; c* := <conc> (c-ps*, c-b*)


  ext-constraints: c@CTry(_, _) -> c*
    with c* := [ExtBarrier(<ext-get-barrier(|"try")> c)]

  ext-constraints: c@CExists(vs, _) -> c*
    with c* := <map(\ v@Var(y) -> ExtIsCovered(ExtVar(y), v) \)> vs

  ext-constraints: CNew(vs) -> c*
    with c* := <map(\ v@Var(y) -> ExtProvides(ExtVar(y), ExtAll(), v) \)> vs

  ext-constraints: CTellEdge(v@Var(y), lbl, _) -> c*
    with c* := [ExtRequires(ExtVar(y), ExtLit([lbl]), v)]

  ext-constraints: CTellRel(lbl, _, v@Var(y)) -> c*
    with c* := [ExtRequires(ExtVar(y), ExtLit([lbl]), v)]


  ext-constraints: C(x, args, _) -> c*
    with c* := <ext-args-constraints(|x)> args

  ext-args-constraints(|x): args -> c*
    with i_v* := <add-indices;filter((id, is-var))> args
       ; c* := <map(\ (i, v@Var(y)) -> [ ExtProvides(ExtVar(y), ExtParam(x, i), v)
                                       , ExtRequires(ExtVar(y), ExtParam(x, i), v)
                                       ] \);concat> i_v*
