module statix/lang/statics/desugar

  /////////////////////////////////////////////////////////////////////
  // Desugaring: called before analysis
  /////////////////////////////////////////////////////////////////////

imports

  signatures/statix/lang/-
  statix/lang/statics/-

rules

  desugar-all =
    desugar-rules;
    desugar-rule-vars;
    desugar-decl-shorthands;
    desugar-ref-shorthands;
    desugar-queries;
    desugar-lambdas;
    desugar-tuples

rules

  desugar-rules = bottomup(try(desugar-rule))
  desugar-rule: AxiomRule(h) -> Rule(h, NoLocalVars(), CTrue())

rules

  desugar-rule-vars = bottomup(try(desugar-rule-var))
  desugar-rule-var: NoLocalVars() -> []

rules

  desugar-decl-shorthands = topdown(try(desugar-decl-shorthand))

  desugar-decl-shorthand: c@CTellDecl(st, dt) -> CTellRel(decl, [dt], st)
    with decl := <with-origin(|c)> Decl()

  desugar-decl-shorthand: c@CTellDeclWithRel(st, dt, rel, rt) -> CConj(c1, c2)
    with decl := <with-origin(|c)> Decl();
         c1 := <with-origin(|c)> CTellRel(decl, [dt], st);
         c2 := <with-origin(|c)> CTellRel(rel, [dt,rt], st)

rules

  desugar-ref-shorthands = topdown(try(desugar-ref-shorthand))

  desugar-ref-shorthand: c@CResolveRef(rt, st, pst) -> c'
    with decl       := <with-origin(|c)> Decl();
         filter     := <with-origin(|rt)> Filter(ResolveMatch(rt, decl), OccurrenceMatch(rt));
         min        := <with-origin(|rt)> Min(ResolveLt(rt, decl), LFalse());
         c'         := CResolveQuery(filter, min, st, pst)

  desugar-ref-shorthand: CResolveRefWithRel(rel, rt, st, pst) -> c'
    with filter     := <with-origin(|rt)> Filter(ResolveMatch(rt, rel), OccurrenceMatch(rt));
         min        := <with-origin(|rt)> Min(ResolveLt(rt, rel), LFalse());
         c'         := CResolveQuery(filter, min, st, pst)

  target-to-re: NoTarget()     -> Epsilon()
  target-to-re: RelTarget(rel) -> rel

rules

  desugar-queries = bottomup(try(desugar-query))

  desugar-query: NoFilter() -> Filter(Neg(Empty()), LTrue())
  desugar-query: Filter(wf) -> Filter(wf, LTrue())
  desugar-query: Filter_dep(wf) -> Filter(wf, LTrue())
  desugar-query: Filter_dep(wf, l) -> Filter(wf, l)
  desugar-query: NamespaceFilter_dep(wf) -> NamespaceFilter(wf)
  desugar-query: NoNamespaceFilter() -> NamespaceFilter(Neg(Empty()))

  desugar-query: NoMin() -> Min([], LFalse())
  desugar-query: Min(ord) -> Min(ord, LFalse())
  desugar-query: Min_dep(ord) -> Min(ord, LFalse())
  desugar-query: Min_dep(ord, l) -> Min(ord, l)
  desugar-query: NamespaceMin_dep(ord) -> NamespaceMin(ord)
  desugar-query: NoNamespaceMin() -> NamespaceMin([])

  desugar-query:
    CResolveQuery(target, filter, min, st, pst)
    -> CResolveQuery(Filter(Concat(re, target-re), m), min, st, pst)
    with Filter(re, m) := filter
       ; target-re := <target-to-re> target

rules

  desugar-lambdas = topdown(try(desugar-lambda))
  desugar-lambda: LLam(ts) -> LLam(ts, [], CTrue())

rules

  desugar-tuples = topdown(try(desugar-tuple))

  desugar-tuple: Tuple0Sort()      -> TupleSort([])
  desugar-tuple: TupleNSort(s, ss) -> TupleSort([s|ss])

  desugar-tuple: Tuple0()      -> Tuple([])
  desugar-tuple: TupleN(x, xs) -> Tuple([x|xs])

  desugar-tuple: Tuple0Lift()      -> TupleLift([])
  desugar-tuple: TupleNLift(x, xs) -> TupleLift([x|xs])
