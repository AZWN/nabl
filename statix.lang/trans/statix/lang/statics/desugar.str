module statix/lang/statics/desugar

  /////////////////////////////////////////////////////////////////////
  // Desugaring: called before analysis
  /////////////////////////////////////////////////////////////////////

imports

  signatures/statix/lang/-
  statix/lang/statics/-

rules

  desugar-all =
    desugar-rules;
    desugar-rule-vars;
    desugar-decl-shorthands;
    desugar-ref-shorthands;
    desugar-rel-shorthands;
    desugar-queries;
    desugar-lambdas;
    desugar-terms

rules

  desugar-rules = try(sometd(desugar-rule))
  desugar-rule: AxiomRule(h)        -> Rule(h, NoLocalVars(), CTrue(), NoLocalVars(), CTrue())
  desugar-rule: GuardRule(h, vs, g) -> Rule(h, vs, g, NoLocalVars(), CTrue())
  desugar-rule: BodyRule(h, vs, b)  -> Rule(h, NoLocalVars(), CTrue(), vs, b)

rules

  desugar-rule-vars = try(sometd(desugar-rule-var))
  desugar-rule-var: NoLocalVars() -> []

rules

  desugar-decl-shorthands = topdown(try(desugar-decl-shorthand))
  desugar-decl-shorthand: c@CTellDecl(st, dt) -> CTellRel(decl, [dt], st)
    with decl := <with-origin(|c)> Decl()
  desugar-decl-shorthand: c@CTellDeclWithRel(st, dt, rel, rt) -> CConj(c1, c2)
    with decl := <with-origin(|c)> Decl();
         c1 := <with-origin(|c)> CTellRel(decl, [dt], st);
         c2 := <with-origin(|c)> CTellRel(rel, [dt,rt], st)

rules

  desugar-ref-shorthands = topdown(try(desugar-ref-shorthand))
  desugar-ref-shorthand: c@CResolveDecl(rt, st, pst) -> c'
    with decl       := <with-origin(|c)> Decl();
         rel-target := <with-origin(|c)> RelTarget(decl);
         filter     := <with-origin(|rt)> ResolveFilter(rt);
         min        := <with-origin(|rt)> ResolveMin(rt);
         c'         := CResolveQuery(rel-target, filter, min, st, pst)
  desugar-ref-shorthand: CResolveRel(rel, rt, st, pst) -> c'
    with rel-target := <with-origin(|rel)> RelTarget(rel);
         filter     := <with-origin(|rt)> ResolveFilter(rt);
         min        := <with-origin(|rt)> ResolveMin(rt);
         c'         := CResolveQuery(rel-target, filter, min, st, pst)

rules

  desugar-rel-shorthands = topdown(try(desugar-rel-shorthand))
  desugar-rel-shorthand: c@CAskRel(rel, ts, st) -> c'
    with rel-target := <with-origin(|rel)> RelTarget(rel);
         epsilon    := <with-origin(|c)>  Epsilon();
         match      := <with-origin(|c)> LPathMatch(epsilon);
         filter     := <with-origin(|c)> Filter(match);
         min        := <with-origin(|c)> NoMin();
         p          := <with-origin(|ts)> Wld();
         t          := <?[<id>] <+ <with-origin(|ts)> Tuple(<id>)> ts;
         pt         := <with-origin(|ts)> Tuple([p, t]);
         pts        := <with-origin(|ts)> List([pt]);
         c'         := CResolveQuery(rel-target, filter, min, st, pts)

rules

  desugar-queries = topdown(try(desugar-query))

  desugar-query: NoFilter() -> Filter(LTrue(), LTrue())
  desugar-query: Filter(l) -> Filter(l, LTrue())
  desugar-query: NoNamespaceFilter() -> NamespaceFilter(LTrue())

  desugar-query: NoMin() -> Min(LFalse(), LFalse())
  desugar-query: Min(l) -> Min(l, LFalse())
  desugar-query: NoNamespaceMin() -> NamespaceMin(LFalse())

rules

  desugar-lambdas = topdown(try(desugar-lambda))
  desugar-lambda: LLam(ts) -> LLam(ts, [], CTrue())

rules

  desugar-terms = topdown(try(desugar-term))

  desugar-term: Tuple0()      -> Tuple([])
  desugar-term: TupleN(x, xs) -> Tuple([x|xs])
