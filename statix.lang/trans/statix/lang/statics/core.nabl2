module statix/lang/statics/core

imports

  signatures/statix/lang/-

signature

  sorts
    SKind
    CKind

  constructors
    SimpleSort : SKind
    SortAlias  : SKind

    DeclaredC : CKind
    DerivedC  : CKind

  namespaces
    C      // constraint
    Rel    // data label
    Edge   // edge label
    Mod    // module
    Ns     // namespace
    NsQ    // namespace query
    Op     // term constructor
    Rule   // constraint rule
    Sort   // sort

  name resolution
    labels
      P // lexical parent
      I // module import
    well-formedness
      P* I?
    order
      D < P,
      I < P

rules

  init ^ (s) :=
    new s,
  
    // sugar

    Rel{Decl()} <- s,
    Rel{Decl()} : PRED([OCCURRENCE()]).


/******************************************************************
 * Modules                                                        *
 ******************************************************************/

  [[ m@Module(x, sections) ^ (s) ]] :=
    new s', s' -P-> s, @m.scope := s',
    Mod{x} <- s, Mod{x} =I=> s',
    distinct/name D(s)/Mod | error $[Duplicate module [NAME]] @NAMES,
    Sections[[ sections ^ (s', s) ]].

  Sections[[ sections ^ (s, s_outer) ]] :=
    Map1(Section)[[ sections ^ (s, s_outer) ]],
    distinct/name D(s)/C    | error $[Duplicate constraint [NAME]] @NAMES,
    distinct/name D(s)/Rel  | error $[Duplicate relation [NAME]] @NAMES,
    distinct/name D(s)/Edge | error $[Duplicate edge [NAME]] @NAMES,
    distinct/name D(s)/Ns   | error $[Duplicate namespace [NAME]] @NAMES,
    distinct/name D(s)/NsQ  | error $[Duplicate namespace query [NAME]] @NAMES,
    distinct/name D(s)/Op   | error $[Duplicate constructor [NAME]] @NAMES,
    distinct/name D(s)/Sort | error $[Duplicate sort [NAME]] @NAMES,
    (D(s)/Rel isect/name D(s)/Edge) subseteq 0 | error $[Relation and edge label with same name [NAME]] @NAMES.

//Section[[ Imports(imports) ^ (s, s_outer) ]] :=
//  Map1(Import)[[ ids ^ (s_outer, s) ]].

//Import[[ Import(id) ^ (s, s_imp) ]] :=
//  Mod{x} -> s, Mod{x} |-> d,
//  Mod{x} <=I= s_imp. 

  Section[[ Signature(sigs) ^ (s, _) ]] :=
    Map1(Signature)[[ sigs ^ (s) ]].

  Section[[ Rules(rs) ^ (s, _) ]] :=
    Map1(DeclOrRule)[[ rs ^ (s) ]].


/******************************************************************
 * User Constraints                                               *
 ******************************************************************/

  Signature[[ Constraints(cs) ^ (s) ]] :=
    Map1(DeclOrRule)[[ cs ^ (s) ]].

  DeclOrRule[[ CDecl(ind, x, type) ^ (s) ]] :=
    Ind[[ ind ]],
    Type[[ type ^ (s) : ty ]],
    C{x} <- s, @x.decl := C{x},
    C{x} : ty !!,
    C{x}.ind := ind !!,
    C{x}.kind := DeclaredC() !!.

  Ind[[ InductiveC() ]].
  Ind[[ CoinductiveC() ]] := false | error "Co-inductive constraints are not yet supported.".

  DeclOrRule[[ r@Rule(_, h, body) ^ (s) ]] :=
    Rule{x} <- s,
    new s_rule, s_rule -P-> s, @r.scope := s_rule,
    distinct/name D(s_rule)/Var | error $[Duplicate variable [NAME]] @NAMES,
    RuleHead[[ h ^ (s_rule, x) : _ ]],
    Constraint[[ body ^ (s_rule) ]].

  RuleHead[[ C(x, args) ^ (s_rule, y) : ty ]] := x == y,
    C{x} -> s_rule, C{x} |-> d, @x.ref := C{x}, @x.decl := d,
    d.kind := DeclaredC() | error "Rules can only be defined for declared constraints.",
    d : ty, ty != FUN(_, _) | error "Use `c(...) = ... | ...` for functional constraints." @x,
    tys is `in-types` of ty,
    Map1T(Match)[[ args ^ (s_rule) : tys ]].

  Constraint[[ C(x, args, msg) ^ (s) ]] :=
    C{x} -> s, C{x} |-> d, @x.ref := C{x}, @x.decl := d,
    d : ty, ty != FUN(_, _) | error "Use inline notation for functional constraints.",
    tys is `in-types` of ty,
    Map1T(Build)[[ args ^ (s) : tys ]],
    Message(ErrorKind)[[ msg ^ (s) ]].

  HoConstraint[[ l@LLam(ps, c) ^ (s) : PRED(tys) ]] :=
    new s', s' -P-> s, @l.scope := s',
    Map1T(Match)[[ ps ^ (s') : tys ]],
  //(D(s')/Var lsect/name V(s)/Var) subseteq 0 | warning $[Shadowing variable [NAME]] @NAMES,
    Constraint[[ c ^ (s') ]].


/******************************************************************
 * Base Constraints                                               *
 ******************************************************************/

  Constraint[[ CTrue() ^ (_) ]].

  Constraint[[ CFalse(msg) ^ (s) ]] :=
    Message(ErrorKind)[[ msg ^ (s) ]].

  Constraint[[ CConj(c1, c2) ^ (s) ]] :=
    Constraint[[ c1 ^ (s) ]],
    Constraint[[ c2 ^ (s) ]].

  Constraint[[ CNew(vs) ^ (s) ]] :=
    Map1t(VarRef)[[ vs ^ (s) : SCOPE() ]].

  Constraint[[ CEqual(t1, t2, msg) ^ (s) ]] :=
    Build[[ t1 ^ (s) : ty ]],
    Build[[ t2 ^ (s) : ty ]],
    Message(ErrorKind)[[ msg ^ (s) ]].

  Constraint[[ CInequal(t1, t2, msg) ^ (s) ]] :=
    Build[[ t1 ^ (s) : ty ]],
    Build[[ t2 ^ (s) : ty ]],
    Message(ErrorKind)[[ msg ^ (s) ]].

  Constraint[[ e@CExists(vs, c) ^ (s) ]] :=
    new s', s' -P-> s,
    Map1T(VarDecl)[[ vs ^ (s') : _ ]],
    distinct/name D(s')/Var | error $[Duplicate variable [NAME]] @NAMES,
  //(D(s')/Var lsect/name V(s)/Var) subseteq 0 | warning $[Shadowing variable [NAME]] @NAMES,
    Constraint[[ c ^ (s') ]].

  Constraint[[ t@CTry(c, msg) ^ (s) ]] :=
    new s', s' -P-> s, @t.scope := s',
    Constraint[[ c ^ (s') ]],
    Message(TryKind)[[ msg ^ (s) ]].

/******************************************************************
 * AST Constraints                                                *
 ******************************************************************/


  Constraint[[ CAstId(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : _ ]],
    Build[[ t2 ^ (s) : AST_ID() ]].

  Constraint[[ CAstProperty(t1, l, t2) ^ (s) ]] :=
    TermOrId(Build)[[ t1 ^ (s) : _ ]],
    Build[[ t2 ^ (s) : _ ]].

  // only call this with a wildcard for ty!
  TermOrId(V)[[ t ^ (s) : ty ]] :=
    V[[ t ^ (s) : ty ]].

/******************************************************************
 * Relations                                                      *
 ******************************************************************/

  Signature[[ Relations(rdecls) ^ (s) ]] :=
    Map1(DeclOrRule)[[ rdecls ^ (s) ]].

  DeclOrRule[[ RelDecl(rel, type) ^ (s) ]] :=
    Type[[ type ^ (s) : ty ]],
    RelDecl[[ rel ^ (s) : ty ]].

  RelDecl[[ r@Label(x) ^ (s) : ty ]] :=
    Rel{x} <- s, @x.decl := Rel{x},
    Rel{x} : ty !.

  RelRef[[ l@Label(x) ^ (s) : ty ]] :=
    Rel{x} -> s, Rel{x} |-> d, @l.ref := Rel{x}, @l.decl := d,
    d : ty.

  RelRef[[ l@EOP() ^ (s) : PRED([SCOPE()]) ]].

  Constraint[[ CTellRel(rel, ts, st) ^ (s) ]] :=
    RelRef[[ rel ^ (s) : ty ]],
    tys is `inout-types` of ty,
    Map1T(Build)[[ ts ^ (s): tys ]],
    Build[[ st ^ (s) : SCOPE() ]].


/******************************************************************
 * Scope Graph                                                    *
 ******************************************************************/

  Signature[[ Namespaces(nss) ^ (s) ]] :=
    Map1(DeclOrRule)[[ nss ^ (s) ]].

  DeclOrRule[[ NsDecl(x, sorts) ^ (s) ]] :=
    Ns{x} <- s, @x.decl := Ns{x},
    Map1T(SortRef)[[ sorts ^ (s) : tys ]],
    Ns{x} : NS(tys) !.

  Signature[[ NameResolution(params) ^ (s) ]] :=
    Map1(DeclOrRule)[[ params ^ (s) ]].

  DeclOrRule[[ Labels(lbls) ^ (s) ]] :=
    Map1(EdgeDecl)[[ lbls ^ (s) ]].

  EdgeDecl[[ l@Label(x) ^ (s) ]] :=
    Edge{x} <- s, @x.decl := Edge{x}.


  EdgeRef[[ l@Label(x) ^ (s) ]] :=
    Edge{x} -> s, Edge{x} |-> d, @l.ref := Edge{x}, @l.decl := d.

  EdgeRef[[ l@EOP() ^ (s) ]].


  LabelPair[[ LabelPair(lbl1, lbl2) ^ (s) ]] :=
    EdgeRef[[ lbl1 ^ (s) ]],
    EdgeRef[[ lbl2 ^ (s) ]].


  LabelRE[[ Empty() ^ (s) ]].

  LabelRE[[ Epsilon() ^ (s) ]].

  LabelRE[[ l@Label(_) ^ (s) ]] :=
    EdgeRef[[ l ^ (s) ]].

  LabelRE[[ Closure(re) ^ (s) ]] :=
    LabelRE[[ re ^ (s) ]].

  LabelRE[[ Neg(re) ^ (s) ]] :=
    LabelRE[[ re ^ (s) ]].

  LabelRE[[ Concat(re1, re2) ^ (s) ]] :=
    LabelRE[[ re1 ^ (s) ]],
    LabelRE[[ re2 ^ (s) ]].

  LabelRE[[ And(re1, re2) ^ (s) ]] :=
    LabelRE[[ re1 ^ (s) ]],
    LabelRE[[ re2 ^ (s) ]].

  LabelRE[[ Or(re1, re2) ^ (s) ]] :=
    LabelRE[[ re1 ^ (s) ]],
    LabelRE[[ re2 ^ (s) ]].


  Constraint[[ CTellEdge(t1, lbl, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : SCOPE() ]],
    EdgeRef[[ lbl ^ (s) ]],
    Build[[ t2 ^ (s) : SCOPE() ]].

  Term(V)[[ Occurrence(ns, ts, pos) ^ (s) : OCCURRENCE() ]] :=
    Ns{ns} -> s, Ns{ns} |-> d, @ns.ref := Ns{ns}, @ns.decl := d,
    d : NS(tys),
    Map1T(Term(V))[[ ts ^ (s) : tys ]],
    OccurrencePos(Term(V))[[ pos ^ (s) : _ ]].

  // only call this with a wildcard for ty
  OccurrencePos(T)[[ NoId() ^ (s) : AST_ID() ]].
  OccurrencePos(T)[[ WithId(t) ^ (s) : AST_ID() ]] :=
    TermOrId(T)[[ t ^ (s) : ty ]].

  Term(V)[[ PathEmpty(st) ^ (s) : PATH() ]] :=
    Term(V)[[ st ^ (s) : SCOPE() ]].

  Term(V)[[ PathStep(pt, lt, st) ^ (s) : PATH() ]] :=
    Term(V)[[ pt ^ (s) : PATH() ]],
    Term(V)[[ lt ^ (s) : LABEL() ]],
    Term(V)[[ st ^ (s) : SCOPE() ]].


/******************************************************************
 * Resolve & Query
 ******************************************************************/

  Constraint[[ CResolveQuery(rel, filter, min, st, pst, msg) ^ (s) ]] :=
    RelRef[[ rel ^ (s) : ty ]],
    inty is `in-type` of ty,
    Filter[[ filter ^ (s, PRED([inty])) ]],
    Min[[ min ^ (s, PRED([inty, inty])) ]],
    Build[[ st ^ (s) : SCOPE() ]],
    inoutty is `inout-type` of ty,
    Build[[ pst ^ (s) : LIST(TUPLE([PATH(), inoutty])) ]],
    Message(ErrorKind)[[ msg ^ (s) ]].

  Filter[[ Filter(re, lt) ^ (s, lty) ]] :=
    LabelRE[[ re ^ (s) ]],
    HoConstraint[[ lt ^ (s) : lty ]].

  Min[[ Min(ord, lt) ^ (s, lty) ]] :=
    LabelOrd[[ ord ^ (s) ]],
    HoConstraint[[ lt ^ (s) : lty ]].

  LabelOrd[[ [] ^ (s) ]].
  LabelOrd[[ prs@[_|_] ^ (s) ]] :=
    Map1(LabelPair)[[ prs ^ (s) ]].

/******************************************************************
 * Sorts & Constructors                                           *
 ******************************************************************/

  Signature[[ Sorts(sorts) ^ (s) ]] :=
    Map1(SortDecl)[[ sorts ^ (s) ]].

  SortDecl[[ SortDecl(x) ^ (s) ]] :=
    Sort{x} <- s, @x.decl := Sort{x},
    Sort{x} : SORT(Sort{x}) !!,
    Sort{x}.kind := SimpleSort().

  SortDecl[[ SortAlias(x, sort) ^ (s) ]] :=
    Sort{x} <- s, @x.decl := Sort{x},
    Sort{x} : ty !!,
    Sort{x}.kind := SortAlias(),
    SortRef[[ sort ^ (s) : ty ]].

  Signature[[ Constructors(ctors) ^ (s) ]] :=
    Map1(OpDecl)[[ ctors ^ (s) ]].

  OpDecl[[ OpDecl(x, sort) ^ (s) ]] :=
    x' is `op-name` of (x, sort),
    Op{x'@x} <- s, @x.decl := Op{x'@x},
    Op{x'@x} : ty !!,
    OpSort[[ sort ^ (s) : ty ]].

  OpSort[[ ConstOp(sort) ^ (s) : OP([], ty) ]] :=
    RealSortRef[[ sort ^ (s) : ty ]].

  OpSort[[ ArrowOp(args, sort) ^ (s) : OP(tys, ty) ]] :=
    Map1T(SortRef)[[ args ^ (s) : tys ]],
    RealSortRef[[ sort ^ (s) : ty ]].

  RealSortRef[[ SimpleSort(x) ^ (s) : ty ]] :=
    Sort{x} -> s, Sort{x} |-> d, @x.ref := Sort{x}, @x.decl := d,
    d : ty !,
    d.kind := k, k != SortAlias() | error $[Cannot refer to alias [d]].

  SortRef[[ IntSort() ^ (_) : INT() ]].
  SortRef[[ StringSort() ^ (_) : STRING() ]].
  SortRef[[ OccurrenceSort() ^ (_) : OCCURRENCE() ]].
  SortRef[[ PathSort() ^ (_) : PATH() ]].
  SortRef[[ LabelSort() ^ (_) : LABEL() ]].
  SortRef[[ ScopeSort() ^ (_) : SCOPE() ]].
  SortRef[[ AstIdSort() ^ (_) : AST_ID() ]].
  SortRef[[ TupleSort(sorts) ^ (s) : TUPLE(tys) ]] :=
    Map1T(SortRef)[[ sorts ^ (s) : tys ]].
  SortRef[[ ListSort(sort) ^ (s) : LIST(ty) ]] :=
    SortRef[[ sort ^ (s) : ty ]].
  SortRef[[ SimpleSort(x) ^ (s) : ty ]] :=
    Sort{x} -> s, Sort{x} |-> d, @x.ref := Sort{x}, @x.decl := d,
    d : ty.

  Type[[ SimpleType(sorts) ^ (s) : PRED(intys) ]] :=
    Map1T(SortRef)[[ sorts ^ (s) : intys ]].


/******************************************************************
 * Terms                                                          *
 ******************************************************************/

  Match[[ t ^ (s) : ty ]] :=
    Term(NonUniqueVarDecl)[[ t ^ (s) : ty ]].

  Build[[ t ^ (s) : ty ]] :=
    Term(VarRef)[[ t ^ (s) : ty ]].

  NonUniqueVarDecl[[ Var(x) ^ (s) : ty ]] :=
    Var{x @s} <- s, @x.decl := Var{x @s},
    Var{x @s} : ty !.

  NonUniqueVarDecl[[ Wld() ^ (_) : _ ]].

  VarDecl[[ Var(x) ^ (s) : ty ]] :=
    Var{x} <- s, @x.decl := Var{x},
    Var{x} : ty !.

  VarDecl[[ Wld() ^ (_) : _ ]].

  VarRef[[ Var(x) ^ (s) : ty ]] :=
    Var{x} -> s, Var{x} |-> d, @x.ref := Var{x}, @x.decl := d,
    d : ty.

  VarRef[[ Wld() ^ (_) : _ ]].

  Term(V)[[ v@Var(_) ^ (s) : ty ]] :=
    V[[ v ^ (s) : ty ]].
  Term(V)[[ Wld() ^ (_) : ty ]].
  Term(V)[[ List(ts) ^ (s): LIST(ty) ]] :=
    Map1t(Term(V))[[ ts ^ (s) : ty ]].
  Term(V)[[ ListTail(ts, t) ^ (s) : LIST(ty) ]] :=
    Map1t(Term(V))[[ ts ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : LIST(ty) ]].
  Term(V)[[ Tuple(ts) ^ (s) : TUPLE(tys) ]] :=
    Map1T(Term(V))[[ ts ^ (s) : tys ]].
  Term(V)[[ Op(x, args) ^ (s) : ty ]] :=
    x' is `op-name` of (x, args),
    Op{x'@x} -> s, Op{x'@x} |-> d, @x.ref := Op{x'@x}, @x.decl := d,
    d : OP(tys, ty),
    Map1T(Term(V))[[ args ^ (s) : tys ]].
  Term(V)[[ Str(_) ^ (_) : STRING() ]].
  Term(V)[[ Int(_) ^ (_) : INT() ]].
  Term(V)[[ As(v, t) ^ (s) : ty ]] :=
    V[[ v ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty ]].
  Term(V)[[ Ascribe(t, sort) ^ (s) : ty ]] :=
    SortRef[[ sort ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty ]].


/******************************************************************
 * Arithmetic                                                     *
 ******************************************************************/

rules

  [[ CArith(ae1, op, ae2, msg) ^ (s) ]] :=
    ArithExp(VarRef)[[ ae1 ^ (s) : INT() ]],
    ArithExp(VarRef)[[ ae1 ^ (s) : INT() ]],
    Message(ErrorKind)[[ msg ^ (s) ]].


  ArithExp(V)[[ e@Int(_) ^ (s) : INT() ]] :=
    Term(V)[[ e ^ (s) : INT() ]].

  ArithExp(V)[[ e@Wld() ^ (s) : INT() ]] :=
    V[[ e ^ (s) : INT() ]].

  ArithExp(V)[[ e@Var(_) ^ (s) : INT() ]] :=
    V[[ e ^ (s) : INT() ]].

  ArithExp(V)[[ Add(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].

  ArithExp(V)[[ Mul(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].

  ArithExp(V)[[ Sub(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].

  ArithExp(V)[[ Min(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].

  ArithExp(V)[[ Max(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].

  ArithExp(V)[[ Mod(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].

  ArithExp(V)[[ Div(e1, e2) ^ (s) : INT() ]] :=
    ArithExp(V)[[ e1 ^ (s) : INT() ]],
    ArithExp(V)[[ e2 ^ (s) : INT() ]].


/******************************************************************
 * Messages                                                       *
 ******************************************************************/

  Message(K)[[ NoMessage() ^ (s) ]].

  Message(K)[[ Message(kind, content, origin) ^ (s) ]] :=
    K[[ kind ]],
    MessageContent[[ content ^ (s) ]],
    MessageOrigin[[ origin ^ (s) ]].


  MessageContent[[ Str(_) ^ (s) ]].

  MessageContent[[ Formatted(parts) ^ (s) ]] :=
    Map1(MessageContentPart)[[ parts ^ (s) ]].


  MessageContentPart[[ Text(_) ^ (s) ]].

  MessageContentPart[[ Term(t) ^ (s) ]] :=
    Build[[ t ^ (s) : _ ]].


  MessageOrigin[[ NoOrigin() ^ (s) ]].

  MessageOrigin[[ Origin(t) ^ (s) ]] :=
    Build[[ t ^ (s) : _ ]].


  ErrorKind[[ Error() ]].
  ErrorKind[[ Warning() ]] := false | error "Use 'try' for warnings.".
  ErrorKind[[ Note() ]] := false | error "Use 'try' for notes.".


  TryKind[[ Error() ]].
  TryKind[[ Warning() ]].
  TryKind[[ Note() ]].


/******************************************************************
 * Util                                                           *
 ******************************************************************/

rules

  Map1t(X)[[ [x|xs] ^ (s) : ty ]] :=
    X[[ x ^ (s) : ty ]],
    Map1t(X)[[ xs ^ (s) : ty ]].

  Map1t(X)[[ [] ^ (s) : _ ]].
