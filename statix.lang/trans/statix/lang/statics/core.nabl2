module statix/lang/statics/core

imports

  signatures/statix/lang/-

signature

  sorts
    SKind
    CKind

  constructors
    SimpleSort : SKind
    SortAlias  : SKind

    DeclaredC : CKind
    DerivedC  : CKind

  namespaces
    C      // constraint
    Lbl    // edge or data label
    Mod    // module
    Ns     // namespace
    NsQ    // namespace query
    Op     // term constructor
    Rule   // constraint rule
    Sort   // sort

  name resolution
    labels
      P // lexical parent
      I // module import
    well-formedness
      P* I?
    order
      D < P,
      I < P

rules

  init ^ (s) :=
    new s.


/******************************************************************
 * Modules                                                        *
 ******************************************************************/

  [[ m@Module(x, sections) ^ (s) ]] :=
    new s', @m.scope := s',
    Mod{x} <- s, Mod{x} =I=> s',
    distinct/name D(s)/Mod | error $[Duplicate module [NAME]] @NAMES,
    TopLevelSections[[ sections ^ (s') ]].

  TopLevelSections[[ sections ^ (s) ]] :=

    Lbl{Decl()} <- s,
    Lbl{Decl()} : DATA(PRED([OCCURRENCE()])),
    Lbl{Decl()}.ast := Decl(),
  
    Sections[[ sections ^ (s') ]].

  Sections[[ sections ^ (s') ]] :=
    Map1[[ sections ^ (s') ]],
    distinct/name D(s')/C    | error $[Duplicate constraint [NAME]] @NAMES,
    distinct/name D(s')/Lbl  | error $[Duplicate label [NAME]] @NAMES,
    distinct/name D(s')/Ns   | error $[Duplicate namespace [NAME]] @NAMES,
    distinct/name D(s')/NsQ  | error $[Duplicate namespace query [NAME]] @NAMES,
    distinct/name D(s')/Op   | error $[Duplicate constructor [NAME]] @NAMES,
    distinct/name D(s')/Sort | error $[Duplicate sort [NAME]] @NAMES.

  [[ Signature(sigs) ^ (s) ]] :=
    Map1[[ sigs ^ (s) ]].

  [[ Rules(rs) ^ (s) ]] :=
    Map1[[ rs ^ (s) ]].


/******************************************************************
 * User Constraints                                               *
 ******************************************************************/

  [[ Constraints(cs) ^ (s) ]] :=
    Map1[[ cs ^ (s) ]].

  [[ CDecl(ind, x, type) ^ (s) ]] :=
    [[ ind ]],
    [[ type ^ (s) : ty ]],
    C{x} <- s, @x.decl := C{x},
    C{x} : ty !!,
    C{x}.ind := ind !!,
    C{x}.kind := DeclaredC() !!.

  [[ InductiveC() ]].
  [[ CoinductiveC() ]] := false | error "Co-inductive constraints are not yet supported.".

  [[ r@Rule(h, bvs, body) ^ (s) ]] :=
    Rule{x} <- s, Rule{x}.ast := r,
    new s_rule, s_rule -P-> s,
    distinct/name D(s_rule)/Var | error $[Duplicate local variable [NAME]] @NAMES,
    RuleHead[[ h ^ (s_rule, s_body, x) ]],
    new s_body, s_body -P-> s_rule,
    distinct/name D(s_body)/Var | error $[Duplicate body variable [NAME]] @NAMES,
    (D(s_body) lsect/name D(s_rule)) subseteq 0 | error $[Shadowing local variable [NAME]] @NAMES,
    Map1T(VarDecl)[[ bvs ^ (s_body) : _ ]],
    [[ body ^ (s_body) ]].

  RuleHead[[ C(x, args) ^ (s_rule, s_body, y) ]] := x == y,
    C{x} -> s_rule, C{x} |-> d, @x.decl := d,
    d.kind := DeclaredC() | error "Rules can only be defined for declared constraints.",
    d : ty, ty != FUN(_, _) | error "Use `c(...) = ... | ...` for functional constraints." @x,
    tys is `in-types` of ty,
    Map1T(Match)[[ args ^ (s_rule) : tys ]].

  [[ C(x, args) ^ (s) ]] :=
    C{x} -> s, C{x} |-> d, @x.decl := d,
    d : ty, ty != FUN(_, _) | error "Use inline notation for functional constraints.",
    tys is `in-types` of ty,
    Map1T(Build)[[ args ^ (s) : tys ]].

  [[ LLam(ps, vs, c) ^ (s) : PRED(tys) ]] :=
    new s', s' -P-> s,
    Map1T(Match)[[ ps ^ (s') : tys ]],
    Map1T(VarDecl)[[ vs ^ (s') : _ ]],
    [[ c ^ (s') ]].


/******************************************************************
 * Base Constraints                                               *
 ******************************************************************/

  [[ CTrue() ^ (_) ]].

  [[ CFalse() ^ (_) ]].

  [[ CConj(c1, c2) ^ (s) ]] :=
    [[ c1 ^ (s) ]],
    [[ c2 ^ (s) ]].

  [[ CNew(vs) ^ (s) ]] :=
    Map1t(VarRef)[[ vs ^ (s) : SCOPE() ]].

  [[ CTermId(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : _ ]],
    Build[[ t2 ^ (s) : TERM_ID() ]].

  [[ CEqual(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : ty ]],
    Build[[ t2 ^ (s) : ty ]].

  [[ CInequal(t1, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : ty ]],
    Build[[ t2 ^ (s) : ty ]].


/******************************************************************
 * Relations                                                      *
 ******************************************************************/

  [[ Relations(rdecls) ^ (s) ]] :=
    Map1[[ rdecls ^ (s) ]].

  [[ RelDecl(rel, type) ^ (s) ]] :=
    [[ type ^ (s) : ty ]],
    RelDecl[[ rel ^ (s) : ty ]].

  RelDecl[[ r@Label(x) ^ (s) : ty ]] :=
    Lbl{x} <- s, @x.decl := Lbl{x}, Lbl{x}.ast := r,
    Lbl{x} : DATA(ty) !.

  [[ CTellRel(rel, ts, st) ^ (s) ]] :=
    LabelRef[[ rel ^ (s) : DATA(ty) ]],
    tys is `inout-types` of ty,
    Map1T(Build)[[ ts ^ (s): tys ]],
    Build[[ st ^ (s) : SCOPE() ]].


/******************************************************************
 * Scope Graph                                                    *
 ******************************************************************/

  [[ Namespaces(nss) ^ (s) ]] :=
    Map1[[ nss ^ (s) ]].

  [[ NsDecl(x, sorts) ^ (s) ]] :=
    Ns{x} <- s, @x.decl := Ns{x},
    Map1T(SortRef)[[ sorts ^ (s) : tys ]],
    Ns{x} : NS(tys) !.

  [[ NameResolution(params) ^ (s) ]] :=
    Map1[[ params ^ (s) ]].

  [[ Labels(lbls) ^ (s) ]] :=
    Map1(LabelDecl)[[ lbls ^ (s) ]].

  LabelDecl[[ l@Label(x) ^ (s) ]] :=
    Lbl{x} <- s, @x.decl := Lbl{x}, Lbl{x}.ast := l,
    Lbl{x} : EDGE() !.

  [[ CPathMatch(re, p) ^ (s) ]] :=
    LabelRE[[ re ^ (s) : _ ]],
    Build[[ p ^ (s) : LIST(LABEL()) ]].

  [[ CPathLt(ord, p1, p2) ^ (s) ]] :=
    Build[[ p1 ^ (s) : LABEL() ]],
    Build[[ p2 ^ (s) : LABEL() ]],
    LabelOrd[[ ord ^ (s) ]].

  [[ LabelPair(lbl1, lbl2) ^ (s) ]] :=
    LabelRef[[ lbl1 ^ (s) : _ ]],
    LabelRef[[ lbl2 ^ (s) : _ ]].


  LabelRE[[ re ^ (s) : ty ]] :=
    RE(LabelRef)[[ re ^ (s) : ty ]].

  LabelRef[[ t@Label(x) ^ (s) : ty ]] :=
    Lbl{x} -> s, Lbl{x} |-> d, @t.decl := d,
    d : ty.


  RE(L)[[ Empty() ^ (s) : EDGE() ]].

  RE(L)[[ Epsilon() ^ (s) : EDGE() ]].

  RE(L)[[ l@Label(_) ^ (s) : ty ]] :=
    L[[ l ^ (s) : ty ]].

  RE(L)[[ Closure(re) ^ (s) : EDGE() ]] :=
    RE(L)[[ re ^ (s) : EDGE() ]].

  RE(L)[[ Neg(re) ^ (s) : EDGE() ]] :=
    RE(L)[[ re ^ (s) : EDGE() ]].

  RE(L)[[ Concat(re1, re2) ^ (s) : ty ]] :=
    RE(L)[[ re1 ^ (s) : EDGE() ]],
    RE(L)[[ re2 ^ (s) : ty ]].

  RE(L)[[ And(re1, re2) ^ (s) : ty ]] :=
    RE(L)[[ re1 ^ (s) : ty ]],
    RE(L)[[ re2 ^ (s) : ty ]].

  RE(L)[[ Or(re1, re2) ^ (s) : ty ]] :=
    RE(L)[[ re1 ^ (s) : ty ]],
    RE(L)[[ re2 ^ (s) : ty ]].


  [[ CTellEdge(t1, lbl, t2) ^ (s) ]] :=
    Build[[ t1 ^ (s) : SCOPE() ]],
    LabelRef[[ lbl ^ (s) : EDGE() ]],
    Build[[ t2 ^ (s) : SCOPE() ]].

  Term(V)[[ Occurrence(ns, ts, pos) ^ (s) : OCCURRENCE() ]] :=
    Ns{ns} -> s, Ns{ns} |-> d, @ns.decl := d,
    d : NS(tys),
    Map1T(Term(V))[[ ts ^ (s) : tys ]],
    Pos(V)[[ pos ^ (s) : _ ]].

  Pos(V)[[ NoId() ^ (s) : TERM_ID() ]].
  Pos(V)[[ t ^ (s) : ty ]] :=
    Term(V)[[ t ^ (s) : ty ]].

  Term(V)[[ PathEmpty(st) ^ (s) : PATH() ]] :=
    Term(V)[[ st ^ (s) : SCOPE() ]].

  Term(V)[[ PathStep(pt, lt, st) ^ (s) : PATH() ]] :=
    Term(V)[[ pt ^ (s) : PATH() ]],
    Term(V)[[ lt ^ (s) : LABEL() ]],
    Term(V)[[ st ^ (s) : SCOPE() ]].


/******************************************************************
 * Resolve & Query
 ******************************************************************/

  [[ CResolveQuery(filter, min, st, pst) ^ (s) ]] :=
    [[ filter ^ (s, ty) ]],
    [[ min ^ (s, ty) ]],
    Build[[ st ^ (s) : SCOPE() ]],
    resty is `path-wf-to-result` of ty,
    Build[[ pst ^ (s) : LIST(resty) ]].

  [[ Filter(re, lt) ^ (s, ty) ]] :=
    LabelRE[[ re ^ (s) : ty ]],
    lty is `path-wf-to-data-wf` of ty,
    [[ lt ^ (s) : lty ]].

  [[ Min(ord, lt) ^ (s, ty) ]] :=
    LabelOrd[[ ord ^ (s) ]],
    lty is `path-wf-to-data-ord` of ty,
    [[ lt ^ (s) : lty ]].

  LabelOrd[[ [] ^ (s) ]].
  LabelOrd[[ prs@[_|_] ^ (s) ]] :=
    Map1[[ prs ^ (s) ]].

/******************************************************************
 * Sorts & Constructors                                           *
 ******************************************************************/

  [[ Sorts(sorts) ^ (s) ]] :=
    Map1(SortDecl)[[ sorts ^ (s) ]].

  SortDecl[[ SortDecl(x) ^ (s) ]] :=
    Sort{x} <- s, @x.decl := Sort{x},
    Sort{x} : SORT(Sort{x}) !!,
    Sort{x}.kind := SimpleSort().

  SortDecl[[ SortAlias(x, sort) ^ (s) ]] :=
    Sort{x} <- s, @x.decl := Sort{x},
    Sort{x} : ty !!,
    Sort{x}.kind := SortAlias(),
    SortRef[[ sort ^ (s) : ty ]].

  [[ Constructors(ctors) ^ (s) ]] :=
    Map1[[ ctors ^ (s) ]].

  [[ OpDecl(x, sort) ^ (s) ]] :=
    x' is `op-name` of (x, sort),
    Op{x'@x} <- s, @x.decl := Op{x'@x},
    Op{x'@x} : ty !!,
    OpSort[[ sort ^ (s) : ty ]].

  OpSort[[ ConstOp(sort) ^ (s) : OP([], ty) ]] :=
    RealSortRef[[ sort ^ (s) : ty ]].

  OpSort[[ ArrowOp(args, sort) ^ (s) : OP(tys, ty) ]] :=
    Map1T(SortRef)[[ args ^ (s) : tys ]],
    RealSortRef[[ sort ^ (s) : ty ]].

  RealSortRef[[ SimpleSort(x) ^ (s) : ty ]] :=
    Sort{x} -> s, Sort{x} |-> d, @x.decl := d,
    d : ty !,
    d.kind := k, k != SortAlias() | error $[Cannot refer to alias [d]].

  SortRef[[ IntSort() ^ (_) : INT() ]].
  SortRef[[ StringSort() ^ (_) : STRING() ]].
  SortRef[[ OccurrenceSort() ^ (_) : OCCURRENCE() ]].
  SortRef[[ PathSort() ^ (_) : PATH() ]].
  SortRef[[ LabelSort() ^ (_) : LABEL() ]].
  SortRef[[ ScopeSort() ^ (_) : SCOPE() ]].
  SortRef[[ TermIdSort() ^ (_) : TERM_ID() ]].
  SortRef[[ TupleSort(sorts) ^ (s) : TUPLE(tys) ]] :=
    Map1T(SortRef)[[ sorts ^ (s) : tys ]].
  SortRef[[ ListSort(sort) ^ (s) : LIST(ty) ]] :=
    SortRef[[ sort ^ (s) : ty ]].
  SortRef[[ SimpleSort(x) ^ (s) : ty ]] :=
    Sort{x} -> s, Sort{x} |-> d, @x.decl := d,
    d : ty.

  [[ SimpleType(sorts) ^ (s) : PRED(intys) ]] :=
    Map1T(SortRef)[[ sorts ^ (s) : intys ]].


/******************************************************************
 * Terms                                                          *
 ******************************************************************/

  Match[[ t ^ (s) : ty ]] :=
    Term(NonUniqueVarDecl)[[ t ^ (s) : ty ]].

  Build[[ t ^ (s) : ty ]] :=
    Term(VarRef)[[ t ^ (s) : ty ]].

  NonUniqueVarDecl[[ Var(x) ^ (s) : ty ]] :=
    Var{x @s} <- s, @x.decl := Var{x @s},
    Var{x @s} : ty !.

  NonUniqueVarDecl[[ Wld() ^ (_) : _ ]].

  VarDecl[[ Var(x) ^ (s) : ty ]] :=
    Var{x} <- s, @x.decl := Var{x},
    Var{x} : ty !.

  VarDecl[[ Wld() ^ (_) : _ ]].

  VarRef[[ Var(x) ^ (s) : ty ]] :=
    Var{x} -> s, Var{x} |-> d, @x.decl := d,
    d : ty.

  VarRef[[ Wld() ^ (_) : _ ]].

  Term(V)[[ v@Var(_) ^ (s) : ty ]] :=
    V[[ v ^ (s) : ty ]].
  Term(V)[[ Wld() ^ (_) : ty ]].
  Term(V)[[ List(ts) ^ (s): LIST(ty) ]] :=
    Map1t(Term(V))[[ ts ^ (s) : ty ]].
  Term(V)[[ ListTail(ts, t) ^ (s) : LIST(ty) ]] :=
    Map1t(Term(V))[[ ts ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : LIST(ty) ]].
//Term(V)[[ ListLength(t) ^ (s): INT() ]] :=
//  Term(V)[[ t ^ (s) : LIST(_) ]].
  Term(V)[[ Tuple(ts) ^ (s) : TUPLE(tys) ]] :=
    Map1T(Term(V))[[ ts ^ (s) : tys ]].
  Term(V)[[ Op(x, args) ^ (s) : ty ]] :=
    x' is `op-name` of (x, args),
    Op{x'@x} -> s, Op{x'@x} |-> d, @x.decl := d,
    d : OP(tys, ty),
    Map1T(Term(V))[[ args ^ (s) : tys ]].
  Term(V)[[ Str(_) ^ (_) : STRING() ]].
//Term(V)[[ StrBuild(ts) ^ (s) : STRING() ]] :=
//  Map1T(Term(V))[[ ts ^ (s) : _ ]].
  Term(V)[[ Int(_) ^ (_) : INT() ]].
  Term(V)[[ As(v, t) ^ (s) : ty ]] :=
    V[[ v ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty ]].
  Term(V)[[ Ascribe(t, sort) ^ (s) : ty ]] :=
    SortRef[[ sort ^ (s) : ty ]],
    Term(V)[[ t ^ (s) : ty ]].

rules

  Map1t(X)[[ [x|xs] ^ (s) : ty ]] :=
    X[[ x ^ (s) : ty ]],
    Map1t(X)[[ xs ^ (s) : ty ]].

  Map1t(X)[[ [] ^ (s) : _ ]].
