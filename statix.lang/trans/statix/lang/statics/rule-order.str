module statix/lang/statics/rule-order

imports

  libspoofax/term/origin

  signatures/statix/lang/-

  statix/lang/statics/util
  statix/lang/pp

rules

  detect-overlapping-rules: ast -> or-e*
    with
      head*   := <collect-om(?Rule(<id>, _, _), conc)> ast
    ; o-head* := <partitions(rule-head-cmp(patterns-eq))> head*
    ; or-e*   := <filter(overlap-errors);concat> o-head*

  rule-head-cmp(s): (C(x1, p1*), C(x2, p2*)) -> <id>
    where
      <raw-eq> (x1, x2)
    ; <s> (Tuple(p1*), Tuple(p2*))

  rule-head-cmp(s): (F(x1, p1*, _), F(x2, p2*, _)) -> <id>
    where
      <raw-eq> (x1, x2)
    ; <s> (Tuple(p1*), Tuple(p2*))

  overlap-errors: heads -> e*
    where
      [_,_|_] := heads
    with
      head-str* := <map(!$[`[<pp-partial-Statix-string>]' at line [<origin-line;inc;int-to-string>]])> heads
    ; heads-str := <separate-by(|", ");concat-strings> head-str*
    ; e* := <map(\ c -> (c, $[Overlapping rules [heads-str]]) \)> heads

rules

  compare-patterns =
    prim("STX_compare_patterns")

  patterns-eq =
    try(pattern-lists-to-tuples);
    compare-patterns; <eq> (<id>, 0)

  patterns-lt =
    try(pattern-lists-to-tuples);
    compare-patterns; <lt> (<id>, 0)

  patterns-leq =
    try(pattern-lists-to-tuples);
    compare-patterns; <lt+eq> (<id>, 0)

  patterns-gt =
    try(pattern-lists-to-tuples);
    compare-patterns; <gt> (<id>, 0)

  patterns-geq =
    try(pattern-lists-to-tuples);
    compare-patterns; <gt+eq> (<id>, 0)

  pattern-lists-to-tuples =
    (!Tuple(<is-list>), !Tuple(<is-list>))
