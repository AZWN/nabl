module statix/lang/statics/hacks

imports

  signatures/nabl2/shared/constraints/-

  signatures/statix/lang/-
  statix/lang/statics/-

rules

  op-name: (x, ts) -> $[[x]/[<int-to-string> n]]
    with n := < is-list; length
              + ?ConstOp(_); !0
              + ?ArrowOp(<id>, _); length
              > ts

rules

  lifts-some: (lifts, _, msginfo) -> CTrue(msginfo)
    where <getfirst(?ListLift())> lifts

rules

  inout-type = inout-types; tys-to-ty
  inout-types: PRED(tys)          -> tys
  inout-types: FUN(intys, outtys) -> <conc> (intys, outtys)

  in-type = in-types; tys-to-ty
  in-types: PRED(tys)          -> tys
  in-types: FUN(intys, outtys) -> intys

  out-type = out-types; tys-to-ty
  out-types: PRED(tys)          -> []
  out-types: FUN(intys, outtys) -> outtys

  tys-to-ty: [ty] -> ty
  tys-to-ty: tys  -> TUPLE(tys)
    where not([_] := tys)

rules

  lift-to-lifts: TupleLift(lifts) -> lifts
  lift-to-lifts: lift -> [lift]
    where not(TupleLift(_) := lift)

  lift-types = zip; map(lift-type)

  lift-type: (IdLift(), ty) -> ty
  lift-type: (ListLift(), ty) -> LIST(ty)

rules

  path-wf-to-data-wf: EDGE() -> PRED([])
  path-wf-to-data-wf: DATA(ty) -> PRED([<in-type> ty])

  path-wf-to-data-ord: EDGE() -> PRED([])
  path-wf-to-data-ord: DATA(ty) -> PRED([<in-type> ty, <in-type> ty])

  path-wf-to-result: EDGE() -> PATH()
  path-wf-to-result: DATA(ty) -> TUPLE([PATH(), /*LABEL(),*/ <inout-type> ty]) // FIXME label

rules

