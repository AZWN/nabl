module statix/lang/generate

imports

  libstrc

  libspoofax/core/language
  
  nabl2/api

  signatures/statix/lang/-
  statix/lang/statics/-

rules

  generate-aterm:
      (_, _, ast@Module(name, _), path, project-path) -> result
    where a   := <nabl2-get-resource-analysis> $[[project-path]/[path]];
          ext := <nabl2-get-custom-analysis> a
    with if <nabl2-analysis-has-errors> a then
           result := None()
         else
           filename := <src-gen-file(|"statix/", ".spec.aterm")> ast;
           spec     := <spec-ast-to-aterm(|a)> (name, ext);
           result   := (filename, spec)
         end
 
rules

  src-gen-file(|sub-dir, ext): name -> filename
    with filename := $[[<src-gen-dir(|sub-dir)>]/[name][ext]]

  src-gen-dir(|sub-dir): _ -> dirname
    with dirname := <language-srcgen-dir> sub-dir

rules

  spec-ast-to-aterm(|a): (ast, ext) -> spec
    with s_mod := <nabl2-get-ast-property(|a,"scope")> ast
       ; d* := <nabl2-get-visible-decls(|a)> s_mod
       ; edge* := <filter(edge-to-aterm(|a));strip-annos> d*
       ; data* := <filter(data-to-aterm(|a));strip-annos> d*
       ; rule* := <filter(rule-to-aterm(|a));strip-annos;eliminate-all> d*
       ; spec := (edge*, data*, rule*, ext)

  edge-to-aterm(|a): d -> ast
    where "Edge" := <nabl2-get-occurrence-ns> d
    with
      ast := <nabl2-get-property(|a, "ast")> d

  data-to-aterm(|a): d -> (ast, ty)
    where "Data" := <nabl2-get-occurrence-ns> d
    with
      ast := <nabl2-get-property(|a, "ast")> d
    ; ty  := <nabl2-get-type(|a)> d

  rule-to-aterm(|a): d -> ast
    where "Rule" := <nabl2-get-occurrence-ns> d
    with
      ast := <nabl2-get-property(|a, "ast")> d

rules

  eliminate-all =
    eliminate-ascribe

  eliminate-ascribe = topdown(try(\ Ascribe(t, _) -> t \))
