module statix/lang/generate

imports

  libstrc

  libspoofax/core/language
  
  nabl2/api

  signatures/statix/lang/-
  statix/lang/analysis
  statix/lang/normalize

rules

  generate-aterm:
      (_, _, ast@Module(name, _), path, project-path) -> result
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]]
    with if fail ; <nabl2-analysis-has-errors> a then
           result := None()
         else
           ast' := <normalize(|a)> ast;
           CustomAnalysis(ext) := <nabl2-get-custom-analysis> a;
           spec     := <core-ast-to-spec-aterm> (ast', ext);
           filename := <src-gen-file(|"statix/", ".spec.aterm")> name;
           result   := (filename, spec)
         end
 
rules

  src-gen-file(|sub-dir, ext): name -> filename
    with filename := $[[<src-gen-dir(|sub-dir)>]/[name][ext]]

  src-gen-dir(|sub-dir): _ -> dirname
    with dirname := <language-srcgen-dir> sub-dir

rules

  core-ast-to-spec-aterm: (ast, ext) -> spec
    with edge* := <collect-all(?Labels(<id>));concat> ast
       ; data* := [Decl()|<collect-all(?RelDecl(<id>, _))> ast]
       ; rule* := <collect-all(?Rule(_, _, _))> ast
       ; spec  := <strip-annos;eliminate-all> (edge*, data*, EOP(), rule*, ext)

rules

  eliminate-all =
    eliminate-ascribe

  eliminate-ascribe = topdown(try(\ Ascribe(t, _) -> t \))
