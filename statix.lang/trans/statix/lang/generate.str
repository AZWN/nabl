module statix/lang/generate

imports

  libstrc

  libspoofax/core/language
  libspoofax/resource/path
  libspoofax/term/annotation

  nabl2/api

  signatures/statix/lang/-
  pp/statix/lang/-
  statix/lang/analysis
  statix/lang/normalize

  statix/runtime/analysis

signature
  constructors
    OfSort : SortRef -> Annotation

rules

  generate-aterm:
      (_, _, ast@Module(name, _), path, project-path) -> result
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]]
    with filename := <stx--module-path> name
       ; if <nabl2-analysis-has-errors> a then
           spec := <empty-spec> // FIXME Change generation to work as well as possible on results with errors
         else
           spec := <generate-aterm'(|a)> ast
         end
       ; result := (filename, spec)

  generate-aterm'(|a):
      ast@Module(_, _) -> spec
    with ast' := <normalize(|a)> ast
       ; CustomAnalysis(ext) := <nabl2-get-custom-analysis> a
       ; spec     := <core-ast-to-spec-aterm(|a)> (ast', ext)

rules

  generate-combined-aterm = generate-aterm; \(filename, ast) -> (filename, spec) with spec := <stx--local-spec-from-spec> ast\
 
rules

  core-ast-to-spec-aterm(|a): (ast, ext) -> spec
    with import* := <collect-all(?Imports(<map(?Import(<id>))>));concat;remove-term-annos> ast
       ; edge* := <collect-all(?Labels(<map(qualify-name(|a))>));concat;remove-term-annos> ast
       ; data* := [Decl()|<collect-all(?RelDecl(<qualify-name(|a)>, _));remove-term-annos> ast]
       ; rule* := <collect-all(?Rule(_, _, _);qualify-names(|a));remove-term-annos;eliminate-all> ast
       ; ext' := <qualify-names(|a);remove-term-annos> ext
       ; spec := FileSpec(import*, edge*, data*, EOP(), rule*, ext')

  remove-term-annos =
    bottomup(
      try( (is-Statix-Var + is-Statix-Term + is-Statix-Int + is-Statix-Str)
         ; add-annotation(|OfSort(<nabl2-get-anno-type>))
         )
    ; remove-annotations(not(?OfSort(_)))
    )

  empty-spec = !FileSpec([], [], [], EOP(), [], [])

  qualify-names(|a) = bottomup(try(qualify-name(|a)))

  qualify-name(|a) = C(get-qname(|a), id)
  qualify-name(|a) = C(get-qname(|a), id, id)
  qualify-name(|a) = Label(get-qname(|a))
  qualify-name(|a) = Occurrence(get-qname(|a), id, id)
  // FIXME Requires qualified sorts and constructors from the parser
//qualify-name(|a) = SimpleSort(get-qname(|a))
//qualify-name(|a) = Op(get-qname(|a), id)

  get-qname(|a): x -> <stx--mk-qualified-name(|qname)> name
    with d := <nabl2-get-ast-property(|a, "decl")> x
       ; name := <nabl2-get-occurrence-name> d
       ; qname := <nabl2-get-property(|a, "qname")> d

rules

  eliminate-all =
    eliminate-ascribe

  eliminate-ascribe = topdown(try(\ Ascribe(t, _) -> t \))
