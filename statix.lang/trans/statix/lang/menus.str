module statix/lang/menus

imports

  nabl2/api

  signatures/statix/lang/-
  statix/lang/-
  statix/lang/statics/-
  statix/lang/normalize
  statix/lang/nonoverlapping

  pp

rules // Parsing

  show-parsed-aterm: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path;
         result   := ast

  format-parsed: (_, _, ast, path, project-path) -> (filename, result)
    with ext      := <get-extension> path;
         filename := <guarantee-extension(|$[formatted.[ext]])> path;
         result   := <pp-Statix-string> ast

rules // Desugaring

  show-desugared-aterm: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"desugared.aterm")> path;
         result   := <desugar-all> ast

  format-desugared: (_, _, ast, path, project-path) -> (filename, result)
    with ext      := <get-extension> path;
         filename := <guarantee-extension(|$[desugared.[ext]])> path;
         result   := <desugar-all;pp-Statix-string> ast

rules // Analysis

  show-analyzed-aterm: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path;
         result   := <nabl2-simplify-ast-indices> ast

  format-analyzed: (_, _, ast, path, project-path) -> (filename, result)
    with ext      := <get-extension> path;
         filename := <guarantee-extension(|$[analyzed.[ext]])> path;
         result   := <pp-Statix-string> ast

rules // Normalization

  show-normalized-aterm: (_, _, _, path, project-path) -> (filename, result)
    where ast := <get-normalized-ast>
    with filename := <guarantee-extension(|"normalized.aterm")> path;
         result   := <nabl2-simplify-ast-indices> ast

  format-normalized: (_, _, _, path, project-path) -> (filename, result)
    where ast := <get-normalized-ast>
    with ext      := <get-extension> path;
         filename := <guarantee-extension(|$[normalized.[ext]])> path;
         result   := <pp-Statix-string> ast

  get-normalized-ast: (_, _, ast, path, project-path) -> ast'
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]];
          <not(nabl2-analysis-has-errors)> a
    with ast' := <normalize(|a)> ast

rules // Non-overlapping rules

  show-nonoverlapping-aterm: (_, _, _, path, project-path) -> (filename, result)
    where ast := <get-nonoverlapping-ast>
    with filename := <guarantee-extension(|"normalized.aterm")> path;
         result   := <nabl2-simplify-ast-indices> ast

  format-nonoverlapping: (_, _, _, path, project-path) -> (filename, result)
    where ast := <get-nonoverlapping-ast>
    with ext      := <get-extension> path;
         filename := <guarantee-extension(|$[nonoverlapping.[ext]])> path;
         result   := <pp-Statix-string> ast

  get-nonoverlapping-ast: (_, _, ast, path, project-path) -> ast'
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]];
          <not(nabl2-analysis-has-errors)> a
    with ast' := <normalize(|a);make-nonoverlapping(|a)> ast
