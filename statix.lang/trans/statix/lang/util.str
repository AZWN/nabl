module statix/lang/util

imports

  libspoofax/term/annotation
  libspoofax/term/origin

  signatures/statix/lang/-

rules

  is-var = ?Var(_)

  all-vars = collect-all(is-var)

rules

  keep-origin(s) = origin-track-forced(s)

  with-origin(|t) = ?u; <keep-origin(!u)> t

rules

  unzip3 = ?[(x,y,z)|xyz*] < <unzip3> xyz* => (x*,y*,z*); !([x|x*],[y|y*],[z|z*]) + !([],[],[])
  unzip4 = ?[(x,y,z,a)|xyza*] < <unzip4> xyza* => (x*,y*,z*,a*); !([x|x*],[y|y*],[z|z*],[a|a*]) + !([],[],[],[])

  fold1(s) = ?[<id>] <+ foldr1(s)

  raw-eq = where((strip-annos, strip-annos); eq)
  raw-union = union(raw-eq)
  raw-unions = fold1(raw-union)
  raw-isect = isect(raw-eq)
  raw-isects = fold1(raw-isect)
  raw-elem = elem(raw-eq)
  raw-lookup = lookup((id,Fst);raw-eq);Snd
  raw-diff = diff(raw-eq) 
  raw-make-set = foldr(![], union(raw-eq), ![<id>]) 

  topdown-om(s) = s <+ all(topdown-om(s))

  group-by(s): [] -> []
  group-by(s): [x|ys] -> [xs|<group-by(s)> ys']
    with
      (xs', ys') := <partition(\ x' -> x' where <s> (x, x') \)> ys
    ; xs := [x|xs']

rules

  // collect-map(s: a -> b, guard: a -> a) : x -> (x, [(a * b)])
  // apply bottomup and collect the substitutions that were done

  collect-map(s) = collect-map(s, id)

  collect-map(s, guard): t -> (t'', maps)
    where where(guard); c#(ts){a*} := t
    with (ts', tsmaps) := <map(collect-map(s, guard)); unzip; (id, concat)> ts;
         t' := <with-origin(|t)> c#(ts'){a*};
         (t'', tmaps) := <keep-origin(s) < !(<id>, [(t', <id>)]) + !(<id>, [])> t';
         maps := <conc> (tmaps, tsmaps)

  collect-map(s, guard): t{a*} -> (t{a*}, [])
    where not(guard) + not(c#(_) := t)
