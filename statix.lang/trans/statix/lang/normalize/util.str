module statix/lang/normalize/util

imports

  libspoofax/term/annotation
  libspoofax/term/origin

  nabl2/shared/vars
  nabl2/api

  signatures/statix/lang/-
  statix/lang/statics/-

rules

  norm-get-ast-type =
    nabl2-get-anno-type
 <+ fatal-err(|"Missing AST type")

  norm-set-ast-type(|ty) =
    nabl2-set-anno-type(|ty)

  norm-copy-ast-type(|t) =
    nabl2-copy-anno-type(|t)

  norm-get-ast-property(|a,prop) =
    not(nabl2-get-ast-index)
  < fatal-err(|"Missing AST index")
  + nabl2-get-ast-property(|a,prop)

  norm-get-ast-decl-type(|a) =
    not(nabl2-get-ast-index)
  < fatal-err(|"Missing AST index")
  + nabl2-get-ast-property(|a,"decl")
  ; nabl2-get-type(|a)

  norm-get-ast-decl-property(|a,prop) =
    not(nabl2-get-ast-index)
  < fatal-err(|"Missing AST index")
  + nabl2-get-ast-property(|a,"decl")
  ; nabl2-get-property(|a,prop)

  norm-preserve-ast-type(s) =
    nabl2-preserve-anno-type(s)

rules

  // replace : old:Term -> new:Term
  // to-c : (old:Term, new:Term) -> Constraint

  normalize-in-rules(replace,add-vars,to-c):
      Rule(head, bvs, body){a*} -> Rule(head, bvs', body''){a*}
    with (body', bmaps) := <collect-map(replace, not-in-lambda)> body;
         body'' := <filter(to-c);list-to-conj(|body')> bmaps;
         new-bvs := <filter((add-vars,id);Snd);all-vars> bmaps;
         bvs' := <conc> (bvs, new-bvs)

  normalize-in-rules(replace,add-vars,to-c):
      LLam(ts, bvs, body){a*} -> LLam(ts, bvs', body''){a*}
    with (body', bmaps) := <collect-map(replace, not-in-lambda)> body;
         body'' := <filter(to-c);list-to-conj(|body')> bmaps;
         new-bvs := <filter((add-vars,id);Snd);all-vars> bmaps;
         bvs' := <conc> (bvs, new-bvs)

  not-in-lambda = not(?LLam(_, _, _))

rules

  make-fresh-vars(|x) = map(make-fresh-var(|x))

  make-fresh-var(|x) = <norm-set-ast-type(|<id>)> Var(<newname> x)

  make-wildcards = map(make-wildcard)

  make-wildcard = <norm-set-ast-type(|<id>)> Wld()

  make-seq-vars(|x) = ?[ty] < ![<norm-set-ast-type(|ty)> Var(x)] + map-with-index(make-seq-var)

  make-seq-var(|x) = <norm-set-ast-type(|<Snd>)> Var($[[x][<Fst;int-to-string>]])

  list-to-conj(|tl): []     -> tl
  list-to-conj(|tl): [C|Cs] -> CConj(C, <list-to-conj(|tl)> Cs)

  list-to-conj: []     -> CTrue()
  list-to-conj: [C]    -> C
  list-to-conj: [C|Cs] -> CConj(C, <list-to-conj> Cs)

  type-to-sort: SORT(d)      -> SimpleSort(<nabl2-get-occurrence-name> d)
  type-to-sort: INT()        -> IntSort()
  type-to-sort: STRING()     -> StringSort()
  type-to-sort: PATH()       -> PathSort()
  type-to-sort: LABEL()      -> LabelSort()
  type-to-sort: OCCURRENCE() -> OccurrenceSort()
  type-to-sort: SCOPE()      -> ScopeSort()
  type-to-sort: AST_ID()     -> AstIdSort()
  type-to-sort: LIST(ty)     -> ListSort(<type-to-sort> ty)
  type-to-sort: TUPLE(tys)   -> TupleSort(<map(type-to-sort)> tys)

  type-to-sort: PRED(tys)         -> SimpleType(<map(type-to-sort)> tys)
  type-to-sort: FUN(intys, outty) -> FunType(<map(type-to-sort)> intys, <type-to-sort> outty)

  fun-to-pred-type:
      FUN(intys, outty) -> PRED(<conc> (intys, [outty]))

  fun-to-pred-type:
      FunType(insorts, outsort) -> SimpleType(<conc> (insorts, [outsort]))

  sort-args': SimpleType(args) -> args

  match-terms(|tys): t -> ts
    where if [_] := tys then
            ts := <![<id>]> t
          else
            ts := <?Tuple(<id>)> t
          end

  build-terms(|tys): ts -> <norm-set-ast-type(|ty)> t
    with ty := <build-types> tys;
         if [_] := tys then
           t := <?[<id>]> ts
         else
           t := <!Tuple(<id>)> ts
         end

  build-types = ?[<id>] <+ !TUPLE(<id>)
