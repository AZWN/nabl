module statix/lang/normalize/terms

imports

  libspoofax/term/annotation
  libspoofax/term/origin

  nabl2/shared/vars
  nabl2/api

  signatures/statix/lang/-
  statix/lang/statics/-
  statix/lang/normalize/util

rules

  // normalization for a bunch of context-free things that appear in terms
  // none of these depend on analysis

  normalize-terms =
    nabl2-custom-analysis-info-msg(|"| Normalize terms...");
    bottomup(
      try(normalize-ast-ids)
    ; try(normalize-scoped(replace-pattern,fail,not(pattern-no-add),pattern-to-c))
    ; try(normalize-scoped(replace-term,id,id,term-to-c))
    )


  normalize-ast-ids = WithId(normalize-term-or-id)
  normalize-ast-ids = CAstProperty(normalize-term-or-id, id, id)

  normalize-term-or-id: t -> t'
    with ty := <norm-get-ast-type> t
    where <not(?AST_ID() + ?SCOPE() + nabl2--is-var + nabl2--is-wld)> ty
    with t' := <norm-set-ast-type(|AST_ID())> AstIdOp(t)


  replace-pattern: t@Wld() -> v
    with ty := <norm-get-ast-type> t
       ; v := <mk-fresh-Var(|ty)>("wld")

  pattern-to-c: (Wld(), _) -> <fail>


  replace-pattern: As(v, t) -> v

  pattern-to-c: (As(v, t), _) -> CEqual(v, t, NoMessage())

  pattern-no-add = ?As(_, _)


  replace-term: t@NewOp() -> v
    with ty := <norm-get-ast-type> t
       ; v := <mk-fresh-Var(|ty)>("new")

  term-to-c: (NewOp(), v) -> CNew([v])


  replace-term: t@AstIdOp(_) -> v
    with ty := <norm-get-ast-type> t
       ; v := <mk-fresh-Var(|ty)>("astId")

  term-to-c: (AstIdOp(t), v) -> CAstId(t, v)


  replace-term: t@ArithOp(ae) -> v
    with ty := <norm-get-ast-type> t
       ; v := <mk-fresh-Var(|ty)>("n")

  term-to-c: (ArithOp(ae), v) -> CArith(v, Equal(), ae, NoMessage())
