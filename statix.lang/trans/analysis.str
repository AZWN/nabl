module analysis

imports

  nabl2shared
  nabl2runtime
  nabl2/api
  nabl2/runtime/analysis/main

  signatures/-

  statics/-

  pp

rules // Analysis

  editor-analyze = nabl2-analyze(desugar-all)

  nabl2-custom-analysis-unit-hook:
      (resource, ast, _) -> ast

  nabl2-custom-analysis-final-hook(|a):
      (resource, _, [ast]) -> (error*, warning*, note*, (ast', ext*))
    where <not(nabl2-analysis-has-errors)> a
    with nabl2-custom-analysis-info-msg(|"Normalizing AST...");
         ast' := <normalize-all(|a)> (resource, ast);
         nabl2-custom-analysis-info-msg(|"Normalized AST.");

         nabl2-custom-analysis-info-msg(|"Checking guard constraints...");
         c-e* := <check-rule-constraints> ast';
         nabl2-custom-analysis-info-msg(|"Checked guard constraints.");

         nabl2-custom-analysis-info-msg(|"Computing scope extensions...");
         (ext*, ext-e*, ext-w*, ext-n*) := <compute-scope-extensions> ast';
         nabl2-custom-analysis-info-msg(|"Computed scope extensions.");

         error*   := [c-e*, ext-e*];
         warning* := [ext-w*];
         note*    := [ext-n*]

  normalize-all(|a): (resource, ast) -> ast'
    with (ast1, a1) := <normalize-phase1(|a);reanalyze(|resource)> ast;
         (ast2, a2) := <normalize-phase2(|a1);reanalyze(|resource)> ast1;
         ast' := ast2

  reanalyze(|resource): ast -> (ast', a')
    with (ast', a', _, _, _) := <nabl2-erase-ast-indices;nabl2-analyze-ast(|resource)> ast;
         if <nabl2-analysis-has-errors> a' then
           warn-msg(|"***************************************************************");
           warn-msg(|"* Normalized AST has errors. Normalization needs to be fixed! *");
           warn-msg(|"***************************************************************")
         end

  nabl2-prettyprint-hook       = prettyprint-StatixLang-IType
  prettyprint-StatixLang-IType = nabl2-prettyprint-term

  nabl2-prettyprint-hook       = prettyprint-StatixLang-TType
  prettyprint-StatixLang-TType = nabl2-prettyprint-term

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := ast

  format-aterm: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"formatted.stx")> path
       ; result   := <pp-StatixLang-string> ast


  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := <nabl2-simplify-ast-indices> ast

  format-analyzed: (_, _, ast, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.stx")> path
       ; result   := <pp-StatixLang-string> ast


  // Prints the normalized annotated abstract syntax ATerm of a selection.
  debug-show-normalized: (_, _, ast, path, project-path) -> (filename, result)
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]];
          <not(nabl2-analysis-has-errors)> a
    with filename := <guarantee-extension(|"normalized.aterm")> (path, path)
       ; result   := <normalize-all(|a);nabl2-simplify-ast-indices> ast

  format-normalized: (_, _, ast, path, project-path) -> (filename, result)
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]];
          <not(nabl2-analysis-has-errors)> a
    with filename := <guarantee-extension(|"normalized.stx")> path
       ; result   := <normalize-all(|a);pp-StatixLang-string> (path, ast)


  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-explicated: (_, _, ast, path, project-path) -> (filename, result)
    where a := <nabl2-get-resource-analysis> $[[project-path]/[path]];
          <not(nabl2-analysis-has-errors)> a
    with filename := <guarantee-extension(|"explicated.aterm")> path
       ; result   := <normalize-all(|a);explicate-all(|a);nabl2-simplify-ast-indices> (path, ast)
