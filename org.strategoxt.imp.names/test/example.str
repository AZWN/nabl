module example

imports
  lib/analysis-library
  lib/analysis-library-internal
  lib/index-library


imports
  include/Entity


signature
  constructors
    Type : DefDataKind

  constructors
    entity   : Namespace
    property : Namespace
    variable : Namespace
    method   : Namespace


rules

  nam-get-scope-types :
    Entity(name, _) -> [ (property(), Anon())
                       , (method(), Anon())
                       ]

  nam-get-definition-keys :
    Entity(name, _) -> [name]

  nam-get-definitions :
    Entity(name, _) -> [(entity(), name)]

  nam-annotate-names =
    Entity(nam-annotate-def(|entity()), id)

  adjust-index-def-data(store|namespace, path):
    Entity(name, _) -> <store> DefData(path, Type(), name)

  type-of :
    Entity(name, _) -> name


rules

  nam-get-scope-types :
    Entity(name, super, _) -> [ (property(), Anon())
                              , (method(), Anon())
                              ]

  nam-get-definition-keys :
    Entity(name, super, _) -> [name]

  nam-get-definitions :
    Entity(name, super, _) -> [(entity(), name)]

  nam-annotate-names =
    Entity(
      nam-annotate-def(|entity())
    , nam-annotate-use(|entity())
    , id
    )

  adjust-index-def-data(store|namespace, path):
    Entity(name, super, _) -> <store> DefData(path, Type(), name)

  type-of :
    Entity(name, super, _) -> name


rules

  nam-get-definition-keys :
    Property(x, t) -> [x]

  nam-get-definitions :
    Property(x, t) -> [(property(), x)]

  nam-annotate-names =
    Property(nam-annotate-def(|property()), id)

  adjust-index-def-data(store|namespace, path):
    Property(x, t) -> <store> DefData(path, Type(), t)

  type-of :
    Property(x, t) -> t


rules

  type-of :
    PropertyAccess(exp, f) -> t
    where [t] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp


rules

  adjust-index-def-data(store|namespace, path):
    For(x, t, e, f, elem*) -> <store> DefData(path, Type(), t)

  type-of :
    For(x, t, e, f, elem*) -> t


rules

  nam-get-definition-keys :
    VarDecl(x, t, e) -> [x]

  nam-get-definitions :
    VarDecl(x, t, e) -> [(variable(), x)]

  nam-annotate-names =
    VarDecl(nam-annotate-def(|variable()), id, id)

  adjust-index-def-data(store|namespace, path):
    VarDecl(x, t, e) -> <store> DefData(path, Type(), t)

  type-of :
    VarDecl(x, t, e) -> t


rules

  nam-get-definition-keys :
    VarDecl(x, e) -> [x]
    where t := <type-of> e

  nam-get-definitions :
    VarDecl(x, e) -> [(variable(), x)]
    where t := <type-of> e

  nam-annotate-names =
    VarDecl(nam-annotate-def(|variable()), id)

  adjust-index-def-data(store|namespace, path):
    VarDecl(x, e) -> <store> DefData(path, Type(), t)
    where t := <type-of> e

  type-of :
    VarDecl(x, e) -> t
    where t := <type-of> e


rules

  nam-annotate-names =
    Var(nam-annotate-use(|variable()))

  type-of :
    Var(x) -> t
    where [t] := <index-lookup ; index-get-data-all(|Type())> x


rules

  nam-get-scope-types :
    Block(statement*) -> [(variable(), Anon())]


rules

  nam-get-scope-types :
    Method(f, param*, t, _) -> [(variable(), Anon())]
    where t* := <type-of> param*

  nam-get-definition-keys :
    Method(f, param*, t, _) -> [m(f, t*)]
    where t* := <type-of> param*

  nam-get-definitions :
    Method(f, param*, t, _) -> [ (method(), m(f, t*))
                               ]
    where t* := <type-of> param*

  nam-annotate-names =
    Method(id, id, id, id)

  adjust-index-def-data(store|namespace, path):
    Method(f, param*, t, _) -> <store> DefData(path, Type(), t)
    where t* := <type-of> param*

  type-of :
    Method(f, param*, t, _) -> t
    where t* := <type-of> param*


rules

  nam-get-definition-keys :
    Param(x, t) -> [x]

  nam-get-definitions :
    Param(x, t) -> [(variable(), x)]

  nam-annotate-names =
    Param(nam-annotate-def(|variable()), id)

  adjust-index-def-data(store|namespace, path):
    Param(x, t) -> <store> DefData(path, Type(), t)

  type-of :
    Param(x, t) -> t