module example

imports
  lib/index-library.generated
  lib/analysis-library.generated
  include/Entity


signature
  constructors
    Type     : DefDataKind
    entity   : Namespace
    property : Namespace
    variable : Namespace
    method   : Namespace


rules

  nam-get-definition-key :
    Entity(name, _) -> name

  nam-get-definition :
    Entity(name, _) -> <nam-get-def(|entity())> name

  nam-annotate-names(|path) =
    Entity(nam-annotate-def(|path), id)

  adjust-index-def-data(store|namespace, path):
    Entity(name, _) -> <store> DefData(path, Type(), name)

  type-of :
    Entity(name, _) -> name


rules

  nam-get-definition-key :
    Entity(name, super, _) -> name

  nam-get-definition :
    Entity(name, super, _) -> <nam-get-def(|entity())> name

  nam-annotate-names(|path) =
    Entity(
      nam-annotate-def(|path)
    , nam-annotate-use(|entity())
    , id
    )

  adjust-index-def-data(store|namespace, path):
    Entity(name, super, _) -> <store> DefData(path, Type(), name)

  type-of :
    Entity(name, super, _) -> name


rules

  nam-get-definition-key :
    Property(x, t) -> x

  nam-get-definition :
    Property(x, t) -> <nam-get-def(|property())> x

  nam-annotate-names(|path) =
    Property(nam-annotate-def(|path), id)

  adjust-index-def-data(store|namespace, path):
    Property(x, t) -> <store> DefData(path, Type(), t)

  type-of :
    Property(x, t) -> t


rules

  adjust-index-def-data(store|namespace, path):
    For(x, t, e, f, elem*) -> <store> DefData(path, Type(), t)

  type-of :
    For(x, t, e, f, elem*) -> t


rules

  nam-get-definition-key :
    VarDecl(x, t, e) -> x

  nam-get-definition :
    VarDecl(x, t, e) -> <nam-get-def(|variable())> x

  nam-annotate-names(|path) =
    VarDecl(nam-annotate-def(|path), id, id)

  adjust-index-def-data(store|namespace, path):
    VarDecl(x, t, e) -> <store> DefData(path, Type(), t)

  type-of :
    VarDecl(x, t, e) -> t


rules

  nam-get-definition-key :
    VarDecl(x, e) -> x
    where t := <type-of> e

  nam-get-definition :
    VarDecl(x, e) -> <nam-get-def(|variable())> x
    where t := <type-of> e

  nam-annotate-names(|path) =
    VarDecl(nam-annotate-def(|path), id)

  adjust-index-def-data(store|namespace, path):
    VarDecl(x, e) -> <store> DefData(path, Type(), t)
    where t := <type-of> e

  type-of :
    VarDecl(x, e) -> t
    where t := <type-of> e


rules

  nam-annotate-names(|path) =
    Var(nam-annotate-use(|variable()))

  type-of :
    Var(x) -> t
    where [t] := <index-lookup ; index-get-data-all(|Type())> x


rules

  nam-get-definition-key :
    Method(f, param*, t, _) -> m(f, t*)
    where t* := <type-of> param*

  nam-get-definition :
    Method(f, param*, t, _) -> <nam-get-def(|method())> m(f, t*)
    where t* := <type-of> param*

  nam-annotate-names(|path) =
    Method(id, id, id, id)

  adjust-index-def-data(store|namespace, path):
    Method(f, param*, t, _) -> <store> DefData(path, Type(), t)
    where t* := <type-of> param*

  type-of :
    Method(f, param*, t, _) -> t
    where t* := <type-of> param*


rules

  nam-get-definition-key :
    Param(x, t) -> x

  nam-get-definition :
    Param(x, t) -> <nam-get-def(|variable())> x

  nam-annotate-names(|path) =
    Param(nam-annotate-def(|path), id)

  adjust-index-def-data(store|namespace, path):
    Param(x, t) -> <store> DefData(path, Type(), t)

  type-of :
    Param(x, t) -> t