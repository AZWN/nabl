module example

imports
  lib/analysis-library
  lib/analysis-library-internal
  lib/index-library


imports
  include/Entity


signature
  constructors
    Type        : DefDataKind
    Import      : DefDataKind
    Transitive  : ImportAnno
    CurrentFile : ImportAnno

  constructors
    entity   : Namespace
    property : Namespace
    variable : Namespace
    method   : Namespace


rules

  nam-get-scope-types :
    Entity(name, _) -> [property(), method()]

  nam-get-definition-keys :
    Entity(name, _) -> [name]

  nam-get-definitions :
    Entity(name, _) -> [(entity(), [name])]

  nam-annotate-names(|paths__, path__):
    Entity(name, _) -> <Entity(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Entity(name, _) -> <store__> DefData(
                                   [namespace__|path__]
                                 , Type()
                                 , name
                                 )

  type-of :
    Entity(name, _) -> name

  nam-unique :
    Entity(name, _) -> <id>


rules

  nam-get-scope-types :
    Entity(name, super, _) -> [property(), method()]

  nam-get-definition-keys :
    Entity(name, super, _) -> [name]

  nam-get-definitions :
    Entity(name, super, _) -> [(entity(), [name])]

  nam-get-uses-keys :
    Entity(name, super, _) -> [super]

  nam-get-uses :
    Entity(name, super, _) -> [(entity(), [super])]

  nam-annotate-names(|paths__, path__):
    Entity(name, super, _) -> <Entity(
                                 nam-annotate-def(|path__)
                               , nam-annotate-use(|paths__, entity())
                               , id
                               )>

  adjust-index-def-data(store__|namespace__, path__):
    Entity(name, super, _) -> <store__> DefData(
                                          [namespace__|path__]
                                        , Type()
                                        , name
                                        )

  type-of :
    Entity(name, super, _) -> name

  nam-unique :
    Entity(name, super, _) -> <id>

  adjust-index-def-data(store__|namespace__, path__):
    Entity(name, super, _) -> <store__> DefData(
                                          [property()|path__]
                                        , Import()
                                        , (super, [])
                                        )

  adjust-index-def-data(store__|namespace__, path__):
    Entity(name, super, _) -> <store__> DefData(
                                          [method()|path__]
                                        , Import()
                                        , (super, [])
                                        )


rules

  nam-get-definition-keys :
    Property(x, t) -> [x]

  nam-get-definitions :
    Property(x, t) -> [(property(), [x])]

  nam-annotate-names(|paths__, path__):
    Property(x, t) -> <Property(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Property(x, t) -> <store__> DefData(
                                  [namespace__|path__]
                                , Type()
                                , t
                                )

  type-of :
    Property(x, t) -> t

  nam-unique :
    Property(x, t) -> <id>


rules

  nam-get-uses-keys :
    PropertyAccess(exp, f) -> [f]
    where [t] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp

  nam-get-uses :
    PropertyAccess(exp, f) -> [(property(), [f])]
    where [t] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp

  nam-annotate-names(|paths__, path__):
    PropertyAccess(exp, f) -> <PropertyAccess(id, nam-annotate-use(|paths__, property()))>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    PropertyAccess(exp, f) -> <index-lookup-children(|property(), prefix__)> e
    where <target__> f
    where [t] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp

  type-of :
    PropertyAccess(exp, f) -> t
    where [t] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp


rules

  nam-get-definition-keys :
    For(x, t, e, f, elem*) -> [x]

  nam-get-definitions :
    For(x, t, e, f, elem*) -> [ ( variable()
                                , [x, Anon(<new>)]
                                )
                              ]

  nam-annotate-scopes(|path__):
    For(x, t, e, f, elem*) -> <For(id, id, id, id, nam-annotate-scope(|path__))>

  nam-annotate-names(|paths__, path__):
    For(x, t, e, f, elem*) -> <For(nam-annotate-def(|path__), id, id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    For(x, t, e, f, elem*) -> <store__> DefData(
                                          [namespace__|path__]
                                        , Type()
                                        , t
                                        )

  type-of :
    For(x, t, e, f, elem*) -> t

  nam-unique :
    For(x, t, e, f, elem*) -> <id>


rules

  nam-get-definition-keys :
    VarDecl(x, t, e) -> [x]

  nam-get-definitions :
    VarDecl(x, t, e) -> [(variable(), [x])]

  nam-annotate-names(|paths__, path__):
    VarDecl(x, t, e) -> <VarDecl(nam-annotate-def(|path__), id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    VarDecl(x, t, e) -> <store__> DefData(
                                    [namespace__|path__]
                                  , Type()
                                  , t
                                  )

  type-of :
    VarDecl(x, t, e) -> t

  nam-unique :
    VarDecl(x, t, e) -> <id>


rules

  nam-get-definition-keys :
    VarDecl(x, e) -> [x]
    where t := <type-of> e

  nam-get-definitions :
    VarDecl(x, e) -> [(variable(), [x])]
    where t := <type-of> e

  nam-annotate-names(|paths__, path__):
    VarDecl(x, e) -> <VarDecl(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    VarDecl(x, e) -> <store__> DefData(
                                 [namespace__|path__]
                               , Type()
                               , t
                               )
    where t := <type-of> e

  type-of :
    VarDecl(x, e) -> t
    where t := <type-of> e

  nam-unique :
    VarDecl(x, e) -> <id>
    where t := <type-of> e


rules

  nam-get-uses-keys :
    Var(x) -> [x]
    where [t] := <index-lookup ; index-get-data-all(|Type())> x

  nam-get-uses :
    Var(x) -> [(variable(), [x])]
    where [t] := <index-lookup ; index-get-data-all(|Type())> x

  nam-annotate-names(|paths__, path__):
    Var(x) -> <Var(nam-annotate-use(|paths__, variable()))>

  type-of :
    Var(x) -> t
    where [t] := <index-lookup ; index-get-data-all(|Type())> x


rules

  nam-get-scope-types :
    Block(statement*) -> [variable()]


rules

  nam-get-scope-types :
    Method(f, param*, t, _) -> [variable()]
    where t* := <type-of> param*

  nam-get-definition-keys :
    Method(f, param*, t, _) -> [f]
    where t* := <type-of> param*

  nam-get-definitions :
    Method(f, param*, t, _) -> [(method(), [f])]
    where t* := <type-of> param*

  nam-annotate-names(|paths__, path__):
    Method(f, param*, t, _) -> <Method(nam-annotate-def(|path__), id, id, id)>

  adjust-index-def-data(store__|namespace__, path__):
    Method(f, param*, t, _) -> <store__> DefData(
                                           [namespace__|path__]
                                         , Type()
                                         , MT(t*, t)
                                         )
    where t* := <type-of> param*

  type-of :
    Method(f, param*, t, _) -> MT(t*, t)
    where t* := <type-of> param*

  nam-unique :
    Method(f, param*, t, _) -> <id>
    where t* := <type-of> param*


rules

  nam-get-definition-keys :
    Param(x, t) -> [x]

  nam-get-definitions :
    Param(x, t) -> [(variable(), [x])]

  nam-annotate-names(|paths__, path__):
    Param(x, t) -> <Param(nam-annotate-def(|path__), id)>

  adjust-index-def-data(store__|namespace__, path__):
    Param(x, t) -> <store__> DefData(
                               [namespace__|path__]
                             , Type()
                             , t
                             )

  type-of :
    Param(x, t) -> t

  nam-unique :
    Param(x, t) -> <id>


rules

  nam-get-uses-keys :
    MethodCall(exp, f, e*) -> [f]
    where [MT(t*, t)] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp
    where t* := <type-of> e*

  nam-get-uses :
    MethodCall(exp, f, e*) -> [(method(), [f])]
    where [MT(t*, t)] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp
    where t* := <type-of> e*

  nam-annotate-names(|paths__, path__):
    MethodCall(exp, f, e*) -> <MethodCall(
                                 id
                               , nam-annotate-use(|paths__, method())
                               , id
                               )>

  adjust-index-lookup(target__|namespace__, path__, prefix__):
    MethodCall(exp, f, e*) -> <index-lookup-children(|method(), prefix__)> e
    where <target__> f
    where [MT(t*, t)] := <index-lookup ; index-get-data-all(|Type())> f
    where e := <type-of> exp
    where t* := <type-of> e*