module generation/rules
  
imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/util
  generation/constraints
  generation/def-sites
  generation/use-sites
  
rules
  
  // TODO: support multiple definition sites
  nabl-to-str(|replace*, bound*, rule*): 
    BindingRule(pattern, constr*, parts) -> <id>
    where
      <hashtable-clear> replace*;
      <iset-clear> bound*
    where
      pattern':= <to-ppable-str> pattern;
      <iset-addlist(|<collect-all(?Var(_))> pattern')> bound*;
      task*  := <constraints-to-str(|replace*, bound*, rule*, 0)> constr*;
      scope* := <filter(?Scopes(<id>)); concat; map(nabl-to-str)> parts
    where
      <fetch-elem(def-to-str(|replace*, bound*, rule*, task*, pattern', scope*))> parts <+
      <iset-add(|SCOPE_RULE(pattern', <nonempty> scope*))> rule* <+
      id
    // where
    //   use* := <uses-to-str(|bnd*, rep*, n, cont, pattern)> parts
      
overlays
	
	SCOPE_RULE(pattern, scopes) =
  SDefT(
    "nabl-anonymous-scope-site"
  , [DefaultVarDec("child-uris")]
  , [DefaultVarDec("context"), DefaultVarDec("uris"), DefaultVarDec("states")]
  , Seq(
      Match(pattern)
    , CallT(
        SVar("nabl-anonymous-scope")
      , [CALL("child-uris")]
      , [ Var("context"), Var("uris"), LIST(scopes) ]
      )
    )
  )
    
  