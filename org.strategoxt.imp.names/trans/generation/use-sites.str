module generation/use-sites

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/util
  generation/main
  generation/constraints

rules
  
  uses-to-str(|bnd*, rep*, n, cont, pattern) =
    filter(?UseSite(_) + ?ImportSite);
    if nonempty then
       (_, _, _, call, r*) := <uses-to-str> (<id>, bnd*, rep*, n, Match(pattern));
      ![USE_RULE(call), r*]
    else
      ![]
    end
    
  uses-to-str:
    ([], bnd*, rep*, n, str) -> (bnd*, rep*, n, str, [])
  
  // uses-to-str: 
  //   ([u | us ], bnd*, rep*, n, prev) -> (bnd3*, rep3*, n3, cont, [r1*, r2*])
  //   where
  //     (bnd2*, rep2*, n2, curr, r1*) := <use-to-str(|bnd*, rep*, n, prev)> u;
  //     (bnd3*, rep3*, n3, cont, r2*) := <uses-to-str> (us, bnd2*, rep2*, n2, curr)    

rules
    
  // use-to-str(|bnd*, rep*, n, prev) =   
  //   (
  //     ?UseSite(<id>) 
  //   + ?ImportSite(<id>)
  //   ) ;
  //   where (
  //     ?[Reference(NameBinding(_, _, t), _, _, _)|_] <+
  //     ?[SingleImport(NameBinding(_, _, t), _, _, _, _)|_] <+
  //     ?[WildcardImport(_, _, RefScope(NameBinding(_, _, t)), _, _)|_]
  //   );
  //   !(<to-ppable-str> t, USE_CALL(<refs-to-str>))
  //     
  // ref-to-str(|bnd*, rep*, n, prev): 
  //   Reference(NameBinding(_, ns, _), [], All(), constr*) -> CANDIDATE(<nabl-to-str> ns)
  //   where
  //     <constraints-to-str> (constr*, (bnd*, rep*, n, prev))
  //     
  // ref-to-str: 
  //   Reference(NameBinding(_, ns, _), [], RefScope(NameBinding(_, ns', t), _, _), []) -> CANDIDATE(<nabl-to-str> ns, <nabl-to-str> ns', <to-ppable-str> t)
  
overlays
     
  USE_RULE(call) =
  SDefT(
    "nabl-use-site"
  , []
  , [DefaultVarDec("context"), DefaultVarDec("uris"), DefaultVarDec("deps"), DefaultVarDec("states")]
  , call
  )
  
  USE_CALL(candidates) =
  CallT(
    SVar("nabl-use")
  , []
  , [ Var("context"), Var("uris"), Var("deps"), LIST(candidates)] 
  )
  
  CANDIDATE(ns) =
  TERM("UseCandidate", [ns, LIST([]), TERM("Current"), TERM("All")])

  CANDIDATE(ns1, ns2, n) =
  TERM("UseCandidate", [ns1, LIST([]), TERM("Current"), TERM("Context", [n, ns2, LIST([]), TERM("All")])])
