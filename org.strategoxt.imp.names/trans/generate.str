module generate

imports
	libstrc
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/NameDefinitionLanguage
  lib/editor-common.generated
  lib/compilation-library.generated

rules // Incremental code generation of project using compilation library.
      
	generate-name-analysis:
		(selected, position, ast@Naming(name, _, _, _), path, project-path) -> (filename, result)
		with
			filename   := <guarantee-extension(|"str")> path ;
			str-module := <to-analysis> ast ;
			result     := <pp-stratego-string> str-module

rules
	
	to-analysis:
		Naming(name, import*, namespace*, rule*) -> Module(name, [imports, sig | <filter(to-rules)> rule*])
		where
			imports := Imports([Import("lib/analysis-library.generated") | import*]) ;
			sig     := Signature([Constructors(<map(to-opdecl)> namespace*)])
			
	to-opdecl:
		Namespace(ns) -> OpDecl(ns, ConstType(SortNoArgs("Namespace")))
		
	to-rules:
		ND-Rule(term, part*) -> Rules(<flatten-list ; not(?[])> [definition-rules])
		where
			definition-rules := <filter(to-definition-rules(|term))> part*
			
	to-definition-rules(|term):
		ND-Def(NsRef(namespace), name, _, None()) ->
		[ RDefNoArgs(
			"nam-get-definition-key"
			, RuleNoCond(term, name)
			)
		, RDefNoArgs(
			"nam-get-definition"
			, RuleNoCond(
				term
				, App(
					CallT(SVar("nam-get-def"), [], [NoAnnoList(Op(namespace, []))])
					, name
					)
				)
			)
		]