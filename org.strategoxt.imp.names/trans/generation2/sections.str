module generation2/sections

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation2/util
  generation2/scoping-sites
  generation2/def-sites
  generation2/prop-sites
  generation2/use-sites
  generation2/constraints
    
rules // namespaces 
      
  nabl-to-str:
    Namespaces(namespaces) -> Signature([Constructors(<map(ns-to-constructor)> namespaces)])
    
  ns-to-constructor: // generates constructors for namespaces
    NamespaceDef(ns) -> CONS_DECL(<ns-name> ns, "Namespace")
  
  ns-to-term: NamespaceRef(ns) -> TERM(<ns-name> ns)

  ns-name: ns -> $[NablNs[ns]]
  
rules // properties
        
  nabl-to-str:
    Properties(props) -> Signature([Constructors(<map(nabl-to-str)> props)])
  
  nabl-to-str: // generate constructors for properties
    PropertyDef(p, _, _) -> CONS_DECL(<ns-prop-name-to-str> p, "Property") 

  nabl-to-str: PropertyRef(p) -> TERM(<ns-prop-name-to-str> p)
  nabl-to-str: TypeProp()     -> TERM("Type")

  ns-prop-name-to-str: p -> $[NablProp_[p]]

rules // imports
    
  nabl-to-str = Imports(![ImportWildcard("lib/nbl"), ImportWildcard("lib/task")|<id>])
    
rules // binding rules

  nabl-to-str:
    BindingRules(rs) -> Rules(<filter-with-index(to-rules); concat; nonempty> rs)
    
  to-rules:
    (i, rule@BindingRule(pattern, constr*, clause*)) -> [b*, d*, p*, u*, m1*, m2*]
    where 
       b* := [<binding-to-scope-rule> rule] 
    <+ b* := [] 
    where 
       d* := [<binding-to-def-rule> rule] 
    <+ d* := [] 
    where
       bound*         := <bound-vars> pattern
     ; (task*, repl*) := <constraints-to-tasks(|bound*, i, 0)> (constr*, [])
    where 
       p* := [<binding-to-prop-rule(|bound*, task*, repl*)>]
    <+ p* := []
    where 
       u* := [<binding-to-use-rule(|bound*, task*, repl*)>]
    <+ u* := []
    where
       m1* := <constraints-to-match-rules(|bound*, i, 0)> constr*
     ; m2* := <filter-with-index(to-match-rules(|bound*, i)); concat> clause*
    