module generation2/scopes

imports
  libstrc
  include/NameBindingLanguage
  
  generation2/util
  
rules
  
  scope-to-term(|i): 
    Current() -> TERM("Current")
  
  scope-to-term(|i): 
    DefScopes(ds*) -> LIST([ss*, ctx*])
    where
      if <fetch-elem(?Subsequent())> ds* then
        ss* := [TERM("Subsequent")] 
      else
        ss* := []
      end
    ; if x := <fetch-elem(?Context(<id>))> ds* then 
        ctx* := [<scope-var> i]
      else
        ctx* := []
      end
   
  scope-to-assignments(|ns, i) =
    if DefScopes(fetch-elem(Context(id))) then
      ![SCOPE_CALL(<scope-var> i, ns)]
    else
      ![]
    end
    
  scope-to-replacement(|i):
    DefScopes(ds*) -> <filter(context-to-replace(|r))> ds*
    where
      r  := SCOPE_CALL(<scope-var> i)
      
  context-to-replace(|r): Context(c) -> (c, r)
  
  scope-var: i -> Var($[scope[i]__])

overlays
  
  SCOPE_CALL(v) = CallT(SVar("nabl-def-scope"), [], [v])
  SCOPE_CALL(v, ns) = 
  Where(
    Assign(
      v
    , App(
        CallT(
          SVar("nabl-construct-def-scope")
        , []
        , [Var("lang__"), Var("partition__"), Var("uniques__")]
        )
      , ns
      )
    )
  )
 
     
