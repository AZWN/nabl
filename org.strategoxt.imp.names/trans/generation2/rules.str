module generation2/rules
  
imports
  
  libstrc
  include/NameBindingLanguage
  
  generation2/util
  generation2/constraints
  generation2/def-sites
  generation2/prop-sites
  generation2/use-sites
  generation2/import-sites
  generation2/sections
  
rules
  
  nabl-to-str: 
    (i, BindingRule(pattern, constr*, clause*)) -> [name-rule*, def-rule*, prop-rule*, use-rule*, import-rule*, match-rule*]
    where 
       [t]        := <filter(def-to-name <+ use-to-name)> clause*
    ;  name-rule* := [NAME_RULE(pattern, t)]
    <+ name-rule* := []
    where
      bound*      := <bound-vars> pattern
    ; scope*      := <filter(?ScopeClause(<map(ns-to-term)>)); concat> clause*
    ; def-clause* := <filter(?DefClause(_, _, _, _, _, _, _))> clause*
    ; implicit*   := <implicit-def-vars> def-clause*
    where
      def-rule*      := <clauses-to-def-rules(|pattern, scope*, implicit*)> def-clause*
    ; (task*, repl*) := <constraints-to-tasks(|bound*, i, 0)> (constr*, [])
    ; prop-rule*     := <clauses-to-prop-rules(|pattern, bound*, repl*, task*, implicit*, i)> def-clause*
    ; use-rule*      := <clauses-to-use-rules(|pattern, bound*, repl*, task*, i)> clause*
    ; import-rule*   := <clauses-to-import-rules(|pattern, bound*, repl*, task*, i)> clause*
    ; match-rule*    := <filter-with-index(clause-to-match-rules(|bound*, i)); concat> clause*
      