module generation2/rules
  
imports
  
  libstrc
  include/NameBindingLanguage
  
  generation2/util
  generation2/constraints
  generation2/def-sites
  generation2/prop-sites
  generation2/use-sites
  
rules
  
  nabl-to-str: 
    (i, BindingRule(pattern, constr*, clause*)) -> [name-rule*, crule*, def-rule*, prop-rule*]
    where 
       [t]        := <filter(def-to-name <+ use-to-name)> clause*
    ;  name-rule* := [NAME_RULE(pattern, t)]
    <+ name-rule* := []
    where
      // collect bound variables
      bound*      := <bound-vars> pattern
      // collect vertical scopes
    ; scope*      := <filter(?ScopeClause(<nabl-to-str>)); concat> clause*
    ; def-clause* := <filter(?DefClause(_, _, _, _, _, _, _))> clause*
    where
      // translate constraints
      (repl*, bound2*, crule*, task*) := <constraints-to-str(|[], bound*, i, 1)> constr*
      // translate def clauses
    ; implicit*  := <implicit-def-vars> def-clause*
    ; def-rule*  := <clauses-to-def-rules(|pattern, scope*, implicit*)> def-clause*
    ; prop-rule* := <clauses-to-prop-rules(|pattern, repl*, bound2*, task*, implicit*, i)> def-clause*
             
overlays
	
	ANONYMOUS_CALL(scopes) =
  CallT(
    SVar("nabl-anonymous-scope")
  , [Match(Var("child-uris__"))]
  , [ Var("lang__")
    , Var("partition__")
    , Var("uniques__")
    , Var("uris__")
    , LIST(scopes) ]
  )
  
  
  	
