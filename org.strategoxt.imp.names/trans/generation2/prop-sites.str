module generation2/prop-sites

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation2/util
  generation2/main
  generation2/scopes
  generation2/constraints
  generation2/def-sites
  generation2/sections
  
rules

  pdebug(s) = id
  
  clauses-to-prop-rules(|pattern, constr*, implicit*, i):
    def-clause* -> result
    where 
       (rule*, prop-clause*) := <filter-with-index(clause-to-prop-clauses(|pattern, constr*, i)); unzip; (concat, concat)>
    ;  match*   := <![Assign(LIST(<nonempty>), Var("implicits__"))] <+ ![]> implicit*
    ;  prop-seq := <to-seq> [match*, prop-clause*]
    ;  result   := [rule*,  PROP_RULE(Seq(Match(pattern), prop-seq))]
    <+ result   := []
    
  clause-to-prop-clauses(|pattern, glob-constr*, i):
    (o, DefClause(kind, _, ns, term, prop*, _, constr*)) -> (match-rule*, [task*, cong])
    where
      <nonempty> prop*
    ; ns-term     := <ns-to-term> ns
    ; patt-bound* := <bound-vars> pattern
    ; (task*, loc-replacement*) 
                  := <constraints-to-tasks(|patt-bound*, <extend-index(|o)> i, 1)> ([glob-constr*, constr*], [])
    ; prop-call   := PROP_CALL(<replace-all(|loc-replacement*); map(prop-to-str)> prop*)
    ; if impl-var := <implicit-def-var(|o)> kind then
        cong := Where(App(prop-call, impl-var))
      else
        cong := <replace-all-id(|[(term, prop-call)])> pattern
      end
    ; match-rule* := <constraints-to-match-rules(|patt-bound*, <extend-index(|o)> i, 1)> [glob-constr*, constr*]
       
rules
         
  prop-to-str: PropertyTerm(p, t) -> PROPERTY(<nabl-to-str> p, t)     

  nabl-to-str: NonUnique() -> TERM("NonUnique")
  nabl-to-str: Unique()    -> TERM("Unique")
  
overlays
  
  PROP_RULE(body)  =
  SDefT(
    "nabl-prop-site"
  , []
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__")
    , DefaultVarDec("elems__")
    , DefaultVarDec("tasks__")
    , DefaultVarDec("states__")
    , DefaultVarDec("implicits__")
    ]
  , body
  )

  PROP_CALL(ps) = 
  CallT(
    SVar("nabl-props")
  , []
  , [Var("partition__"), Var("elems__"), LIST(ps)]
  )
  
  PROPERTY(p, v) = TERM("Prop", [p, v])

