%% Grammar for the NameDefinitionLanguage language
module NameDefinitionLanguage

imports
	stratego/NDL-Layout
	stratego/NDL-Identifiers
	stratego/NDL-Terms
	
exports context-free start-symbols

	Start

context-free syntax

	NamingDefinition -> Start
	
	"module" Module@=ModName Imports Namespaces NamingRules -> NamingDefinition {"Naming", scope(Namespace)}
	
	"imports" ModuleRef*	-> Imports   {bracket}
							-> Imports   {ast("[]")}
	Module@ModName 			-> ModuleRef {"Import"}
	
	"namespaces" Namespace* -> Namespaces   {bracket}
							-> Namespaces   {ast("[]")}
	Namespace@=Id			-> Namespace    {"Namespace"}
	Namespace@Id 			-> NamespaceRef {"NsRef"}
	
	"rules" NamingRule* 				-> NamingRules {bracket}
										-> NamingRules {ast("[]")}
	Term ":" NamingPart+ WhereClause*	-> NamingRule  {"ND-Rule"}
	
	%% "binds" NamespaceRef Term TypePart DefScopePart	DefAnnos					-> NamingPart {"ND-Def"}
	"defines" NamespaceRef Term TypePart DefScopePart DefAnnos					-> NamingPart {"ND-Def"}
	"imports" NamespaceRef "from" NamespaceRef Term DefScopePart ImportAnnos	-> NamingPart {"ND-Import"}
	"refers" "to" NamespaceRef Term TypePart RefScopePart			-> NamingPart {"ND-Ref"}
	"scope" "for" NamespaceRef 										-> NamingPart {"ND-Scope"}
	"has" "type" Term												-> NamingPart {"ND-Type"}
	
	"where" Term Condition 									-> WhereClause {"Where"}
	"has" "type" Term 								 	 	-> Condition {"TypeCheck"}
	"refers" "to" NamespaceRef Term TypePart RefScopePart 	-> Condition {"ReferenceCheck"}
	
	"of" "type" Term	-> TypePart {"TypeBinding"}
						-> TypePart {"None"}
	
	"in" {Term ","}+		-> DefScopePart {"DefScope"}
	"forward"				-> DefScopePart {"Forward"}
	"backward"				-> DefScopePart {"Backward"}
						    -> DefScopePart {"None"}
	"in" NamespaceRef Term	-> RefScopePart {"RefScope"}
						    -> RefScopePart {"None"}
		
	"{" {DefAnno ","}+ "}" 		-> DefAnnos {"Annos"}
								-> DefAnnos {ast("Annos([])")}
	"{" {ImportAnno ","}+ "}" 	-> ImportAnnos {"Annos"}
								-> ImportAnnos {ast("Annos([])")}
					
	"non-unique"			-> DefAnno {"NonUnique"}
	"unique"				-> DefAnno {"Unique"}
	"ordered"				-> DefAnno {"Ordered"}
	"unordered"				-> DefAnno {"NonOrdered"}
	
	"transitive"			-> ImportAnno {"Transitive"}
	"current-file"			-> ImportAnno {"CurrentFile"}
	"ordered"				-> ImportAnno {"Ordered"}
	"unordered"				-> ImportAnno {"NonOrdered"}
	 
lexical syntax
	
	"namespaces" -> ModName {reject}
	