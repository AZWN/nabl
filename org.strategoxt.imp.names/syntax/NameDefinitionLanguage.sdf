module NameDefinitionLanguage

imports
  
    stratego/NDL-Layout
    stratego/NDL-Identifiers
    stratego/NDL-Terms
    
exports 
  
  context-free start-symbols

    Start

  context-free syntax

    NamingDefinition                                         -> Start
    "module" ModName Imports Namespaces NamingRules*         -> NamingDefinition {"Naming"}
    
    %% Imports
    "imports" ModuleRef* -> Imports   {bracket}
                         -> Imports   {ast("[]")}
    ModName              -> ModuleRef {"Import"}
    
    %% Namespaces
    "namespaces" Namespace* -> Namespaces   {bracket}
                            -> Namespaces   {ast("[]")}
    Id                      -> Namespace    {"Namespace"}
    Id                      -> NamespaceRef {"NsRef"}
    
    %% Rule
    "rules" NamingRule*               -> NamingRules {"ND-Rules"}
    Term ":" NamingPart+ WhereClause* -> NamingRule  {"ND-Rule"}
    
    %% Rule parts
    "defines" UniquePart NamespaceRef Term TypePart DefScopePart             -> NamingPart {"ND-Def"}
    "imports" NamespaceRef "from" NamespaceRef Term DefScopePart ImportAnnos -> NamingPart {"ND-Import"}
    "refers" "to" NamespaceRef Term TypePart RefScopePart                    -> NamingPart {"ND-Ref"}
    "scopes" {NamespaceRef ","}+                                             -> NamingPart {"ND-Scope"}
    "has" "type" Term                                                        -> NamingPart {"ND-Type"}
    
    %% Where
    "where" Term Condition                                -> WhereClause {"Where"}
    "has" "type" Term                                     -> Condition   {"TypeCheck"}
    "refers" "to" NamespaceRef Term TypePart RefScopePart -> Condition   {"ReferenceCheck"}
    
    %% Definition prefixes
                 -> UniquePart {"Unique"}
    "unique"     -> UniquePart {"Unique"}
    "non-unique" -> UniquePart {"NonUnique"}
    
    %% Type bindings
    "of" "type" Term -> TypePart {"TypeBinding"}
                     -> TypePart {"None"}
    
    %% Reference postfixes
    "in" {Term ","}+          -> DefScopePart {"DefScope"}
    "in" "subsequent" "scope" -> DefScopePart {"OrderedScope"}
                              -> DefScopePart {"None"}
    "in" NamespaceRef Term    -> RefScopePart {"RefScope"}
                              -> RefScopePart {"None"}
        
    %% Import annotations
    "{" {ImportAnno ","}+ "}" -> ImportAnnos {"Annos"}
                              -> ImportAnnos {ast("Annos([])")}
    "transitive"              -> ImportAnno  {"Transitive"}
    "current-file"            -> ImportAnno  {"CurrentFile"}
     
lexical syntax
    
    "namespaces" -> ModName {reject}
    