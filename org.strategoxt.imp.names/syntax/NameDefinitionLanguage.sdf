module NameDefinitionLanguage

imports
  
    stratego/NDL-Layout
    stratego/NDL-Identifiers
    stratego/NDL-Vars
    stratego/NDL-Terms[Var]
    stratego/NDL-Terms[VarRef]
    
exports 
  
  context-free start-symbols

    Start

  context-free syntax
  	
  	Term[[Var]]    -> BTerm %% term binding variables
  	Term[[VarRef]] -> RTerm %% term referencing variables
  	
  context-free syntax

    NamingDefinition                        -> Start 
    "module" ModName Imports NamingSection* -> NamingDefinition {"Naming"}
    
    %% Imports
    "imports" ModuleRef*                    -> Imports   {bracket}
                                            -> Imports   {ast("[]")}
    ModName                                 -> ModuleRef {"Import"}
    
    %% Namespaces
    "namespaces" Namespace*                 -> NamingSection {"ND-Namespaces"}
    NamespaceId                             -> Namespace     {"Namespace"}
    NamespaceId                             -> NamespaceRef  {"NsRef"}
    NamespaceRef                            -> INamespaceRef {"NonTransitive"}
    "imported" NamespaceRef                 -> INamespaceRef {"Transitive"}
    
    %% Rules
    "binding" "rules" NamingRule*               -> NamingSection {"ND-Rules"}
    BTerm ":" NamingPart+                       -> NamingRule    {"ND-Rule"}
    "predefined" PreRule                        -> NamingRule    {bracket}
    UniquePart NamespaceRef String InnerPreDefs -> PreRule       {"ND-PreDef"}
    
    %%"scoping" PreRule* "inside" -> InnerPreDefs  {bracket}
                                -> InnerPreDefs {ast("[]")}
    
    %% Rule parts
    "defines" DefPartCore                                                         -> NamingPart  {bracket}
    "binds"   DefPartCore                                                         -> NamingPart  {bracket}
    UniquePart NamespaceRef RTerm TypePart DefScopePart OptScopePart WhereClause* -> DefPartCore {"ND-Def"}
    {RefClause "otherwise"}+                                                      -> NamingPart  {"ND-Refs"} 
    "refers" "to" RefPartCore                                                     -> RefClause   {bracket}
    "imports" {INamespaceRef ","}+ "from" RefPartCore IDefScopePart               -> NamingPart  {"ND-Import"}
    NamespaceRef RTerm TypePart RefScopePart WhereClause*                         -> RefPartCore {"ND-Ref"}
    "anonymous" ScopePart                                                         -> NamingPart  {"ND-Scope"}
    "nameless" ScopePart                                                          -> NamingPart  {"ND-Scope"}
    
    "scope" "for" {NamespaceRef ","}+                                   -> ScopePart    {bracket}
                                                                        -> OptScopePart {ast("[]")}
    ScopePart                                                           -> OptScopePart 
   
    %% Where
    "where" RTerm Condition                                             -> WhereClause {"Where"}
    "has" "type" BTerm                                                  -> Condition   {"TypeCheck"}
    "refers" "to" NamespaceRef BTerm BTypePart RefScopePart             -> Condition   {"ReferenceCheck"}
    
    %% Definition prefixes
                 -> UniquePart {"Unique"}
    "unique"     -> UniquePart {"Unique"}
    "non-unique" -> UniquePart {"NonUnique"}
    
    %% Type bindings
    "of" "type" RTerm -> TypePart  {"TypeBinding"}
                      -> TypePart  {"None"}
    "of" "type" BTerm -> BTypePart {"TypeBinding"}
                      -> BTypePart {"None"}
    
    %% Reference postfixes
    "in" DefScopeCore       -> DefScopePart {bracket}
                            -> DefScopePart {"None"}
    "into" DefScopeCore     -> IDefScopePart {bracket}
                            -> IDefScopePart {"None"}
    {RTerm ","}+            -> DefScopeCore {"DefScope"}
    "subsequent" "scope"    -> DefScopeCore {"OrderedScope"}
    "in" NamespaceRef RTerm -> RefScopePart {"RefScope"}
                            -> RefScopePart {"None"}
         
lexical syntax
    
    "namespaces" -> ModName     {reject}
    "binding"    -> NamespaceId {reject}
    Id           -> NamespaceId
    