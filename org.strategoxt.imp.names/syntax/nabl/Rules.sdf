module nabl/Rules

imports

  terms/Vars  
  nabl/Namespaces
  nabl/Properties
  documentation/Documentation
  
exports 
  
  context-free syntax
    
    "binding" "rules" NamingRule*                       -> ModSection     {"BindingRules"}

    Documentation                                       -> NamingRule
    BTerm Constraint* ":" NamingRulePart+               -> NamingRule     {"BindingRule"}
    
  context-free syntax %% definition sites 
    
    "defines" Unique Binding Property* DefScopes Constraint* -> NamingRulePart {"DefSite"}
    
                                                        -> Unique         {"Unique"}
    "unique"                                            -> Unique         {"Unique"}
    "non-unique"                                        -> Unique         {"NonUnique"}
    
    NamespaceRef RTerm                                  -> Binding        {"NameBinding"}
    Disambiguator INamespaceRef RTerm                   -> IBinding       {"NameBinding"}
    
                                                        -> Disambiguator  {"All"}
    "all"                                               -> Disambiguator  {"All"}
    "first"                                             -> Disambiguator  {"First"}
    "single"                                            -> Disambiguator  {"Single"}
    "best"                                              -> Disambiguator  {"Best"}
        
    NamespaceRef BTerm                                  -> BBinding       {"NameBinding"}
    "of" PropertyRef RTerm                              -> Property       {"PropertyBinding"}
    "of" PropertyMatch PropertyRef BTerm                -> BProperty      {"PropertyBinding"}
    
                                                        -> PropertyMatch  {"Exact"}
    "conformant"                                        -> PropertyMatch  {"Conformance"}
    
                                                        -> DefScopes      {"Current"}
    "in" DefScopesCore                                  -> DefScopes      {bracket}
    "current" "scope"                                   -> DefScopesCore  {"Current"}
    {DefScope ","}+                                     -> DefScopesCore  {"DefScopes"}
    "subsequent" "scope"                                -> DefScope       {"Subsequent"}
    RTerm                                               -> DefScope       {"DefScope"}
    
  context-free syntax
    
    "scopes" {NamespaceRef ","}+                        -> NamingRulePart {"Scopes"}      
    
  context-free syntax %% use sites

    {RefPart "otherwise"}+                              -> NamingRulePart {"UseSite"}     
    "refers" "to" RefPartCore                           -> RefPart        {bracket}
    IBinding BProperty* RefScope Constraint*            -> RefPartCore    {"Reference"}
      
                                                        -> RefScope       {"All"}
    "in" RefScopeCore                                   -> RefScope       {bracket}
    "current" "scope"                                   -> RefScopeCore   {"Current"}
    "surrounding" NamespaceRef                          -> RefScopeCore   {"Surrounding"}
    IBinding Property* RefScope                         -> RefScopeCore   {"RefScope"}
  
  context-free syntax %% qualified names

    {QualifiedPart "otherwise"}+                        -> NamingRulePart {"QualifiedName"}     
    "qualifies" RefPartCore                             -> QualifiedPart  {bracket}
    
    {NamedPart "otherwise"}+                            -> NamingRulePart {"OverlayName"}     
    "identifies" RefPartCore                            -> NamedPart      {bracket}
    
  context-free syntax %% imports
    
    {ImportPart "otherwise"}+                                                  -> NamingRulePart  {"ImportSite"}    
    "imports" IBinding BProperty* IRefScope IDefScopes Constraint*             -> ImportPart      {"SingleImport"}
    "imports" {INamespaceRef ","}+ BProperty* IRefScope IDefScopes Constraint* -> ImportPart      {"WildcardImport"}

    IBinding BProperty* RefScope Constraint*            -> RefPartCore    {"Reference"}
      
                                                        -> IRefScope      {"All"}
    "from" RefScopeCore                                 -> IRefScope      {bracket}
    "from" RTerm                                        -> IRefScope      {"RefScope"}
    
                                                        -> IDefScopes     {"Current"}
    "into" DefScopesCore                                -> IDefScopes     {bracket}
    
    %% Constraint
    "where" RTerm Condition                             -> Constraint     {"Constraint"}
    "has" PropertyRef BTerm                             -> Condition      {"PropertyCond"}
    "is" "of" PropertyRef BTerm                         -> Condition      {"PropertyCond"}
    "refers" "to" BBinding Property* RefScope           -> Condition      {"ReferenceCond"}
