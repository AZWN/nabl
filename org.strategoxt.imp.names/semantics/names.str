module semantics/names

imports
  lib/analysis-library
  lib/analysis-library-internal
  lib/index-library


imports
  include/NameDefinitionLanguage
  semantics/stratego-names


signature
  constructors
    Module    : Namespace
    Namespace : Namespace


rules

  nam-get-definitions(|paths__, subsequent__):
    Naming(m, _, _) -> ( <Naming(nam-annotate-def(|uri3), id, id)>
                       , [Def(uri3)]
                       , []
                       )
    where uri3 := [Module(), m|<lookup-index-path> (Module(), paths__)]

  nam-get-definition-keys :
    Naming(m, _, _) -> [m]


rules

  nam-get-definitions(|paths__, subsequent__):
    Import(m) -> ( <Import(!import1)>
                 , []
                 , [DefData(uri4, Import(), import1)]
                 )
    where import1 := <nam-annotate-use(|paths__, [Module()])> m
    where uri4 := [Namespace()|<lookup-index-path> (Namespace(), paths__)]

  nam-get-use-keys :
    Import(m) -> [m]

  nam-resolve(target__|):
    Import(m) -> [Regular(Module(), m)]
    where <target__> m


rules

  nam-get-definitions(|paths__, subsequent__):
    Namespace(ns) -> ( <Namespace(nam-annotate-def(|uri5))>
                     , [Def(uri5)]
                     , []
                     )
    where uri5 := [Namespace(), ns|<lookup-index-path> (Namespace(), paths__)]

  nam-get-definition-keys :
    Namespace(ns) -> [ns]


rules

  nam-get-use-keys :
    NsRef(ns) -> [ns]

  nam-annotate-uses(|paths__):
    NsRef(ns) -> <NsRef(
                    nam-annotate-use(|paths__, [Namespace()])
                  )>

  nam-resolve(target__|):
    NsRef(ns) -> [Regular(Namespace(), ns)]
    where <target__> ns


rules

  nam-get-scope-types :
    ND-Rule(_, _) -> [ ( Variable()
                       , Anon(<new>)
                       , Variable()
                       , ()
                       )
                     ]