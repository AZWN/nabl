module src-gen/pp/formulas/Propositions-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/formulas/Propositions-sig


imports
  src-gen/signatures/terms/Terms-sig
  src-gen/signatures/terms/Vars-sig


imports
  src-gen/pp/terms/Terms-pp
  src-gen/pp/terms/Vars-pp


strategies
  prettyprint-example =
    prettyprint-Proposition

  prettyprint-Proposition :
    Eq(t1__, t2__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [t1__', S(" == "), t2__']
                        )
                      ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Term)> t2__

  is-Proposition =
    ?Eq(_, _)

  prettyprint-Proposition :
    Match(t1__, t2__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [t1__', S(" => "), t2__']
                           )
                         ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Pattern)> t2__

  is-Proposition =
    ?Match(_, _)

  prettyprint-Proposition :
    HasProperty(t1__, t2__) -> [ H(
                                   [SOpt(HS(), "0")]
                                 , [t1__', S(" has type "), t2__']
                                 )
                               ]
    with t1__' := <pp-one-Z(prettyprint-VarRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-Var)> t2__

  is-Proposition =
    ?HasProperty(_, _)

  prettyprint-Proposition :
    HasScope(t1__, t2__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [t1__', S(" has associated scope "), t2__']
                              )
                            ]
    with t1__' := <pp-one-Z(prettyprint-Term)> t1__
    with t2__' := <pp-one-Z(prettyprint-Var)> t2__

  is-Proposition =
    ?HasScope(_, _)

  is-Proposition =
    fail