module src-gen/pp/formulas/Propositions-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/formulas/Propositions-sig


imports
  src-gen/signatures/terms/Terms-sig
  src-gen/signatures/terms/Vars-sig
  src-gen/signatures/core/Namespaces-sig
  src-gen/signatures/core/Scopes-sig
  src-gen/signatures/core/Properties-sig
  src-gen/signatures/core/Relations-sig


imports
  src-gen/pp/terms/Terms-pp
  src-gen/pp/terms/Vars-pp
  src-gen/pp/core/Namespaces-pp
  src-gen/pp/core/Scopes-pp
  src-gen/pp/core/Properties-pp
  src-gen/pp/core/Relations-pp


strategies
  prettyprint-example =
    prettyprint-Proposition

  prettyprint-Proposition :
    True() -> [ H(
                  [SOpt(HS(), "0")]
                , [S("true")]
                )
              ]

  is-Proposition =
    ?True()

  prettyprint-Proposition :
    False() -> [ H(
                   [SOpt(HS(), "0")]
                 , [S("false")]
                 )
               ]

  is-Proposition =
    ?False()

  prettyprint-Proposition :
    Eq(t0__, t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S(" == ")]
                        )
                      ]

  is-Proposition =
    ?Eq(_, _)

  prettyprint-Proposition :
    Match(t0__, t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S(" => ")]
                           )
                         ]

  is-Proposition =
    ?Match(_, _)

  prettyprint-Proposition :
    DefOf(t0__, t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("definition of "), S(" => ")]
                           )
                         ]

  is-Proposition =
    ?DefOf(_, _)

  prettyprint-Proposition :
    ScopeOf(t0__, t1__) -> [ H(
                               [SOpt(HS(), "0")]
                             , [S(" => ")]
                             )
                           ]

  is-Proposition =
    ?ScopeOf(_, _)

  prettyprint-Proposition :
    RefersTo(t0__, t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S(" refers to "), S(" ")]
                                    )
                                  ]

  is-Proposition =
    ?RefersTo(_, _, _)

  prettyprint-Proposition :
    HasProperty(t0__, t1__, t2__) -> [ H(
                                         [SOpt(HS(), "0")]
                                       , [S(" has "), S(" ")]
                                       )
                                     ]

  is-Proposition =
    ?HasProperty(_, _, _)

  prettyprint-Proposition :
    InRelation(t0__, t1__, t2__) -> [ H(
                                        [SOpt(HS(), "0")]
                                      , [S(" "), S(" ")]
                                      )
                                    ]

  is-Proposition =
    ?InRelation(_, _, _)

  is-Proposition =
    fail