module src-gen/pp/core/Bindings-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/core/Bindings-sig


imports
  src-gen/signatures/common/Identifiers-sig
  src-gen/signatures/terms/Terms-sig
  src-gen/signatures/terms/Vars-sig
  src-gen/signatures/terms/Constants-sig
  src-gen/signatures/core/Namespaces-sig
  src-gen/signatures/core/Scopes-sig
  src-gen/signatures/formulas/Formulas-sig


imports
  src-gen/pp/common/Identifiers-pp
  src-gen/pp/terms/Terms-pp
  src-gen/pp/terms/Vars-pp
  src-gen/pp/terms/Constants-pp
  src-gen/pp/core/Namespaces-pp
  src-gen/pp/core/Scopes-pp
  src-gen/pp/formulas/Formulas-pp


strategies
  prettyprint-RuleID =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-RuleID


strategies
  prettyprint-example =
    prettyprint-ModuleSection

  prettyprint-example =
    prettyprint-BindingRule

  prettyprint-example =
    prettyprint-Unique

  prettyprint-example =
    prettyprint-BindingClause

  prettyprint-ModuleSection :
    Bindings(t0__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("binding rules")]
                        )
                      , <pp-indent(|"2")> []
                      ]

  is-ModuleSection =
    ?Bindings(_)

  prettyprint-BindingRule :
    Binding(t0__, t1__, t2__) -> [ H(
                                     [SOpt(HS(), "0")]
                                   , [S(":")]
                                   )
                                 , <pp-indent(|"2")> []
                                 , <pp-indent(|"4")> []
                                 ]

  is-BindingRule =
    ?Binding(_, _, _)

  prettyprint-BindingClause :
    VarDefines(t0__, t1__, t2__, t3__) -> [ H(
                                              [SOpt(HS(), "0")]
                                            , [ S("defines ")
                                              , S(" ")
                                              , S(" ")
                                              ]
                                            )
                                          , <pp-indent(|"5")> [S("in ")]
                                          ]

  is-BindingClause =
    ?VarDefines(_, _, _, _)

  prettyprint-BindingClause :
    StringDefines(t0__, t1__, t2__, t3__) -> [ H(
                                                 [SOpt(HS(), "0")]
                                               , [ S("defines ")
                                                 , S(" ")
                                                 , S(" ")
                                                 ]
                                               )
                                             , <pp-indent(|"5")> [S("in ")]
                                             ]

  is-BindingClause =
    ?StringDefines(_, _, _, _)

  prettyprint-Unique :
    Unique() -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("unique")]
                  )
                ]

  is-Unique =
    ?Unique()

  prettyprint-Unique :
    NonUnique() -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("non-unique")]
                     )
                   ]

  is-Unique =
    ?NonUnique()

  prettyprint-BindingClause :
    RefersTo(t0__, t1__, t2__, t3__) -> [ H(
                                            [SOpt(HS(), "0")]
                                          , [S("refers to "), S(" ")]
                                          )
                                        , <pp-indent(|"7")> [S("in ")]
                                        , <pp-indent(|"4")> [S("where ")]
                                        ]

  is-BindingClause =
    ?RefersTo(_, _, _, _)

  prettyprint-BindingClause :
    Alias(t0__, t1__) -> [ H(
                             [SOpt(HS(), "0")]
                           , [S("imports ")]
                           )
                         , <pp-indent(|"5")> [S("as ")]
                         ]

  is-BindingClause =
    ?Alias(_, _)

  prettyprint-BindingClause :
    Wildcard(t0__, t1__, t2__) -> [ H(
                                      [SOpt(HS(), "0")]
                                    , [S("imports ")]
                                    )
                                  , <pp-indent(|"3")> [S("from ")]
                                  , <pp-indent(|"3")> [S("into ")]
                                  ]

  is-BindingClause =
    ?Wildcard(_, _, _)

  is-ModuleSection =
    fail

  is-BindingRule =
    fail

  is-Unique =
    fail

  is-BindingClause =
    fail