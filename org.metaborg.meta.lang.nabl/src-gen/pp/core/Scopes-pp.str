module src-gen/pp/core/Scopes-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/core/Scopes-sig


imports
  src-gen/signatures/common/Identifiers-sig
  src-gen/signatures/core/Namespaces-sig
  src-gen/signatures/terms/Vars-sig


imports
  src-gen/pp/common/Identifiers-pp
  src-gen/pp/core/Namespaces-pp
  src-gen/pp/terms/Vars-pp


strategies
  prettyprint-ScopeID =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-ScopeID


strategies
  prettyprint-example =
    prettyprint-LocalScope

  prettyprint-example =
    prettyprint-Scope

  prettyprint-LocalScope :
    NamedScope(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [t1__', S(" "), t2__']
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-VarRef)> t2__

  is-LocalScope =
    ?NamedScope(_, _)

  prettyprint-LocalScope :
    CurrentScope(t1__) -> [ H(
                              [SOpt(HS(), "0")]
                            , [ S("current ")
                              , t1__'
                              , S(" scope")
                              ]
                            )
                          ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__

  is-LocalScope =
    ?CurrentScope(_)

  prettyprint-LocalScope :
    TermScope(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [t1__', S(" scope  at "), t2__']
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-VarRef)> t2__

  is-LocalScope =
    ?TermScope(_, _)

  prettyprint-LocalScope :
    Enclosing(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("enclosing ")
                                 , t1__'
                                 , S(" of ")
                                 , t2__'
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-LocalScope)> t2__

  is-LocalScope =
    ?Enclosing(_, _)

  prettyprint-Scope :
    GlobalScope() -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("global scope")]
                       )
                     ]

  is-Scope =
    ?GlobalScope()

  prettyprint-Scope :
    t1__ -> [ H(
                [SOpt(HS(), "0")]
              , [t1__']
              )
            ]
    where not(is-Scope)
    where t1__' := <pp-one-Z(prettyprint-LocalScope)> t1__

  prettyprint-Scope :
    Anonymous(t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("new scope in "), t1__']
                         )
                       ]
    with t1__' := <pp-one-Z(prettyprint-Scope)> t1__

  is-Scope =
    ?Anonymous(_)

  is-LocalScope =
    fail

  is-Scope =
    fail


strategies
  prettyprint-example =
    prettyprint-Clause

  prettyprint-Clause :
    ChildScope(t1__, t2__) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [ t1__'
                                  , S(" scopes ")
                                  , t2__'
                                  , S(" at child nodes")
                                  ]
                                )
                              ]
    with t1__' := <pp-one-Z(prettyprint-Scope)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__

  is-Clause =
    ?ChildScope(_, _)

  prettyprint-Clause :
    SubsequentScope(t1__, t2__) -> [ H(
                                       [SOpt(HS(), "0")]
                                     , [ t1__'
                                       , S(" scopes ")
                                       , t2__'
                                       , S(" at subsequent nodes")
                                       ]
                                     )
                                   ]
    with t1__' := <pp-one-Z(prettyprint-Scope)> t1__
    with t2__' := <pp-one-Z(prettyprint-NamespaceRef)> t2__

  is-Clause =
    ?SubsequentScope(_, _)

  prettyprint-Clause :
    NodeScope(t1__, t2__) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ S("requires ")
                                 , t1__'
                                 , S(" scope at ")
                                 , t2__'
                                 ]
                               )
                             ]
    with t1__' := <pp-one-Z(prettyprint-NamespaceRef)> t1__
    with t2__' := <pp-one-Z(prettyprint-VarRef)> t2__

  is-Clause =
    ?NodeScope(_, _)

  is-Clause =
    fail