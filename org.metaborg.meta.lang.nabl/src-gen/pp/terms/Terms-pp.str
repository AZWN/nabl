module src-gen/pp/terms/Terms-pp

imports
  libstratego-gpp
  runtime/tmpl/pp
  src-gen/signatures/terms/Terms-sig


imports
  src-gen/signatures/common/Identifiers-sig
  src-gen/signatures/terms/Constants-sig
  src-gen/signatures/terms/Vars-sig
  src-gen/signatures/terms/StringQuotations-sig


imports
  src-gen/pp/common/Identifiers-pp
  src-gen/pp/terms/Constants-pp
  src-gen/pp/terms/Vars-pp
  src-gen/pp/terms/StringQuotations-pp


strategies
  prettyprint-example =
    prettyprint-Pattern

  prettyprint-Pattern :
    t0__ -> [ H(
                [SOpt(HS(), "0")]
              , []
              )
            ]
    where not(is-Pattern)

  prettyprint-Pattern :
    Int(t0__) -> [ H(
                     [SOpt(HS(), "0")]
                   , []
                   )
                 ]

  is-Pattern =
    ?Int(_)

  prettyprint-Pattern :
    Real(t0__) -> [ H(
                      [SOpt(HS(), "0")]
                    , []
                    )
                  ]

  is-Pattern =
    ?Real(_)

  prettyprint-Pattern :
    Str(t0__) -> [ H(
                     [SOpt(HS(), "0")]
                   , []
                   )
                 ]

  is-Pattern =
    ?Str(_)

  prettyprint-Pattern :
    Op(t0__, t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("("), S(")")]
                        )
                      ]

  is-Pattern =
    ?Op(_, _)

  prettyprint-Pattern :
    OpQ(t0__, t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("("), S(")")]
                         )
                       ]

  is-Pattern =
    ?OpQ(_, _)

  prettyprint-Pattern :
    Char(t0__) -> [ H(
                      [SOpt(HS(), "0")]
                    , []
                    )
                  ]

  is-Pattern =
    ?Char(_)

  prettyprint-Pattern :
    Tuple(t0__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("("), S(")")]
                     )
                   ]

  is-Pattern =
    ?Tuple(_)

  prettyprint-Pattern :
    List(t0__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("["), S("]")]
                    )
                  ]

  is-Pattern =
    ?List(_)

  prettyprint-Pattern :
    ListTail(t0__, t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("[")
                                , S(" | ")
                                , S("]")
                                ]
                              )
                            ]

  is-Pattern =
    ?ListTail(_, _)

  prettyprint-Pattern :
    As(t0__, t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("@")]
                        )
                      ]

  is-Pattern =
    ?As(_, _)

  is-Pattern =
    fail


strategies
  prettyprint-example =
    prettyprint-Term

  prettyprint-Term :
    t0__ -> [ H(
                [SOpt(HS(), "0")]
              , []
              )
            ]
    where not(is-Term)

  prettyprint-Term :
    Int(t0__) -> [ H(
                     [SOpt(HS(), "0")]
                   , []
                   )
                 ]

  is-Term =
    ?Int(_)

  prettyprint-Term :
    Real(t0__) -> [ H(
                      [SOpt(HS(), "0")]
                    , []
                    )
                  ]

  is-Term =
    ?Real(_)

  prettyprint-Term :
    Str(t0__) -> [ H(
                     [SOpt(HS(), "0")]
                   , []
                   )
                 ]

  is-Term =
    ?Str(_)

  prettyprint-Term :
    Op(t0__, t1__) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("("), S(")")]
                        )
                      ]

  is-Term =
    ?Op(_, _)

  prettyprint-Term :
    OpQ(t0__, t1__) -> [ H(
                           [SOpt(HS(), "0")]
                         , [S("("), S(")")]
                         )
                       ]

  is-Term =
    ?OpQ(_, _)

  prettyprint-Term :
    Char(t0__) -> [ H(
                      [SOpt(HS(), "0")]
                    , []
                    )
                  ]

  is-Term =
    ?Char(_)

  prettyprint-Term :
    Tuple(t0__) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("("), S(")")]
                     )
                   ]

  is-Term =
    ?Tuple(_)

  prettyprint-Term :
    List(t0__) -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("["), S("]")]
                    )
                  ]

  is-Term =
    ?List(_)

  prettyprint-Term :
    ListTail(t0__, t1__) -> [ H(
                                [SOpt(HS(), "0")]
                              , [ S("[")
                                , S(" | ")
                                , S("]")
                                ]
                              )
                            ]

  is-Term =
    ?ListTail(_, _)

  prettyprint-Term :
    StrInterp(t0__) -> [ H(
                           [SOpt(HS(), "0")]
                         , []
                         )
                       ]

  is-Term =
    ?StrInterp(_)

  is-Term =
    fail