[
   Bindings                 -- V  [H  [KW["binding"] KW["rules"]] _1],
   Bindings.1:iter-star     -- _1,
   Binding                  -- _1 KW[":"] _2 _3,
   VarDefines               -- KW["defines"] _1 _2 _3 KW["in"] _4,
   StringDefines            -- KW["defines"] _1 _2 _3 KW["in"] _4,
   Unique                   -- KW["unique"],
   NonUnique                -- KW["non-unique"],
   RefersTo                 -- KW["refers"] KW["to"] _1 _2 KW["in"] _3 KW["where"] _4,
   Alias                    -- KW["imports"] _1 KW["as"] _2,
   Wildcard                 -- KW["imports"] _1 KW["from"] _2 KW["into"] _3,
   COMPLETION-ModuleSection -- _1,
   COMPLETION-BindingRule   -- _1,
   COMPLETION-Unique        -- _1,
   COMPLETION-BindingClause -- _1,
   Namespaces               -- V  [H  [KW["namespaces"]] _1],
   Namespaces.1:iter-star   -- _1,
   NamespaceDef             -- _1,
   DefaultNamespace         -- ,
   NamespaceRef             -- _1 _2,
   CurrentLanguage          -- ,
   LanguageRef              -- _1 KW["."],
   COMPLETION-ModuleSection -- _1,
   COMPLETION-NamespaceDef  -- _1,
   COMPLETION-NamespaceRef  -- _1,
   COMPLETION-LanguageRef   -- _1,
   Module                   -- KW["module"] _1 _2,
   Module.2:iter-star       -- _1,
   Imports                  -- V  [H  [KW["imports"]] _1],
   Imports.1:iter-star      -- _1,
   ImportWildcard           -- _1 KW["/-"],
   Import                   -- _1,
   COMPLETION-Module        -- _1,
   COMPLETION-ModuleSection -- _1,
   COMPLETION-ImportModule  -- _1,
   Relations                -- V  [H  [KW["relations"]] _1],
   Relations.1:iter-star    -- _1,
   RelationDef              -- _1 _2 _3,
   Relation                 -- KW["=>"] _1 _2 _3 KW["where"] _4,
   COMPLETION-ModuleSection -- _1,
   COMPLETION-RelationDef   -- _1,
   COMPLETION-BindingClause -- _1,
   Properties               -- V  [H  [KW["properties"]] _1],
   Properties.1:iter-star   -- _1,
   PropertyDef              -- _1 KW["of"] _2 KW[":"] _3,
   PropertyDef.2:iter-sep   -- _1 KW[","],
   TypeProp                 -- KW["type"],
   PropertyRef              -- _1,
   COMPLETION-ModuleSection -- _1,
   COMPLETION-PropertyDef   -- _1,
   COMPLETION-PropertyRef   -- _1,
   Property                 -- KW["=>"] _1 _2 KW["has"] _3 _4 KW["where"] _5,
   NamedScope               -- _1 _2,
   CurrentScope             -- KW["current"] _1 KW["scope"],
   TermScope                -- _1 KW["scope"] KW["at"] _2,
   Enclosing                -- KW["enclosing"] _1 KW["of"] _2,
   ChildScope               -- KW["child"] KW["nodes"],
   SubsequentScope          -- KW["subsequent"] KW["nodes"],
   GlobalScope              -- KW["global"] KW["scope"],
   Anonymous                -- KW["new"] KW["scope"] KW["in"] _1,
   COMPLETION-LocalScope    -- _1,
   COMPLETION-ScopePosition -- _1,
   COMPLETION-Scope         -- _1,
   ChildScope               -- _1 KW["scopes"] _2 KW["at"] KW["child"] KW["nodes"],
   SubsequentScope          -- _1 KW["scopes"] _2 KW["at"] KW["subsequent"] KW["nodes"],
   NodeScope                -- KW["requires"] _1 KW["scope"] KW["at"] _2,
   COMPLETION-BindingClause -- _1,
   True                     -- KW["true"],
   False                    -- KW["false"],
   Eq                       -- _1 KW["=="] _2,
   Match                    -- _1 KW["=>"] _2,
   DefOf                    -- KW["definition"] KW["of"] _1 KW["=>"] _2,
   ScopeOf                  -- _1 KW["=>"] _2,
   RefersTo                 -- _1 KW["refers"] KW["to"] _2 _3,
   HasProperty              -- _1 KW["has"] _2 _3,
   InRelation               -- _1 _2 _3,
   COMPLETION-Proposition   -- _1,
   Not                      -- KW["not"] _1,
   And                      -- _1 KW["and"] _2,
   Or                       -- _1 KW["or"] _2,
   COMPLETION-Formula       -- _1,
   Wld                      -- KW["_"],
   ListWld                  -- KW["..."],
   Var                      -- _1,
   ListVar                  -- _1,
   VarRef                   -- _1,
   ListVarRef               -- _1,
   COMPLETION-Wld           -- _1,
   COMPLETION-Var           -- _1,
   COMPLETION-VarRef        -- _1,
   Int                      -- _1,
   Real                     -- _1,
   Str                      -- _1,
   Op                       -- _1 KW["("] _2 KW[")"],
   Op.2:iter-star-sep       -- _1 KW[","],
   OpQ                      -- _1 KW["("] _2 KW[")"],
   OpQ.2:iter-star-sep      -- _1 KW[","],
   Char                     -- _1,
   Tuple                    -- KW["("] _1 KW[")"],
   Tuple.1:iter-star-sep    -- _1 KW[","],
   List                     -- KW["["] _1 KW["]"],
   List.1:iter-star-sep     -- _1 KW[","],
   ListTail                 -- KW["["] _1 KW["|"] _2 KW["]"],
   ListTail.1:iter-star-sep -- _1 KW[","],
   As                       -- _1 KW["@"] _2,
   COMPLETION-Pattern       -- _1,
   Int                      -- _1,
   Real                     -- _1,
   Str                      -- _1,
   Op                       -- _1 KW["("] _2 KW[")"],
   Op.2:iter-star-sep       -- _1 KW[","],
   OpQ                      -- _1 KW["("] _2 KW[")"],
   OpQ.2:iter-star-sep      -- _1 KW[","],
   Char                     -- _1,
   Tuple                    -- KW["("] _1 KW[")"],
   Tuple.1:iter-star-sep    -- _1 KW[","],
   List                     -- KW["["] _1 KW["]"],
   List.1:iter-star-sep     -- _1 KW[","],
   ListTail                 -- KW["["] _1 KW["|"] _2 KW["]"],
   ListTail.1:iter-star-sep -- _1 KW[","],
   StrInterp                -- _1,
   COMPLETION-Term          -- _1,
   SortVar                  -- _1,
   SortNoArgs               -- _1,
   Sort                     -- _1 KW["("] _2 KW[")"],
   Sort.2:iter-star-sep     -- _1 KW[","],
   COMPLETION-Sort          -- _1,
   TypeDecl                 -- _1 _2 _3,
   TypeDeclQ                -- _1 _2 _3,
   Str                      -- _1,
   NoTypeParams             -- ,
   TypeParams               -- KW["("] _1 KW[")"],
   TypeParams.1:iter-sep    -- _1 KW[","],
   TypeParam                -- _1 KW[":"] _2,
   COMPLETION-TypeParams    -- _1,
   COMPLETION-TypeParam     -- _1
]