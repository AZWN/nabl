module generation/messages

imports 
  
  include/NameBindingLanguage
  libstrc
  
  generation/-
  
rules
  
  binding-to-msg-rule(|bound*, task*, repl*):
    (i, BindingRule(pattern, constr*, clause*)) -> MSG_RULE(pattern, seq)
    where
      msg-clause*    := <filter-msg-clauses; nonempty> clause*
    ; constr-clause* := <filter-with-index(to-msg-clauses(|pattern, bound*, repl*, i)); concat> msg-clause*
    where
      seq := <to-seq> [task*, constr-clause*, Fail()]

  to-msg-clauses(|pattern, bound*, glob-repl*, i):
    (j, MessageClause(kind, msg, marker, constr*)) -> [task*, msg-call]
    where
      k              := <extend-index(|i)> j
    ; (task*, repl*) := <constraints-to-tasks(|bound*, k, 1)> (constr*, glob-repl*)
    ; dep*           := <map(Snd)> repl*
    ; msg-call       := MSG_APPL(<kind-to-strategy> kind, dep*, msg, marker)
  
  kind-to-strategy:
    Note() -> "task-create-note-on-success"
  kind-to-strategy:
    Warning() -> "task-create-warning-on-success"
  kind-to-strategy:
    Error() -> "task-create-error-on-success"
  	        
rules
  
  filter-msg-clauses = filter(?MessageClause(_, _, _, _))
  
overlays
	
	MSG_RULE(pattern, body) =
  SDefT(
    "nabl-constraint"
  , []
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__") 
    , DefaultVarDec("uri__")]
  , Seq(Match(pattern), body)
  )
  
  MSG_APPL(str, tasks, msg, marker) =
	App(
		CallT(
	    SVar(str)
	  , []
	  , [Var("partition__"), NEW_TASK(TERM("Id", [LIST(tasks)])), msg]
	  )
	  , marker
	)
  