module generation/import-sites

imports
	
  libstrc
  include/NameBindingLanguage
  
  generation/-
  
rules
                     
	
  import-to-name = 
    ?RefClause(<fetch-elem(import-to-name)>)
  + ?ImportClause(<fetch-elem(import-to-name)>)
  + ?SingleImport(_, _, <id>, _, _, _, _, _)
  + ?WildcardImport(_, _, Context(_, _, <id>, _, _), _, _)
	    
  binding-to-import-rule(|r):
    BindingRule(pattern, constr*, clause*) -> IMPORT_RULE(pattern, seq)
    where 
      cong* := <filter(to-import-clauses(|r, pattern)); concat; nonempty> clause*
    ; seq   := <to-seq> cong*
  
  to-import-clauses(|r, pattern):
    ImportClause(part*) -> [task*, IMPORT_CALL(cand*)]
    with
      (task*, cand*) := <filter(to-import-candidate(|r, pattern)); unzip> part*
    
  to-import-candidate(|r, pattern):
    SingleImport(_, ns, term, _, _, alias, into, f) -> (task, cand)
    with
      into-term      := <scope-to-term> into
    ; task      := <formula-to-tasks(|[], r)> f
    with
       Alias(a) := alias
     ; cand     := ALIAS(term, a, [])
    <+ cand     := SINGLE(<ns-to-term> ns, term, into-term, [])
       
	to-import-candidate(|r, pattern):
		WildcardImport(ns*, _, from, into, f) -> (task, WILDCARD(ns-term*, from-term, into-term, []))
    with
      ns-term*  := <map(ns-to-term)> ns*
    ; from-term := <scope-to-term> from
    ; into-term := <scope-to-term> into
    ; task      := <formula-to-tasks(|[], r)> f
      
	ns-to-term: Restricted([], ns)           -> DIRECT(<ns-to-term> ns)
	ns-to-term: Restricted([Imported()], ns) -> TRANSITIVE(<ns-to-term> ns)	
    
overlays
     
  IMPORT_RULE(pattern, body) =
  SDefT(
    "nabl-import-site"
  , []
  , [ DefaultVarDec("lang__")
    , CTX_DEC()
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__") 
    ]
  , Seq(Match(pattern), FORCE_ORIGINS(body))
  )
  
  IMPORT_CALL(imports) =
  CallT(
    SVar("nabl-import")
  , []
  , [ Var("lang__")
    , CTX()
    , Var("uniques__")
    , Var("uris__")
    , LIST(imports)
    ] 
  )
  
  SINGLE(ns, term, scope, deps)      = TERM("Single", [ns, term, scope, LIST(deps)])
  ALIAS(term, alias, deps)       = TERM("Alias", [term, alias, LIST(deps)])
  WILDCARD(ns, from, into, deps) = TERM("Wildcard", [LIST(ns), from, into, LIST(deps)])

  DIRECT(ns)     = TERM("Import", [Var("lang__"), ns])
  TRANSITIVE(ns) = TERM("Import", [Var("lang__"), TERM("Imported", [ns])])
