module generation/main

imports
  
  libstrc
  include/NameBindingLanguage
  generation/util
  generation/sections
  
rules
  
  generate-name-analysis:
    (selected, position, ast@Module(name, _), path, project-path) -> (filename, result)
    with
      filename   := <guarantee-extension(|"str")> path
    ; str-module := <strip-annos; to-ppable-str; module-to-str> ast
    with
       result := <pp-stratego-string> str-module
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(pp-stratego-string) ; debug(!"cannot pp ")))> str-module
    ;  result := ""
      
rules // modules
  
  to-ppable-str = alltd(to-ppable-str-local)
    
  to-ppable-str-local: ListVar(x)    -> Var(x)
  to-ppable-str-local: VarRef(x)     -> Var(x)
  to-ppable-str-local: ListVarRef(x) -> Var(x)

  module-to-str:
    Module(name, section*) -> Module(name, [import*, section'*])
    where 
      section'* := <filterconcat(section-to-str)> section* 
    ; if <collect-all(?ImportWildcard(<string-ends-with(|"/nabl")>))> section* => [] then
        import* := [ Imports(
                       [ ImportWildcard("lib/runtime/nabl")
                       , ImportWildcard("lib/runtime/task")
                       , ImportWildcard("lib/runtime/properties")
                       , ImportWildcard("lib/runtime/types")
                       , ImportWildcard("lib/runtime/editor")
                       ]
                     )
                   ]
      else
      	import* := []
      end 
      
    