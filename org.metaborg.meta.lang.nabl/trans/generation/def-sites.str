module generation/def-sites

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/util
  generation/main
  generation/sections
  generation/scoping-sites
  
rules
  
  def-to-name = ?DefClause(Explicit(), _, _, <id>, _, _, _)
    
rules
  
  binding-to-def-rule:
    BindingRule(pattern, constr*, clause*) -> DEF_RULE(pattern, seq)
    where
      def-clause* := <filter-def-clauses; nonempty> clause*
    ; implicit*   := <implicit-def-vars> def-clause*
    ; ns-term*    := <filterconcat(?ScopeClause(<map(ns-to-term)>))> clause*    
    ; cong*       := <filter-with-index(to-def-cong(|pattern, ns-term*))> def-clause*
    ; m           := <length> def-clause*
    ; uri-cvar    := <uri-child-var> m
    ; uri-svar    := <uri-sibl-var> m
    ; seq         := <to-seq> [ cong*
                              , MATCH(CALL("child-uris__"), uri-cvar)
                              , MATCH(CALL("sibl-uris__"), uri-svar)
                              , MATCH(CALL("implicits__"), LIST(implicit*))
                              ] 
                                   
  to-def-cong(|pattern, scope*):
    (o, clause) -> def-cong
    where
      DefClause(Explicit(), unique, ns, term, _, scope, _) := clause
    ; scope'* := scope*
    + DefClause(Implicit(), unique, ns, term, _, scope, _) := clause
    ; scope'*  := []
    ; impl-var := <implicit-def-var> o 
    + SingleImport(_, ns, _, _, _, Alias(term), scope, _)  := clause
    ; unique  := Unique()
    ; scope'* := [] // TODO is this correct?
    where
      ns-term     := <ns-to-term> ns
    ; unique-term := <nabl-to-str> unique
    ; scope-term  := <scope-to-term> scope
    ; i           := <dec> o
    ; uri-cvar1   := <uri-child-var> i
    ; uri-cvar2   := <uri-child-var> o
    ; uri-svar1   := <uri-sibl-var> i
    ; uri-svar2   := <uri-sibl-var> o
    ; def-call    := DEF_CALL(ns-term, unique-term, scope-term, scope'*, uri-cvar1, uri-svar1, uri-cvar2, uri-svar2)
    where
       def-cong := Where(Assign(impl-var, App(def-call, term)))
    <+ def-cong := <replace-all-id(|[(term, def-call)])> pattern
  
rules
  
  filter-def-clauses =
    filter(
      ?DefClause(_, _, _, _, _, _, _) 
    + ?Import(<fetch-elem(?SingleImport(_, _, _, _, _, Alias(_), _, _))>)
    )
      
  implicit-def-vars = 
    filter-with-index(
      ?(<implicit-def-var>, DefClause(Implicit(), _, _, _, _, _, _))
    )
    
  implicit-def-var = !Var($[i-[<id>]__])
  
  nabl-to-str: NonUnique() -> TERM("NonUnique")
  nabl-to-str: Unique()    -> TERM("Unique")
  
  uri-var(|kind): 0 -> Var($[uri__])
  uri-var(|kind): i -> Var($[[kind]-uri[i]__]) where not(?0)
   
  uri-child-var = uri-var(|"c")
  uri-sibl-var  = uri-var(|"s")
  
overlays
  
  NAME_RULE(lhs, rhs) = RDefNoArgs("nabl-get-name", RuleNoCond(lhs, rhs))

overlays
  
	DEF_RULE(pattern, body) =
  SDefT(
    "nabl-def-site"
  , [ DefaultVarDec("child-uris__")
    , DefaultVarDec("sibl-uris__")
    , DefaultVarDec("implicits__")
    ]
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__")
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uri__")
    , DefaultVarDec("states__")]
  , Seq(Match(pattern), body)
  )  
	
  DEF_CALL(ns, u, ds, s, in-child-uris, in-sibl-uris, out-child-uris, out-sibl-uris) = 
  CallT(
    SVar("nabl-def")
  , [Match(out-child-uris), Match(out-sibl-uris)]
  , [ Var("lang__")
    , Var("partition__")
    , Var("uniques__")
    , in-child-uris
    , in-sibl-uris
    , ns, u, ds, LIST(s)]
  )
  
  MATCH(s, v) =
  CALL("match", [s], [v])
