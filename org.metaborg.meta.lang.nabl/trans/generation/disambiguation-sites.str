module disambiguation-sites

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/-
  
rules
      
  binding-to-filter-rules(|bound*, task*, repl*):
    (i, BindingRule(pattern, constr*, clause*)) -> [filter-rule*, create-rule*]
    with 
       filter-clause* := <filter-with-index(to-filter-clauses(|pattern, bound*, repl*, i)); nonempty; concat> clause*
     ; filter-rule*   := [FILTER_RULE(pattern, <to-seq> [task*, filter-clause*])]
    <+ filter-rule*   := []
    with
       create-rule* := <filter-with-index(to-filter-create-rule(|pattern, bound*, repl*, i)); nonempty> clause*
    <+ create-rule* := []
    // 1. use task
    // 2. constraint tasks
    // 3. higher order task
    // 4. create rule for higher-order task
    // 5. clauses for filter rule
    
  to-filter-clauses(|pattern, bound*, glob-repl*, i):
    (j, FilterClause(ns, term, _, constr*)) -> [task*, cong]
    with
      k                      := <extend-index(|i)> j
    ; (task*, repl*)         := <constraints-to-tasks(|bound*, k, 1)> (constr*, glob-repl*)
    ; dep*                   := <map(Snd)> repl*
    ; filter-call            := FILTER_CALL(Str($["filter[k]"]), dep*)
    ; cong := <replace-all-id(|[(term, filter-call)])> pattern

  to-filter-create-rule(|pattern, bound*, glob-repl*, i):
    (j, FilterClause(ns, term, Filters(f*), constr*)) -> CREATE_FILTER_RULE(Str($["filter[k]"]), dep*, term, seq)
    with
      k                      := <extend-index(|i)> j
    ; (task*, repl*)         := <constraints-to-tasks(|bound*, k, 1)> (constr*, glob-repl*)
    ; dep*                   := <map(Snd)> repl*
    ; (filter-task*, _)      := <constraints-to-tasks(|bound*, $[f[k]], 1)> (f*, repl*) 
    ; seq                    := <to-seq> [filter-task*, Build(TUPLE([term, App(CALL("task-create-sequence", [], [Var("partition__")]), LIST(dep*))]))]
    
 //  binding-to-disambiguation-rule(|bound*, task*, repl*):
 //    (i, BindingRule(pattern, constr*, clause*)) -> DISAMBIG_RULE(pattern, seq)
 //    where 
 //      disambig-clause* := <filter-with-index(to-disambiguation-clauses(|pattern, bound*, repl*, i)); concat> clause*
 //    ; seq              := <to-seq> [task*, disambig-clause*]
 // 
 //  to-disambiguation-clauses(|pattern, bound*, glob-repl*, i):
 //    (j, DisambiguateClause(ns, term, d, constr*)) -> [ASSIGN_USE_TASK(task, term), task*, filter-task*, cong]
 //    with
 //      ns-term           := <ns-to-term> ns
 //    ; k                 := <extend-index(|i)> j
 //    ; task              := <use-var> j
 //    ; (task*, repl*)    := <constraints-to-tasks(|bound*, k, 1)> (constr*, [(term, task), glob-repl*])
 //    ; l                 := <extend-index(|$[f[i]])> j
 //    ; (filter-task*, _) := <constraints-to-tasks(|bound*, l, 1)> (f*, repl*)
 //    ; filter-call       := FILTER_CALL([])
 //    // ; dep*              := <map(Snd)> repl*
 //    ; cong := <replace-all-id(|[(term, filter-call)])> pattern

  use-var: i-> Var($[use[i]__])
  
overlays

  FILTER_RULE(pattern, body)  =
  SDefT(
    "nabl-filtering-site"
  , []
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__")
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__")
    ]
  , Seq(Match(pattern), body)
  )

  FILTER_CALL(ho-name, ts) = 
  CallT(
    SVar("nabl-filter")
  , []
  , [Var("lang__"), Var("partition__"), Var("uris__"), ho-name, LIST(ts)]
  )

  CREATE_FILTER_RULE(string, deps, name, body) = 
  SDefT(
    "nabl-filter-def"
  , []
  , [ DefaultVarDec("partition__")
    , DefaultVarDec("ctx-terms__")
    , DefaultVarDec("ctx-string__")
    ]
  , Seq(
      Match(name)
    , Seq(
	      Where(Assign(string, Var("ctx-string__")))
	    , Seq(
	        Where(Assign(LIST(deps), Var("ctx-terms__")))
	      , body
	      )
	    )
	  )
  ) 
  
  DISAMBIG_RULE(pattern, body)  =
  SDefT(
    "nabl-disambiguation-site"
  , []
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__")
    , DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__")
    ]
  , Seq(Match(pattern), body)
  )

  DISAMBIG_CALL(ts) = 
  CallT(
    SVar("nabl-disambiguate")
  , []
  , [Var("lang__"), Var("partition__"), Var("uris__"), LIST(ts)]
  )

