module generation/sections

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/util
  generation/scoping-sites
  generation/def-sites
  generation/prop-sites
  generation/use-sites
  generation/import-sites
  generation/constraints
    
rules // namespaces 
      
  nabl-to-str:
    Namespaces(namespaces) -> [Signature([Constructors(<map(ns-to-constructor)> namespaces)])]
    
  ns-to-constructor: // generates constructors for namespaces
    NamespaceDef(ns) -> CONS_DECL(<ns-name> ns, "Namespace")
  
  ns-to-term: NamespaceRef(ns) -> TERM(<ns-name> ns)

  ns-name: ns -> $[NablNs[ns]]
  
rules // properties
        
  nabl-to-str:
    Properties(prop*) -> [Signature([Constructors(cons*)]), Rules([rule, rule*])]
    where
    	cons* := <map(nabl-to-str)> prop*
    ; rule  := SDefNoArgs("custom-properties", Build(LIST(<map(ns-prop-name-to-str)> prop*)))
    ; rule* := <mapconcat(prop-to-rules)> prop*
  
  nabl-to-str: // generate constructors for properties
    PropertyDef(p, _, _) -> CONS_DECL(<ns-prop-name-to-str> p, "Property") 

  nabl-to-str: PropertyRef(p) -> TERM(<ns-prop-name-to-str> p)
  nabl-to-str: TypeProp()     -> TERM("Type")

  ns-prop-name-to-str: p -> $[NablProp_[p]]

  prop-to-rules:
  	PropertyDef(p, _, _) -> PROP_RULES(p, TERM(<ns-prop-name-to-str> p), $[[p]-is], $[[p]-check], $[[p]-lookup], $[[p]-match], $[[p]-of])
  	
overlays
	
	PROP_RULES(p, pt, p-is, p-check, p-lookup, p-match, p-of) =
	[ SDefT(
	    p-is
	  , []
	  , [DefaultVarDec("task*")]
	  , CallT(
	      SVar("prop-calc")
	    , []
	    , [Var("task*"), NoAnnoList(List([]))]
	    )
	  )
	, SDefT(
	    p-is
	  , []
	  , [DefaultVarDec("task*"), DefaultVarDec("dep*")]
	  , CallT(
	      SVar("prop-calc")
	    , []
	    , [Var("task*"), Var("dep*")]
	    )
	  )
	, SDefT(
	    p-check
	  , []
	  , [DefaultVarDec("task*")]
	  , CallT(
	      SVar("prop-check")
	    , []
	    , [ pt
	      , Var("task*")
	      , NoAnnoList(List([]))
	      ]
	    )
	  )
	, SDefT(
	    p-check
	  , []
	  , [DefaultVarDec("task*"), DefaultVarDec("dep*")]
	  , CallT(
	      SVar("prop-check")
	    , []
	    , [ pt
	      , Var("task*")
	      , Var("dep*")
	      ]
	    )
	  )
	, SDefT(
	    p-lookup
	  , []
	  , [DefaultVarDec("task*")]
	  , CallT(
	      SVar("prop-lookup")
	    , []
	    , [ pt
	      , Var("task*")
	      , NoAnnoList(List([]))
	      ]
	    )
	  )
	, SDefT(
	    p-lookup
	  , []
	  , [DefaultVarDec("task*"), DefaultVarDec("dep*")]
	  , CallT(
	      SVar("prop-lookup")
	    , []
	    , [ pt
	      , Var("task*")
	      , Var("dep*")
	      ]
	    )
	  )
	, SDefT(
	    p-match
	  , []
	  , [DefaultVarDec("task*"), DefaultVarDec("relation")]
	  , CallT(
	      SVar("prop-match")
	    , []
	    , [Var("task*"), Var("relation")]
	    )
	  )
	, SDefNoArgs(
	    p-of
	  , CallT(
	      SVar("property-of")
	    , []
	    , [pt]
	    )
	  )
	, RDefT(
		  "new-property-task"
		, []
		, [DefaultVarDec(ListVar("task*"))]
		, RuleNoCond(
		    NoAnnoList(
		      Tuple([pt, Var("term")])
		    )
		  , App(
		      CallT(SVar(p-of), [], [Var(ListVar("task*"))])
		    , Var("term")
		    )
		  )
	  )
	]

rules // imports
    
  nabl-to-str = Imports(![ImportWildcard("lib/nbl"), ImportWildcard("lib/task"), ImportWildcard("lib/types")|<id>]); MkSingleton
    
rules // binding rules

  nabl-to-str:
    BindingRules(rs) -> [Rules(<filter-with-index(to-rules); concat; nonempty> rs)]
    
  to-rules:
    (i, rule@BindingRule(pattern, constr*, clause*)) -> [b*, d*, p*, u*, i*, m1*, m2*]
    where 
       b* := [<binding-to-scope-rule> rule] 
    <+ b* := [] 
    where 
       d* := [<binding-to-def-rule> rule] 
    <+ d* := [] 
    where
       bound*         := <bound-vars> pattern
     ; (task*, repl*) := <constraints-to-tasks(|bound*, i, 0)> (constr*, [])
    where 
       p* := [<binding-to-prop-rule(|bound*, task*, repl*)>]
    <+ p* := []
    where 
       u* := [<binding-to-use-rule(|bound*, task*, repl*)>]
    <+ u* := []
    where 
       i* := [<binding-to-import-rule(|bound*, task*, repl*)>]
    <+ i* := []
    where
       m1* := <constraints-to-match-rules(|bound*, i, 0)> constr*
     ; m2* := <filter-with-index(to-match-rules(|bound*, i)); concat> clause*
    