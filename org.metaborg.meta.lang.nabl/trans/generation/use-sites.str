module generation/use-sites

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/-
  
rules
  
  use-to-name = 
    ?RefClause(<fetch-elem(use-to-name)>)
  + ?ImportClause(<fetch-elem(use-to-name)>)
  + ?RefClausePart(_, _, <id>, _, _, _)
  + ?SingleImport(_, _, <id>, _, _, _, _, _)
  + ?WildcardImport(_, _, Context(_, _, <id>, _, _), _, _)
    
  binding-to-use-rule(|bound*, task*, repl*):
    (i, BindingRule(pattern, constr*, clause*)) -> USE_RULE(pattern, seq)
    where 
      use-clause* := <filter-with-index(to-use-clauses(|pattern, bound*, repl*, i)); concat; nonempty> clause*
    ; seq         := <to-seq> [task*, use-clause*]
      
  to-use-clauses(|pattern, bound*, repl*, i):
    (j, clause) -> [clause*, cong]
    where
      RefClause(part*)    := clause
    + ImportClause(part*) := clause
    where
      k        := <extend-index(|i)> j
    ; (clause*, candidate*) 
               := <filter-with-index(to-use-candidate(|bound*, repl*, k)); unzip; (concat, id)> part*
    ; term     := <use-to-name> clause
    ; use-call := USE_CALL(candidate*)
    ; cong     := <add-force-origins; replace-all-id(|[(term, use-call)])> pattern
  
  to-use-candidate(|bound*, glob-repl*, i):
    (j, part) -> (task*, CANDIDATE(ns-term, prop-term*, ctx-term, wci, dep*))
    where
      (RefClausePart(disamb, ns, term, prop*, ctx, constr*)                            := part; import-ns* := [])
    + (SingleImport(disamb, ns, term, prop*, ctx, alias, _, constr*)                   := part; import-ns* := [])
    + WildcardImport(import-ns*, _, Context(disamb, ns, term, prop*, ctx), _, constr*) := part
    where
      ns-term        := <ns-to-term> ns
    ; k              := <extend-index(|i)> j
    ; (task*, repl*) := <constraints-to-tasks(|bound*, k, 1)> (constr*, glob-repl*)
    ; prop-term*     := <map(prop-pattern-to-str(|[]); replace-all(|repl*))> prop*
    ; ctx-term       := <scope-to-term; replace-all(|repl*)> ctx
    ; dep*           := <map(Snd)> repl*
    ; wci            := <part-to-wildcardimport(|import-ns*)> part
  
  prop-pattern-to-str(|dependencies): PropertyPattern(type, p, t) -> PROPERTY(<nabl-to-str> p, t, dependencies) 

  part-to-wildcardimport(|import-ns*):
    RefClausePart(_, _, _, _, _, _) -> TERM("True")

  part-to-wildcardimport(|import-ns*):
    SingleImport(_, _, _, _, _, _, _, _) -> TERM("True")
    
  part-to-wildcardimport(|import-ns*):
    WildcardImport(_, _, Context(_, ns, _, _, _), _, _) -> TERM("False")
    where
      <collect-one(?ns)> import-ns*
      
  part-to-wildcardimport(|import-ns*):
    WildcardImport(_, _, Context(_, ns, _, _, _), _, _) -> TERM("True")
    where
      not(<collect-one(?ns)> import-ns*)

  to-match-rules(|bound*, i):
    (j, RefClause(part*)) -> rule*
    where
      k      := <extend-index(|i)> j
    ; rule*  := <map-with-index(to-match-rules(|bound*, k)); concat> part*
  
  to-match-rules(|bound*, i):
    (j, RefClausePart(disamb, ns, term, prop*, scope, constr*)) -> rule*
    where
      k     := <extend-index(|i)> j
    ; rule* := <constraints-to-match-rules(|bound*, k, 1)> constr*

overlays
     
  USE_RULE(pattern, body) =
  SDefT(
    "nabl-use-site"
  , []
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__")
		, DefaultVarDec("uniques__")
    , DefaultVarDec("uris__")
    , DefaultVarDec("states__") 
    ]
  , Seq(Match(pattern), body)
  )
  
  USE_CALL(candidates) =
  CallT(
    SVar("nabl-use")
  , []
  , [ Var("lang__")
    , Var("partition__")
		, Var("uniques__")
    , Var("uris__")
    , LIST(candidates)
    ] 
  )
  
  CANDIDATE(ns, ps, ctx, wci, deps) =
  TERM("UseCandidate", [ns, LIST(ps), ctx, wci, LIST(deps)])
  