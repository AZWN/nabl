module generation/prop-sites

imports
  
  libstrc
  include/NameBindingLanguage
  
  generation/util
  generation/sections
  generation/def-sites
  generation/constraints
  
rules

  pdebug(s) = id
  
   binding-to-prop-rule(|bound*, task*, repl*):
    (i, BindingRule(pattern, constr*, clause*)) -> PROP_RULE(pattern, seq)
    where
      def-clause*    := <filter-def-clauses; nonempty> clause*
    ; implicit*      := <implicit-def-vars> def-clause*
    ; prop-clause*   := <filter-with-index(to-prop-clauses(|pattern, bound*, repl*, i)); concat> def-clause*
    where
       match* := [Where(Assign(LIST(<nonempty> implicit*), Var("implicits__")))] 
    <+ match* := []
    where
      seq := <to-seq> [match*, task*, prop-clause*]
    
  to-prop-clauses(|pattern, bound*, glob-repl*, i):
    (j, DefClause(kind, _, ns, term, prop*, _, constr*)) -> [task*, cong]
    where
      <nonempty> prop*
    ; ns-term        := <ns-to-term> ns
    ; k              := <extend-index(|i)> j
    ; (task*, repl*) := <constraints-to-tasks(|bound*, k, 1)> (constr*, glob-repl*)
    ; dep*           := <map(Snd)> repl*
    ; prop-call      := PROP_CALL(<replace-all(|repl*); map(prop-to-str(|dep*))> prop*)
    with
       Implicit() := kind
     ; cong := Where(App(prop-call, <implicit-def-var> j))
    <+ cong := <replace-all-id(|[(term, prop-call)])> pattern
     
  to-match-rules(|bound*, i):
    (j, DefClause(kind, _, ns, term, prop*, _, constr*)) -> rule*
    where
      <nonempty> prop*
    ; k      := <extend-index(|i)> j
    ; rule*  := <constraints-to-match-rules(|bound*, k, 1)> constr*
       
rules
         
  prop-to-str(|dependencies): PropertyTerm(p, t)       -> PROPERTY(<nabl-to-str> p, t, dependencies)     
  prop-to-str(|dependencies): PropertyPattern(_, p, t) -> PROPERTY(<nabl-to-str> p, t, dependencies) 

overlays
  
  PROP_RULE(pattern, body)  =
  SDefT(
    "nabl-prop-site"
  , []
  , [ DefaultVarDec("lang__")
    , DefaultVarDec("partition__")
    , DefaultVarDec("uri__")
    , DefaultVarDec("states__")
    , DefaultVarDec("implicits__")
    ]
  , Seq(Match(pattern), body)
  )

  PROP_CALL(ps) = 
  CallT(
    SVar("nabl-props")
  , []
  , [Var("partition__"), LIST(ps)]
  )
  
  PROPERTY(kind, value, dependencies) = TERM("Prop", [kind, value, LIST(dependencies)])

