module Vernacular.pp.generated

imports 
  libstratego-gpp
  lib/runtime/tmpl/-

imports
  coq-semantics/Coq
  coq-semantics/Lexical.pp.generated
  coq-semantics/Gallina.pp.generated

strategies
  prettyprint-AssumptionKeyword =
    ![S(<is-string>)]

  prettyprint-AssertionKeyword =
    ![S(<is-string>)]

  prettyprint-example =
    prettyprint-AssumptionKeyword

  prettyprint-example =
    prettyprint-AssertionKeyword


strategies
  prettyprint-CoqFile :
    Sent(a) -> [ H(
                   [SOpt(HS(), "0")]
                 , [a1745]
                 )
               ]
    where a1745 := <pp-V-list(prettyprint-Sentence|"1")> a

  prettyprint-Sentence :
    Assumption(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a1746]
                       )
                     ]
    where a1746 := <pp-one-Z(prettyprint-Assumption)> a

  prettyprint-Sentence :
    Definition(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [a1747]
                       )
                     ]
    where a1747 := <pp-one-Z(prettyprint-Definition)> a

  prettyprint-Sentence :
    Inductive(a) -> [ H(
                        [SOpt(HS(), "0")]
                      , [a1748]
                      )
                    ]
    where a1748 := <pp-one-Z(prettyprint-Inductive)> a

  prettyprint-Sentence :
    Fixpoint(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a1749]
                     )
                   ]
    where a1749 := <pp-one-Z(prettyprint-Fixpoint)> a

  prettyprint-Sentence :
    AssertionProof(a, b) -> [ H(
                                [SOpt(HS(), "0")]
                              , [a1750, S(" "), b844]
                              )
                            ]
    where a1750 := <pp-one-Z(prettyprint-Assertion)> a
    where b844 := <pp-one-Z(prettyprint-Proof)> b

  prettyprint-Assumption :
    Assuption(a, b) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ a1751
                           , S(" ")
                           , b845
                           , S(".")
                           ]
                         )
                       ]
    where a1751 := <pp-one-Z(prettyprint-AssumptionKeyword)> a
    where b845 := <pp-one-Z(prettyprint-Assums)> b

  prettyprint-Assums :
    Term(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [a1752, S(" : "), b846]
                    )
                  ]
    where a1752 := <pp-H-list(prettyprint-Ident)> a
    where b846 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Assums :
    Terms(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [a1753]
                  )
                ]
    where a1753 := <pp-H-list(prettyprint-AssumsPar)> a

  prettyprint-AssumsPar :
    Pars(a, b) -> [ H(
                      [SOpt(HS(), "0")]
                    , [ S("(")
                      , a1754
                      , S(" : ")
                      , b847
                      , S(")")
                      ]
                    )
                  ]
    where a1754 := <pp-H-list(prettyprint-Ident)> a
    where b847 := <pp-one-Z(prettyprint-Term)> b

  prettyprint-Definition :
    Def(a, b, c, d) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("Definition ")
                           , a1755
                           , S(" ")
                           , b848
                           , S(" ")
                           , c366
                           , S(" :=")
                           ]
                         )
                       , H(
                           [SOpt(HS(), "0")]
                         , [d230]
                         )
                       , H(
                           [SOpt(HS(), "0")]
                         , [S(".")]
                         )
                       ]
    where a1755 := <pp-one-Z(prettyprint-Ident)> a
    where b848 := <pp-H-list(prettyprint-Binder)> b
    where c366 := <pp-one-Z(prettyprint-OptType)> c
    where d230 := <pp-one-Z(prettyprint-Term)> d

  prettyprint-Definition :
    Let(a, b, c, d) -> [ H(
                           [SOpt(HS(), "0")]
                         , [ S("Let ")
                           , a1756
                           , S(" ")
                           , b849
                           , S(" ")
                           , c367
                           , S(" :=")
                           ]
                         )
                       , H(
                           [SOpt(HS(), "0")]
                         , [d231, S(".")]
                         )
                       ]
    where a1756 := <pp-one-Z(prettyprint-Ident)> a
    where b849 := <pp-H-list(prettyprint-Binder)> b
    where c367 := <pp-one-Z(prettyprint-OptType)> c
    where d231 := <pp-one-Z(prettyprint-Term)> d

  prettyprint-Inductive :
    Ind(a) -> [ H(
                  [SOpt(HS(), "0")]
                , [S("Inductive "), a1757, S(".")]
                )
              ]
    where a1757 := <pp-H-list(prettyprint-IndBody|"with ")> a

  prettyprint-Inductive :
    CoInd(a) -> [ H(
                    [SOpt(HS(), "0")]
                  , [S("CoInductive "), a1758, S(".")]
                  )
                ]
    where a1758 := <pp-H-list(prettyprint-IndBody|"with ")> a

  prettyprint-ConsDecl :
    ConsDecl(a, b, c) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a1759
                             , S(" ")
                             , b850
                             , S(" ")
                             , c368
                             ]
                           )
                         , H(
                             []
                           , [S("")]
                           )
                         ]
    where a1759 := <pp-one-Z(prettyprint-Ident)> a
    where b850 := <pp-H-list(prettyprint-Binder)> b
    where c368 := <pp-one-Z(prettyprint-OptType)> c

  prettyprint-ConsDecls :
    ListDeclBar(a) -> [ H(
                          [SOpt(HS(), "0")]
                        , [S("| "), a1760]
                        )
                      ]
    where a1760 := <pp-H-list(prettyprint-ConsDecl|"| ")> a

  prettyprint-ConsDecls :
    ListDecl(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [a1761]
                     )
                   ]
    where a1761 := <pp-H-list(prettyprint-ConsDecl|"| ")> a

  prettyprint-IndBody :
    Induc(a, b, c, d) -> [ H(
                             [SOpt(HS(), "0")]
                           , [ a1762
                             , S(" ")
                             , b851
                             , S(" : ")
                             , c369
                             , S(" :=")
                             ]
                           )
                         , H(
                             [SOpt(HS(), "0")]
                           , [d232]
                           )
                         ]
    where a1762 := <pp-one-Z(prettyprint-Ident)> a
    where b851 := <pp-H-list(prettyprint-Binder)> b
    where c369 := <pp-one-Z(prettyprint-Term)> c
    where d232 := <pp-one-Z(prettyprint-ConsDecls)> d

  prettyprint-Fixpoint :
    Fixpoint(a) -> [ H(
                       [SOpt(HS(), "0")]
                     , [S("Fixpoint "), a1763, S(".")]
                     )
                   ]
    where a1763 := <pp-V-list(prettyprint-FixBody|"0", " with")> a

  prettyprint-Fixpoint :
    CoFixpoint(a) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("CoFixpoint "), a1764, S(".")]
                       )
                     ]
    where a1764 := <pp-V-list(prettyprint-CoFixBody|"0", " with")> a

  prettyprint-Assertion :
    Assertion(a, b, c, d) -> [ H(
                                 [SOpt(HS(), "0")]
                               , [ a1765
                                 , S(" ")
                                 , b852
                                 , S(" ")
                                 , c370
                                 , S(" : ")
                                 , d233
                                 , S(".")
                                 ]
                               )
                             ]
    where a1765 := <pp-one-Z(prettyprint-AssertionKeyword)> a
    where b852 := <pp-one-Z(prettyprint-Ident)> b
    where c370 := <pp-H-list(prettyprint-Binder)> c
    where d233 := <pp-one-Z(prettyprint-Term)> d

  prettyprint-Proof :
    Admitted() -> [ H(
                      [SOpt(HS(), "0")]
                    , [S("Proof. Admitted.")]
                    )
                  ]

  prettyprint-example =
    prettyprint-CoqFile

  prettyprint-example =
    prettyprint-Sentence

  prettyprint-example =
    prettyprint-Assumption

  prettyprint-example =
    prettyprint-Assums

  prettyprint-example =
    prettyprint-AssumsPar

  prettyprint-example =
    prettyprint-Definition

  prettyprint-example =
    prettyprint-Inductive

  prettyprint-example =
    prettyprint-ConsDecl

  prettyprint-example =
    prettyprint-ConsDecls

  prettyprint-example =
    prettyprint-IndBody

  prettyprint-example =
    prettyprint-Fixpoint

  prettyprint-example =
    prettyprint-Assertion

  prettyprint-example =
    prettyprint-Proof