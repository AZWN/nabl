module coq-semantics/skeleton

rules
  
    build-module(|language):
    ((sent_ns,     sent_ns-def)
    ,(sent_scopes, sent_scopes-def)
    ,(sent_defines,sent_defines-def)
    ,(sent_refers, sent_refers-def)
    ,(sent_ty,     sent_ty-def)) -> |[
Require Import nabl_definition.
Require Import sdf_definition.
Require Import ts_nabl.
Require Import ident_language.

Module ident_nabl_gen <: (NaBL_Sig ident_sdf_gen).
Module Term := SDF_Term ident_sdf_gen.
Export Term.
Export ident_sdf_gen.

sent_ns
sent_ns-def
sent_scopes
sent_scopes-def
sent_defines
sent_defines-def
sent_refers
sent_refers-def
End ident_nabl_gen.


Module ident_ts_nabl_gen <: TS_NaBL_Sig ident_sdf_gen ident_nabl_gen.

Module nabl_wf_mod := NaBL_wf ident_sdf_gen ident_nabl_gen.
Export nabl_wf_mod.
Import ident_sdf_gen.
Import ident_nabl_gen.

Definition type_sort := Type_S.

sent_ty
sent_ty-def

Lemma typed_def_unique : forall tt id ns ty1 ty2 k1 k2, typed_defines_R tt id ns ty1 k1 -> typed_defines_R tt id ns ty2 k2 -> ty1 = ty2 /\ k1 = k2.
  Proof.
    intros.
    inversion H.
    subst.
    inversion H0; subst.
    eauto.
  Qed.

End ident_ts_nabl_gen.
      ]|
      where
        ident_language    := language;
        ident_sdf_gen     := $[SDF_[language]_gen];
        ident_nabl_gen    := $[NaBL_[language]_gen];
        ident_ts_nabl_gen := $[TS_NaBL_[language]_gen]