module coq-semantics/main

imports
  include/NameBindingLanguage
  generation/util
  libstratego-gpp
  coq-semantics/-
  include/Coq/pp/-
  include/Coq/signatures/-
  include/Coq/Coq-parenthesize
  
rules
  
  generate-coq-semantics:
    (selected, position, ast@Module(name, _), path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"v")> path
    ; coq-file := <strip-annos; module-to-coq> ast
    with
       result := <parenthesize-Coq; prettyprintCoq-Start; box2text-string(|100)> coq-file
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(prettyprintCoq-example) ; debug(!"cannot pp ")))> coq-file
    ;  result := ""
 
rules
  
  module-to-coq:
    Module(name, section*) -> T|[ sents ]|
    where
      sents := <filter(section-to-coq); concat> section*
    
rules // namespaces
  
  section-to-coq:
  	Namespaces(ns*) -> C|[
  	  Inductive ID_NS : Set :=
  	    | decls
  	    .
  	  Definition NS := ID_NS.
  	]|
  	with
  	  decls := <map(namespace-to-coq)> ns*
  	  
  namespace-to-coq:
  	NamespaceDef(ns) -> ConsDecl($[[ns]NS], [], None())

rules // binding rules
  
  section-to-coq:
    Bindings(r*) -> [scopes*, defines*, refers*, ty-def*]
    with
      scopes*  := <binding-rules-to-coq(scope-to-coq        |"scopes",        T|[term -> NS -> Prop]|)> r*
    ; defines* := <binding-rules-to-coq(defines-to-coq      |"defines",       T|[term -> Ident -> NS -> key -> Prop]|)> r*
    ; refers*  := <binding-rules-to-coq(refers-to-to-coq    |"refers_to",     T|[term -> Ident -> NS -> key -> Prop]|)> r*
    ; ty-def*  := <binding-rules-to-coq(typed-defines-to-coq|"typed_defines", T|[term -> Ident -> NS -> key -> Prop]|)> r*
  
  binding-rules-to-coq(binding-to-coq|name, ty):
    r* -> C|[
      Inductive ident : ty :=
        | decls
        .
      Definition ident1 := ident.
      ]|
    with
      decls  := <collect-all(binding-rule-to-coq(binding-to-coq|)); concat> r*;
      ident  := $[[name]R];
      ident1 := $[[name]_R]
    
  binding-rule-to-coq(clause-to-coq|):
    BindingRule(pattern, [], clause*) -> <filter(clause-to-coq(|c, pattern))> clause*
    with
      c := <pattern-to-cons> pattern
