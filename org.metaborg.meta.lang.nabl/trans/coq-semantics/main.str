module coq-semantics/main

imports
  include/NameBindingLanguage
  generation/util
  libstratego-gpp
  coq-semantics/-
  include/Coq/pp/-
  include/Coq/signatures/-
  include/Coq/Coq-parenthesize
  
rules
  
  generate-coq-semantics:
    (selected, position, ast@Module(name, _), path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"v")> path
    ; coq-file := <strip-annos; module-to-coq> ast
    with
       result := <parenthesize-Coq; prettyprintCoq-Start; box2text-string(|100)> coq-file
    <+ <bottomup(try(not(is-string) ; not(is-list) ; not(prettyprintCoq-example) ; debug(!"cannot pp ")))> coq-file
    ;  result := ""
 
rules
  
  module-to-coq:
    Module(name, section*) -> output
    where
       ns := <fetch-elem(?Namespaces(_)); namespaces-to-coq> section*
     ; binding* := <fetch-elem(Bindings(id))> section*
     ; scopes  := <binding-rules-to-coq(scope-to-coq        |"scopes",        T|[term -> NS -> Prop]|)> binding*
     ; defines := <binding-rules-to-coq(defines-to-coq      |"defines",       T|[term -> Ident -> NS -> key -> Prop]|)> binding*
     ; refers  := <binding-rules-to-coq(refers-to-to-coq    |"refers_to",     T|[term -> Ident -> NS -> key -> Prop]|)> binding*
     ; ty-def  := <binding-rules-to-coq(typed-defines-to-coq|"typed_defines", T|[term -> Ident -> NS -> key -> Prop]|)> binding*
     ; output  := <build-module> (ns, scopes, defines, refers, ty-def)
    
rules // namespaces
  
  namespaces-to-coq:
  	Namespaces(ns*) -> |[
  	  Inductive ID_NS : Set := decl.
  	  Definition NS := ID_NS.
  	  ]|
  	with
  	  decl := <map(namespace-to-coq); !ListDeclBar(<id>)> ns*
  	  
  namespace-to-coq:
  	NamespaceDef(ns) -> ConsDecl($[[ns]NS], [], None())

rules // binding rules
  
  binding-rules-to-coq(binding-to-coq|name, t_ty):
    r* -> |[
      Inductive ident1 : t_ty := decl.
      Definition ident2 := ident1.
      ]|
    with
      decl  := <collect-all(binding-rule-to-coq(binding-to-coq|)); concat; !ListDeclBar(<id>)> r*;
      ident1 := $[[name]R];
      ident2 := $[[name]_R]
    
  binding-rule-to-coq(clause-to-coq|):
    BindingRule(pattern, [], clause*) -> <filter(clause-to-coq(|c, pattern))> clause*
    with
      c := <pattern-to-cons> pattern
