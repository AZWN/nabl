module coq-semantics/main

imports
  include/NameBindingLanguage
  generation/util
  coq-semantics/Coq
  coq-semantics/Vernacular.pp.generated
  coq-semantics/scopes
  
rules
  
  generate-coq-semantics:
    (selected, position, ast@Module(name, _), path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"v")> path
    ; coq-file := <strip-annos; module-to-coq> ast
    with
       result := <prettyprint-CoqFile> coq-file
    // <+ <bottomup(try(not(is-string) ; not(is-list) ; not(pp-stratego-string) ; debug(!"cannot pp ")))> str-module
    // ;  result := ""
 
rules
  
  module-to-coq:
    Module(name, section*) -> <fail>
    
rules // namespaces
  
  section-to-coq:
  	Namespaces(ns*) -> [Ind([Induc("ID_NS", [], Ref("Set"), cdec*)]), Def("NS", [], None(), Ref("ID_NS"))]
  	with
  	  cdec* := <map(namespace-to-coq)> ns*
  	  
  namespace-to-coq:
  	NamespaceDef(ns) -> ConsDecl($[[ns]NS], [], None())
  
rules // 
  	
  section-to-coq:
    BindingRules(r*) -> <fail>
    with
      scope-cdec* := <collect-all(scope-to-coq); concat> r* 
  
rules
  	
  clause-to-coq(|pattern):
  	DefClause(Explicit(), Unique(), ns, term, [], Current(), []) -> <fail>
  	
    
  clause-to-coq(|pattern):
    RefClause([RefClausePart(All(), ns, term, [], Current(), [])]) -> <fail>