module coq-semantics/scopes

imports
  include/NameBindingLanguage
  generation/util
  coq-semantics/-

rules
    
  scope-to-coq(|c, pattern):
    ScopeClause([NamespaceRef(ns)]) -> ConsDecl($[[c]_scopes_[ns]], binder*, type)
    where
      (term, binder*, _, _) := <pattern-to-term(|0, None())> pattern
    with
      type := SCOPES(term, $[[ns]NS])

  // scope-to-coq(|c, pattern):
	 //    DefClause(Explicit(), Unique(), NamespaceRef(ns), VarRef(x), _, DefScopes(_), []) ->
  //     ConsDecl($[[c]_scopes_[ns]], binder*, type)
  //   where
  //     (term, binder*, _, _) := <pattern-to-term(|0, None())> pattern
  //   with
  //     type := SCOPES(term, $[[ns]NS])
      
overlays
  
  SCOPES(t, ns) = Type(APPLY2(Ref("scopesR"), t, Ref(ns)))