module coq-semantics/scopes

imports
  include/NameBindingLanguage
  generation/util
  lib/Coq/pp/-
  lib/Coq/signatures/-
  coq-semantics/-

rules
    
  scope-to-coq(|c, pattern):
    ScopeClause([NamespaceRef(CurrentLanguage(), ns)]) -> D|[identsc optBinders' optType']|
    where
      (termt, optBinders*, _, _) := <pattern-to-term(|0, None())> pattern
    with
      identns     := $[[ns]NS]
    ; optBinders' := OptBinders(<nub> optBinders*)
    ; optType'    := OptType(T|[scopesR termt identns]|)
    ; identsc     := $[[c]_scopes_[ns]]

  // scope-to-coq(|c, pattern):
	 //    DefClause(Explicit(), Unique(), NamespaceRef(ns), VarRef(x), _, DefScopes(_), []) ->
  //     ConsDecl($[[c]_scopes_[ns]], binder*, type)
  //   where
  //     (term, binder*, _, _) := <pattern-to-term(|0, None())> pattern
  //   with
  //     type := SCOPES(term, $[[ns]NS])
