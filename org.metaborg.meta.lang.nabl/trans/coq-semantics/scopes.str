module coq-semantics/scopes

imports
  include/NameBindingLanguage
  generation/util
  coq-semantics/-
  include/Coq-pp

rules
    
  scope-to-coq(|c, pattern):
    ScopeClause([NamespaceRef(CurrentLanguage(), ns)]) -> ConsDecl($[[c]_scopes_[ns]], binder*, type)
    where
      (t, binder*, _, _) := <pattern-to-term(|0, None())> pattern
    with
      ns'  := $[[ns]NS]
    ; type := T|[scopesR t ns']|

  // scope-to-coq(|c, pattern):
	 //    DefClause(Explicit(), Unique(), NamespaceRef(ns), VarRef(x), _, DefScopes(_), []) ->
  //     ConsDecl($[[c]_scopes_[ns]], binder*, type)
  //   where
  //     (term, binder*, _, _) := <pattern-to-term(|0, None())> pattern
  //   with
  //     type := SCOPES(term, $[[ns]NS])
