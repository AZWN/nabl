module coq-semantics/defines

imports
  include/NameBindingLanguage
  generation/util
  include/Coq-pp
  coq-semantics/patterns
  coq-semantics/main

rules
  
  defines-to-coq(|c, pattern):
    DefClause(Explicit(), Unique(), NamespaceRef(CurrentLanguage(), ns), VarRef(x), [], Current(), []) ->
      ConsDecl($[[c]_defines_[ns]], [Bind(x), binder*], coq-term-type)
    where
      (t, binder*, _, Some(k)) := <pattern-to-term(|0, Some(x))> pattern
    with
      ns' := $[[ns]NS]
    ; coq-term-type := T|[definesR t x ns k]|

rules
  
  typed-defines-to-coq(|c, pattern):
    DefClause(Explicit(), Unique(), NamespaceRef(_,ns), VarRef(x), type, Current(), []) ->
      ConsDecl($[[c]_typed_defines_[ns]], [Bind(x), Bind(ty'), binder*], coq-term-type)
    where
      [PropertyTerm(TypeProp(), VarRef(ty'))] := type
    ; (t, binder*, _, Some(k))                := <pattern-to-term(|0, Some(x))> pattern
    with
      ns' := $[[ns]NS]
    ; coq-term-type := T|[typed_definesR t x ns' ty' k]|
