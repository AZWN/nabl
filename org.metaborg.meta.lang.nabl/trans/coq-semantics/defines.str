module coq-semantics/defines

imports
  include/NameBindingLanguage
  generation/util
  lib/Coq/pp/-
  lib/Coq/signatures/-
  coq-semantics/patterns
  coq-semantics/main

rules
  
  defines-to-coq(|c, pattern):
    DefClause(Explicit(), Unique(), NamespaceRef(CurrentLanguage(), ns), VarRef(identx), _, Current(), _) ->
      D|[identcons optBinders' optTypecoq]|
    where
      (termt, optBinders*, _, Some(identk)) := <pattern-to-term(|0, Some(identx))> pattern
    with
      identns'    := $[[ns]NS]
    ; optTypecoq  := OptType(T|[definesR termt identx identns' identk]|)
    ; optBinders' := OptBinders(<nub> [Bind(identx), optBinders*])
    ; identcons   := $[[c]_defines_[ns]]

rules
  
  typed-defines-to-coq(|c, pattern):
    DefClause(Explicit(), Unique(), NamespaceRef(CurrentLanguage(),ns), VarRef(identx), type, Current(), _) ->
      D|[identcons optBinders' optTypecoq]|
    where
      [PropertyTerm(TypeProp(), VarRef(identty'))] := type
    ; (termt, optBinders*, _, Some(identk))        := <pattern-to-term(|0, Some(identx))> pattern
    with
      identns'    := $[[ns]NS]
    ; optTypecoq  := OptType(T|[typed_definesR termt identx identns' identty' identk]|)
    ; optBinders' := OptBinders(<nub> [Bind(identx), Bind(identty'), optBinders*])
    ; identcons   := $[[c]_typed_defines_[ns]]
