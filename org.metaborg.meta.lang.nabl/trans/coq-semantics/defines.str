module coq-semantics/defines

imports
  include/NameBindingLanguage
  generation/util
  coq-semantics/main
  coq-semantics/Coq
  coq-semantics/patterns

rules

  defines-to-coq:
    BindingRule(pattern, [], clause*) -> <filter(defines-to-coq(|c, pattern))> clause*
    with
      c := <definition-pattern-to-cons> pattern
    
  defines-to-coq(|c, pattern):
    DefClause(Explicit(), Unique(), NamespaceRef(ns), VarRef(x), [], Current(), []) ->
      ConsDecl($[[c]_defines_[ns]], [x, binder*], Type(<apply-apply> [Ref("definesR"), coqterm, Ref(x), Ref($[[ns]NS]), k]))
    where
      (coqterm, binder*, _, Some(k)) := <definition-pattern-to-term(|0, x)> pattern
  