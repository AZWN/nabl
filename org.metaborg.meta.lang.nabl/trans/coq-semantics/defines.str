module coq-semantics/defines

imports
  include/NameBindingLanguage
  generation/util
  coq-semantics/main
  coq-semantics/Coq
  coq-semantics/patterns

rules
  
  defines-to-coq(|c, pattern):
    DefClause(Explicit(), Unique(), NamespaceRef(ns), VarRef(x), [], Current(), []) ->
      ConsDecl($[[c]_defines_[ns]], [Bind(x), binder*], coq-term-type)
    where
      (coqterm, binder*, _, Some(k)) := <pattern-to-term(|0, Some(x))> pattern
    with
      coq-term-type := 
		  Type(
		    Apply(
		      Apply(
		        Apply(
		          Apply(
		            Ref("definesR")
		          , coqterm
		          )
		        , Ref(x)
		        )
		      , Ref($[[ns]NS])
		      )
		    , Ref(k)
		    )
		  )