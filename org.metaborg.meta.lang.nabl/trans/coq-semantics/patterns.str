module coq-semantics/patterns

imports
  include/NameBindingLanguage
  generation/util
  coq-semantics/Coq

rules
  
  pattern-to-cons =
    ?NoAnnoList(Op(<id>, _))

  patterns-to-term(|i): [] -> (Ref("Nop"), [])
  
  patterns-to-term(|i):
    [c|cs] -> (Apply(Apply(Ref("Consp"), ct), cts), [cbind*, csbind*])
    with
      (ct, cbind*) := <pattern-to-term(|i)> c
    ; (cts, csbind*) := <patterns-to-term(|<inc> i)> cs
  
  
  pattern-to-term(|i):
    NoAnnoList(Op(c, term*)) -> (Apply(Apply(Apply(Ref("Co"), Ref($[[c]C])), child*), Ref(k)), binder*)
    with
      k := $[k[i]]
    ; (child*, cbinder*) := <patterns-to-term(|<inc> i)> term*
    ; binder* := [cbinder*, Bind(k)]
      
  pattern-to-term(|i):
    Var(n) -> (Ref(n), [Bind(n)])

  pattern-to-term(|i):
    Wld() -> (Ref(n), [Bind(n)])
    with
      n := $[wld[i]]
    
