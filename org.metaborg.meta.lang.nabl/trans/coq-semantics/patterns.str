module coq-semantics/patterns

imports
  include/NameBindingLanguage
  include/Coq-pp
  generation/util
  coq-semantics/-

rules
  
  pattern-to-cons =
    ?NoAnnoList(Op(<id>, _))

  patterns-to-term(|i, x): [] -> (Ref("nil"), [], i, None())
  
  patterns-to-term(|i, x):
    [c|cs] -> (APPLY2(Ref("cons"), ct, cts), [cbind*, csbind*], k, ret)
    with
      (ct, cbind*, j, hd) := <pattern-to-term(|i, x)> c
    ; (cts, csbind*, k, tl) := <patterns-to-term(|<inc> j, x)> cs
    ; ret := <?Some(_) <+ !tl> hd

  // (Co cC [c1; c2; c3] k)
  pattern-to-term(|i, x):
    NoAnnoList(Op(c, term*)) -> (APPLY2(Apply(Ref("Co"), Ref($[[c]C])), child*, Ref(k)), binder*, j, maybe)
    with
      k := $[k[i]]
    ; (child*, cbinder*, j, maybe) := <patterns-to-term(|<inc> i, x)> term*
    ; binder* := [cbinder*, Bind(k)]
      
  pattern-to-term(|i, x):
    Var(n) -> (Ref(n), [Bind(n)], i, None())
    where not(<eq> (x,Some(n)))
  
  pattern-to-term(|i, x):
    Var(n) -> (APPLY2(Ref("Id"), Ref(n), Ref(k)), [Bind(k)], <inc> i, Some(k))
    where
      <eq> (x,Some(n))
    ; k := $[k[i]]  

  pattern-to-term(|i, x):
    ListVar(n) -> (Ref(n'), [Bind(n')], i, None())
    where
      n' := <string-as-chars(filter(not(equal(|'*'))))> n

  pattern-to-term(|i, x):
    Wld() -> (Ref(n), [Bind(n)], <inc> i, None())
    with
      n := $[wld[i]]
