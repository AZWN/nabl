module names

imports
  lib/runtime/nbl/-
  lib/runtime/task/-
  lib/runtime/types/-
  lib/runtime/editor/-
  include/NameBindingLanguage


signature
  constructors
    NablNsModule    : Namespace
    NablNsNamespace : Namespace
    NablNsProperty  : Namespace
    NablNsVariable  : Namespace


rules

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Module(m, _, _)
    ; origin-track-forced(
        Module(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsModule()
          , Unique()
          , Current()
          , [NablNsNamespace(), NablNsProperty()]
          )
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Import(m)
    ; origin-track-forced(
        Import(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsModule()
              , []
              , Current()
              , False()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-import-site(|lang__, partition__, uris__, states__) =
    ?Import(m)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , partition__
        , uris__
        , [ Wildcard(
              [ Import(lang__, NablNsNamespace())
              , Import(lang__, NablNsProperty())
              ]
            , Context(
                NablNsModule()
              , m
              , []
              , Current()
              )
            , Current()
            , []
            )
          ]
        )
      |
      )


rules

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?NamespaceDef(n)
    ; origin-track-forced(
        NamespaceDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsNamespace()
          , Unique()
          , Current()
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?NamespaceRef(n)
    ; origin-track-forced(
        NamespaceRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsNamespace()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


rules

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?PropertyDef(p, ns, t)
    ; origin-track-forced(
        PropertyDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsProperty()
          , Unique()
          , Current()
          , []
          )
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-prop-site(|lang__, partition__, states__, implicits__) =
    ?PropertyDef(p, ns, t)
    ; origin-track-forced(
        PropertyDef(
          nabl-props(
          | partition__
          , [ Prop(
                Type()
              , (ns, t)
              , []
              )
            ]
          )
        , id
        , id
        )
      |
      )

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?PropertyRef(p)
    ; origin-track-forced(
        PropertyRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsProperty()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


rules

  nabl-scoping-site =
    ?BindingRule(_, _, _)
    ; origin-track-forced(
        nabl-scope(|[NablNsVariable()])
      |
      )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Var(x)
    ; origin-track-forced(
        Var(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?ListVar(x)
    ; origin-track-forced(
        ListVar(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?VarRef(x)
    ; origin-track-forced(
        VarRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?ListVarRef(x)
    ; origin-track-forced(
        ListVarRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )