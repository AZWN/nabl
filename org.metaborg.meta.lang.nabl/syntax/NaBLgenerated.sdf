module NaBLgenerated
exports
  context-free syntax
    "namespaces" NamespaceDef* -> ModuleSection {cons("Namespaces")}
    NamespaceID                -> NamespaceDef  {cons("NamespaceDef")}
    NamespaceID                -> NamespaceRef  {cons("NamespaceRef")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> NamespaceDef  {cons("COMPLETION-NamespaceDef")}
    CONTENTCOMPLETE -> NamespaceRef  {cons("COMPLETION-NamespaceRef")}

  lexical syntax
    Id -> NamespaceID 

  context-free syntax
    "properties" PropertyDef*                    -> ModuleSection   {cons("Properties")}
    PropertyID "of" {NamespaceRef ","}+ ":" Sort -> PropertyDef     {cons("PropertyDef")}
    "type"                                       -> PropertyRef     {cons("TypeProp")}
    PropertyID                                   -> PropertyRef     {cons("PropertyRef")}
    "of" PropertyRef Term                        -> PropertyTerm    {cons("PropertyTerm")}
    "of" PropFilter PropertyRef Pattern          -> PropertyPattern {cons("PropertyPattern")}
                                                 -> PropFilter      {cons("Equal")}
    "conformant"                                 -> PropFilter      {cons("Conformant")}
    "where" Term "has" PropertyRef Pattern       -> Constraint      {cons("PropertyConstraint")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection   {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> PropertyDef     {cons("COMPLETION-PropertyDef")}
    CONTENTCOMPLETE -> PropertyRef     {cons("COMPLETION-PropertyRef")}
    CONTENTCOMPLETE -> PropertyTerm    {cons("COMPLETION-PropertyTerm")}
    CONTENTCOMPLETE -> PropertyPattern {cons("COMPLETION-PropertyPattern")}
    CONTENTCOMPLETE -> PropFilter      {cons("COMPLETION-PropFilter")}
    CONTENTCOMPLETE -> Constraint      {cons("COMPLETION-Constraint")}

  lexical syntax
    Id     -> PropertyID 
    "type" -> PropertyID {reject}

  context-free syntax
    "binding" "rules" BindingRule*         -> ModuleSection {cons("BindingRules")}
    Pattern Constraint* ":" BindingClause+ -> BindingRule   {cons("BindingRule")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> BindingRule   {cons("COMPLETION-BindingRule")}

  context-free syntax
    DefKind "defines" Unique NamespaceRef Term PropertyTerm* InDefScopes Constraint*                        -> BindingClause    {cons("DefClause")}
                                                                                                            -> DefKind          {cons("Explicit")}
    "implicitly"                                                                                            -> DefKind          {cons("Implicit")}
                                                                                                            -> Unique           {cons("Unique")}
    "unique"                                                                                                -> Unique           {cons("Unique")}
    "non-unique"                                                                                            -> Unique           {cons("NonUnique")}
    "scopes" {NamespaceRef ","}+                                                                            -> BindingClause    {cons("ScopeClause")}
    {RefClausePart "otherwise"}+                                                                            -> BindingClause    {cons("RefClause")}
    "refers" "to" Disambiguator NamespaceRef Term PropertyPattern* InRefScope Constraint*                   -> RefClausePart    {cons("RefClausePart")}
    {ImportClausePart "otherwise"}+                                                                         -> BindingClause    {cons("ImportClause")}
    "imports" Disambiguator NamespaceRef Term PropertyPattern* FromRefScope Alias IntoDefScopes Constraint* -> ImportClausePart {cons("SingleImport")}
    "imports" {ImportRef ","}+ PropertyPattern* FromRefScope IntoDefScopes Constraint*                      -> ImportClausePart {cons("WildcardImport")}
                                                                                                            -> Alias            {cons("None")}
    "as" Term                                                                                               -> Alias            {cons("Alias")}
    NamespaceRef                                                                                            -> ImportRef        {cons("Direct")}
    "imported" NamespaceRef                                                                                 -> ImportRef        {cons("Transitive")}

  context-free syntax
    CONTENTCOMPLETE -> DefKind          {cons("COMPLETION-DefKind")}
    CONTENTCOMPLETE -> Unique           {cons("COMPLETION-Unique")}
    CONTENTCOMPLETE -> RefClausePart    {cons("COMPLETION-RefClausePart")}
    CONTENTCOMPLETE -> BindingClause    {cons("COMPLETION-BindingClause")}
    CONTENTCOMPLETE -> ImportClausePart {cons("COMPLETION-ImportClausePart")}
    CONTENTCOMPLETE -> Alias            {cons("COMPLETION-Alias")}
    CONTENTCOMPLETE -> ImportRef        {cons("COMPLETION-ImportRef")}

  context-free syntax
                                                                -> InDefScopes   {cons("Current")}
    "in" DefScopes                                              -> InDefScopes   {bracket}
                                                                -> IntoDefScopes {cons("Current")}
    "into" DefScopes                                            -> IntoDefScopes {bracket}
    "current" "scope"                                           -> DefScopes     {cons("Current")}
    {DefScope ","}+                                             -> DefScopes     {cons("DefScopes")}
    "subsequent" "scope"                                        -> DefScope      {cons("Subsequent")}
    Term                                                        -> DefScope      {cons("DefScope")}
                                                                -> InRefScope    {cons("Current")}
    "in" RefScope                                               -> InRefScope    {bracket}
                                                                -> FromRefScope  {cons("Current")}
    "from" RefScope                                             -> FromRefScope  {bracket}
    "current" "scope"                                           -> RefScope      {cons("Current")}
    "enclosing" NamespaceRef                                    -> RefScope      {cons("Enclosing")}
    Disambiguator NamespaceRef Term PropertyPattern* InRefScope -> RefScope      {cons("Context")}
    Term                                                        -> RefScope      {cons("RefScope")}
                                                                -> Disambiguator {cons("All")}
    "best"                                                      -> Disambiguator {cons("Best")}

  context-free syntax
    CONTENTCOMPLETE -> InDefScopes   {cons("COMPLETION-InDefScopes")}
    CONTENTCOMPLETE -> IntoDefScopes {cons("COMPLETION-IntoDefScopes")}
    CONTENTCOMPLETE -> DefScopes     {cons("COMPLETION-DefScopes")}
    CONTENTCOMPLETE -> DefScope      {cons("COMPLETION-DefScope")}
    CONTENTCOMPLETE -> InRefScope    {cons("COMPLETION-InRefScope")}
    CONTENTCOMPLETE -> FromRefScope  {cons("COMPLETION-FromRefScope")}
    CONTENTCOMPLETE -> RefScope      {cons("COMPLETION-RefScope")}
    CONTENTCOMPLETE -> Disambiguator {cons("COMPLETION-Disambiguator")}

  context-free syntax
    "where" Term "refers" "to" NamespaceRef Pattern PropertyPattern* InRefScope -> Constraint {cons("Reference")}

  context-free syntax
    CONTENTCOMPLETE -> Constraint {cons("COMPLETION-Constraint")}

  context-free syntax
    "into" -> Id {reject}