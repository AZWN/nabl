[
   Namespaces                          -- V  [H  [KW["namespaces"]] _1],
   Namespaces.1:iter-star              -- _1,
   NamespaceDef                        -- _1,
   NamespaceRef                        -- _1 _2,
   CurrentLanguage                     -- ,
   LanguageRef                         -- _1 KW["."],
   COMPLETION-ModuleSection            -- _1,
   COMPLETION-NamespaceDef             -- _1,
   COMPLETION-NamespaceRef             -- _1,
   COMPLETION-LanguageRef              -- _1,
   Module                              -- KW["module"] _1 _2,
   Module.2:iter-star                  -- _1,
   Imports                             -- V  [H  [KW["imports"]] _1],
   Imports.1:iter-star                 -- _1,
   ImportWildcard                      -- _1 KW["/-"],
   Import                              -- _1,
   COMPLETION-Module                   -- _1,
   COMPLETION-ModuleSection            -- _1,
   COMPLETION-ImportModule             -- _1,
   Bindings                            -- V  [H  [KW["binding"] KW["rules"]] _1],
   Bindings.1:iter-star                -- _1,
   Binding                             -- _1 KW[":"] _2 _3,
   Defines                             -- KW["defines"] _1 _2 _3 KW["in"] _4,
   Unique                              -- KW["unique"],
   NonUnique                           -- KW["non-unique"],
   RefersTo                            -- KW["refers"] KW["to"] _1 _2 KW["in"] _3 KW["where"] _4,
   Alias                               -- KW["imports"] _1 KW["as"] _2,
   Wildcard                            -- KW["imports"] _1 KW["from"] _2 KW["into"] _3,
   COMPLETION-ModuleSection            -- _1,
   COMPLETION-BindingRule              -- _1,
   COMPLETION-Unique                   -- _1,
   COMPLETION-BindingClause            -- _1,
   Properties                          -- V  [V vs=2 [KW["properties"] _1] _2],
   Properties.1:iter-star              -- _1,
   Properties.2:iter-star              -- _1,
   Property                            -- _1 KW[":"] _2 KW["defines"] _3 KW["has"] _4 _5 KW["where"] _6,
   Property                            -- _1 KW["defines"] _2 _3 _4 KW["where"] _5,
   PropRef                             -- _1,
   COMPLETION-ModuleSection            -- _1,
   COMPLETION-PropertyRule             -- _1,
   COMPLETION-RelationRule             -- _1,
   COMPLETION-PropertyRef              -- _1,
   NamedScope                          -- _1 _2,
   CurrentScope                        -- KW["current"] _1 KW["scope"],
   TermScope                           -- _1 KW["scope"] KW["at"] _2,
   Enclosing                           -- KW["enclosing"] _1 KW["of"] _2,
   GlobalScope                         -- KW["global"] KW["scope"],
   Anonymous                           -- KW["new"] KW["scope"] KW["in"] _1,
   COMPLETION-LocalScope               -- _1,
   COMPLETION-Scope                    -- _1,
   ChildScope                          -- _1 KW["scopes"] _2 KW["at"] KW["child"] KW["nodes"],
   SubsequentScope                     -- _1 KW["scopes"] _2 KW["at"] KW["subsequent"] KW["nodes"],
   NodeScope                           -- KW["requires"] _1 KW["scope"] KW["at"] _2,
   COMPLETION-Clause                   -- _1,
   True                                -- KW["true"],
   False                               -- KW["false"],
   Eq                                  -- _1 KW["=="] _2,
   Match                               -- _1 KW["=>"] _2,
   DefOf                               -- KW["definition"] KW["of"] _1 KW["=>"] _2,
   ScopeOf                             -- _1 KW["=>"] _2,
   RefersTo                            -- _1 KW["refers"] KW["to"] _2 _3,
   HasProperty                         -- _1 KW["has"] _2 _3,
   InRelation                          -- _1 _2 _3,
   COMPLETION-Proposition              -- _1,
   Not                                 -- KW["not"] _1,
   And                                 -- _1 KW["and"] _2,
   Or                                  -- _1 KW["or"] _2,
   COMPLETION-Formula                  -- _1,
   Wld                                 -- KW["_"],
   Var                                 -- _1,
   ListVar                             -- _1,
   VarRef                              -- _1,
   ListVarRef                          -- _1,
   Int                                 -- _1,
   Real                                -- _1,
   Str                                 -- _1,
   Op                                  -- _1 KW["("] _2 KW[")"],
   Op.2:iter-star-sep                  -- _1 KW[","],
   OpQ                                 -- _1 KW["("] _2 KW[")"],
   OpQ.2:iter-star-sep                 -- _1 KW[","],
   Char                                -- _1,
   Tuple                               -- KW["("] _1 KW[")"],
   Tuple.1:iter-star-sep               -- _1 KW[","],
   List                                -- KW["["] _1 KW["]"],
   List.1:iter-star-sep                -- _1 KW[","],
   ListTail                            -- KW["["] _1 KW["|"] _2 KW["]"],
   ListTail.1:iter-star-sep            -- _1 KW[","],
   As                                  -- _1 KW["@"] _2,
   COMPLETION-Pattern                  -- _1,
   Int                                 -- _1,
   Real                                -- _1,
   Str                                 -- _1,
   Op                                  -- _1 KW["("] _2 KW[")"],
   Op.2:iter-star-sep                  -- _1 KW[","],
   OpQ                                 -- _1 KW["("] _2 KW[")"],
   OpQ.2:iter-star-sep                 -- _1 KW[","],
   Char                                -- _1,
   Tuple                               -- KW["("] _1 KW[")"],
   Tuple.1:iter-star-sep               -- _1 KW[","],
   List                                -- KW["["] _1 KW["]"],
   List.1:iter-star-sep                -- _1 KW[","],
   ListTail                            -- KW["["] _1 KW["|"] _2 KW["]"],
   ListTail.1:iter-star-sep            -- _1 KW[","],
   COMPLETION-Term                     -- _1,
   SortVar                             -- _1,
   SortNoArgs                          -- _1,
   Sort                                -- _1 KW["("] _2 KW[")"],
   Sort.2:iter-star-sep                -- _1 KW[","],
   TypeDecl                            -- _1 _2 _3,
   TypeDeclQ                           -- _1 _2 _3,
   Str                                 -- _1,
   NoTypeParams                        -- ,
   TypeParams                          -- KW["("] _1 KW[")"],
   TypeParams.1:iter-sep               -- _1 KW[","],
   TypeParam                           -- _1 KW[":"] _2,
   Restricted                          -- _1 _2,
   Restricted.1:iter-star              -- _1,
   Imported                            -- KW["imported"],
   COMPLETION-RestrictedNamespaceRef   -- _1,
   COMPLETION-Restriction              -- _1,
   Properties                          -- V  [H  [KW["properties"]] _1],
   Properties.1:iter-star              -- _1,
   PropertyDef                         -- _1 KW["of"] _2 KW[":"] _3,
   PropertyDef.2:iter-sep              -- _1 KW[","],
   QualityDef                          -- _1 KW["of"] _2,
   QualityDef.2:iter-sep               -- _1 KW[","],
   TypeProp                            -- KW["type"],
   PropertyRef                         -- _1,
   QualityRef                          -- _1,
   PropertyTerm                        -- KW["of"] _1 _2,
   QualityTerm                         -- KW["of"] KW["quality"] _1,
   PropertyPattern                     -- KW["of"] _1 _2 _3,
   QualityPattern                      -- KW["of"] KW["quality"] _1,
   Equal                               -- ,
   Conformant                          -- KW["conformant"],
   COMPLETION-ModuleSection            -- _1,
   COMPLETION-PropertyDef              -- _1,
   COMPLETION-PropertyRef              -- _1,
   COMPLETION-QualityRef               -- _1,
   COMPLETION-PropertyTerm             -- _1,
   COMPLETION-PropertyPattern          -- _1,
   COMPLETION-PropFilter               -- _1,
   BindingRules                        -- V  [H  [KW["binding"] KW["rules"]] _1],
   BindingRules.1:iter-star            -- _1,
   BindingRule                         -- _1 _2 KW[":"] _3,
   BindingRule.3:iter                  -- _1,
   COMPLETION-ModuleSection            -- _1,
   COMPLETION-BindingRule              -- _1,
   DefClause                           -- _1 KW["defines"] _2 _3 _4 _5 _6 _7,
   DefClause.5:iter-star               -- _1,
   Explicit                            -- ,
   Implicit                            -- KW["implicitly"],
   Unique                              -- ,
   Unique                              -- KW["unique"],
   NonUnique                           -- KW["non-unique"],
   ScopeClause                         -- V  [H  [KW["scopes"]] _1],
   ScopeClause.1:iter-sep              -- _1 KW[","],
   NonTransitiveScopeClause            -- V  [H  [KW["non-transitively"] KW["scopes"]] _1],
   NonTransitiveScopeClause.1:iter-sep -- _1 KW[","],
   RefClause                           -- _1,
   RefClause.1:iter-sep                -- _1 KW["otherwise"],
   RefClausePart                       -- KW["refers"] KW["to"] _1 _2 _3 _4 _5 _6,
   RefClausePart.4:iter-star           -- _1,
   ImportClause                        -- _1,
   ImportClause.1:iter-sep             -- _1 KW["otherwise"],
   SingleImport                        -- KW["imports"] _1 _2 _3 _4 _5 _6 _7 _8,
   SingleImport.4:iter-star            -- _1,
   WildcardImport                      -- KW["imports"] _1 _2 _3 _4 _5,
   WildcardImport.1:iter-sep           -- _1 KW[","],
   WildcardImport.2:iter-star          -- _1,
   None                                -- ,
   Alias                               -- KW["as"] _1,
   FilterClause                        -- KW["filters"] _1 _2 _3 _4,
   DisambiguateClause                  -- KW["disambiguates"] _1 _2 _3 KW["by"] _4 _5,
   MinimalDistance                     -- KW["minimal"] KW["distance"] _1 _2 _3,
   COMPLETION-DefKind                  -- _1,
   COMPLETION-Unique                   -- _1,
   COMPLETION-RefClausePart            -- _1,
   COMPLETION-ImportClausePart         -- _1,
   COMPLETION-Alias                    -- _1,
   COMPLETION-BindingClause            -- _1,
   COMPLETION-Disambiguator            -- _1,
   Current                             -- ,
   Current                             -- ,
   Current                             -- KW["current"] KW["scope"],
   DefScopes                           -- _1,
   DefScopes.1:iter-sep                -- _1 KW[","],
   Subsequent                          -- KW["subsequent"] KW["scope"],
   DefScope                            -- _1,
   Current                             -- ,
   Current                             -- ,
   Current                             -- KW["current"] KW["scope"],
   Enclosing                           -- KW["enclosing"] _1,
   Context                             -- _1 _2 _3 _4 _5,
   Context.4:iter-star                 -- _1,
   RefScope                            -- _1,
   All                                 -- ,
   Best                                -- KW["best"],
   COMPLETION-InDefScopes              -- _1,
   COMPLETION-IntoDefScopes            -- _1,
   COMPLETION-DefScopes                -- _1,
   COMPLETION-DefScope                 -- _1,
   COMPLETION-InRefScope               -- _1,
   COMPLETION-FromRefScope             -- _1,
   COMPLETION-RefScope                 -- _1,
   COMPLETION-Disambiguator            -- _1,
   NoWhere                             -- ,
   Where                               -- KW["where"] _1,
   Filter                              -- KW["with"] _1,
   COMPLETION-Constraints              -- _1,
   COMPLETION-Filters                  -- _1
]