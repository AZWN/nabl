module core/Scopes
imports common/Identifiers terms/Vars core/Namespaces

exports
  lexical syntax
    Id -> ScopeID 

  context-free syntax
    NamespaceRef VarRef                      -> LocalScope {cons("NamedScope")}
    "current" NamespaceRef "scope"           -> LocalScope {cons("CurrentScope")}
    NamespaceRef "scope" "at" VarRef         -> LocalScope {cons("TermScope")}
    "enclosing" NamespaceRef "of" LocalScope -> LocalScope {cons("Enclosing")}
    "global" "scope"                         -> Scope      {cons("GlobalScope")}
    LocalScope                               -> Scope      
    "new" "scope" "in" Scope                 -> Scope      {cons("Anonymous")}

  context-free syntax
    CONTENTCOMPLETE -> LocalScope {cons("COMPLETION-LocalScope")}
    CONTENTCOMPLETE -> Scope      {cons("COMPLETION-Scope")}

  context-free syntax
    Scope "scopes" NamespaceRef "at" "child" "nodes"      -> BindingClause {cons("ChildScope")}
    Scope "scopes" NamespaceRef "at" "subsequent" "nodes" -> BindingClause {cons("SubsequentScope")}
    "requires" NamespaceRef "scope" "at" VarRef           -> BindingClause {cons("NodeScope")}

  context-free syntax
    CONTENTCOMPLETE -> BindingClause {cons("COMPLETION-BindingClause")}