module core/Scopes
imports common/Identifiers core/Namespaces terms/Vars

exports
  lexical syntax
    Id -> ScopeID 

  context-free syntax
    NamespaceRef VarRef                      -> LocalScope {cons("NamedScope")}
    "current" NamespaceRef "scope"           -> LocalScope {cons("CurrentScope")}
    NamespaceRef "scope" "at" VarRef         -> LocalScope {cons("TermScope")}
    "enclosing" NamespaceRef "of" LocalScope -> LocalScope {cons("Enclosing")}
    "global" "scope"                         -> Scope      {cons("GlobalScope")}
    LocalScope                               -> Scope      
    "new" "scope" "in" Scope                 -> Scope      {cons("Anonymous")}

  context-free syntax
    CONTENTCOMPLETE -> LocalScope {cons("COMPLETION-LocalScope")}
    CONTENTCOMPLETE -> Scope      {cons("COMPLETION-Scope")}

  context-free syntax
    Scope "scopes" Scoped+                     -> ScopeClause {cons("CurrentScopeClause")}
    "extends" NamespaceRef "scope" "at" VarRef -> ScopeClause {cons("ExtendsScopeClause")}
    NamespaceRef "at" "child" "nodes"          -> Scoped      {cons("Children")}
    NamespaceRef "at" "subsequent" "nodes"     -> Scoped      {cons("Subsequent")}

  context-free syntax
    CONTENTCOMPLETE -> ScopeClause {cons("COMPLETION-ScopeClause")}
    CONTENTCOMPLETE -> Scoped      {cons("COMPLETION-Scoped")}