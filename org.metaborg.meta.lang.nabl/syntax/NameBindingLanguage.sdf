module NameBindingLanguage
imports common/Layout common/Identifiers terms/Signatures terms/Vars Modules

exports
  context-free start-symbols
    Start

  context-free syntax
    Module -> Start 

  context-free syntax
    "namespaces" NamespaceDef* -> ModuleSection          {cons("Namespaces")}
    NamespaceID                -> NamespaceDef           {cons("NamespaceDef")}
    NamespaceID                -> NamespaceRef           {cons("NamespaceRef")}
    Restriction* NamespaceRef  -> RestrictedNamespaceRef {cons("Restricted")}
    "imported"                 -> Restriction            {cons("Imported")}
    "multiple"                 -> Restriction            {cons("Multiple")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection          {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> NamespaceDef           {cons("COMPLETION-NamespaceDef")}
    CONTENTCOMPLETE -> NamespaceRef           {cons("COMPLETION-NamespaceRef")}
    CONTENTCOMPLETE -> RestrictedNamespaceRef {cons("COMPLETION-RestrictedNamespaceRef")}
    CONTENTCOMPLETE -> Restriction            {cons("COMPLETION-Restriction")}

  lexical syntax
    Id -> NamespaceID 

  context-free syntax
    "properties" PropertyDef*                    -> ModuleSection   {cons("Properties")}
    PropertyID "of" {NamespaceRef ","}+ ":" Sort -> PropertyDef     {cons("PropertyDef")}
    "type"                                       -> PropertyRef     {cons("TypeProp")}
    PropertyID                                   -> PropertyRef     {cons("PropertyRef")}
    "of" PropertyRef Term                        -> PropertyTerm    {cons("PropertyTerm")}
    "of" PropFilter PropertyRef Term             -> PropertyPattern {cons("PropertyPattern")}
                                                 -> PropFilter      {cons("Equal")}
    "conformant"                                 -> PropFilter      {cons("Conformant")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection   {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> PropertyDef     {cons("COMPLETION-PropertyDef")}
    CONTENTCOMPLETE -> PropertyRef     {cons("COMPLETION-PropertyRef")}
    CONTENTCOMPLETE -> PropertyTerm    {cons("COMPLETION-PropertyTerm")}
    CONTENTCOMPLETE -> PropertyPattern {cons("COMPLETION-PropertyPattern")}
    CONTENTCOMPLETE -> PropFilter      {cons("COMPLETION-PropFilter")}

  lexical syntax
    Id     -> PropertyID 
    "type" -> PropertyID {reject}

  context-free syntax
    "binding" "rules" BindingRule*         -> ModuleSection {cons("BindingRules")}
    Pattern Constraints ":" BindingClause+ -> BindingRule   {cons("BindingRule")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> BindingRule   {cons("COMPLETION-BindingRule")}

  context-free syntax
    DefKind "defines" Unique NamespaceRef Term PropertyTerm* InDefScopes Constraints                        -> BindingClause    {cons("DefClause")}
                                                                                                            -> DefKind          {cons("Explicit")}
    "implicitly"                                                                                            -> DefKind          {cons("Implicit")}
                                                                                                            -> Unique           {cons("Unique")}
    "unique"                                                                                                -> Unique           {cons("Unique")}
    "non-unique"                                                                                            -> Unique           {cons("NonUnique")}
    "scopes" {NamespaceRef ","}+                                                                            -> BindingClause    {cons("ScopeClause")}
    {RefClausePart "otherwise"}+                                                                            -> BindingClause    {cons("RefClause")}
    "refers" "to" Disambiguator NamespaceRef Term PropertyPattern* InRefScope Constraints                   -> RefClausePart    {cons("RefClausePart")}
    {ImportClausePart "otherwise"}+                                                                         -> BindingClause    {cons("ImportClause")}
    "imports" Disambiguator NamespaceRef Term PropertyPattern* FromRefScope Alias IntoDefScopes Constraints -> ImportClausePart {cons("SingleImport")}
    "imports" {RestrictedNamespaceRef ","}+ PropertyPattern* FromRefScope IntoDefScopes Constraints         -> ImportClausePart {cons("WildcardImport")}
                                                                                                            -> Alias            {cons("None")}
    "as" Term                                                                                               -> Alias            {cons("Alias")}

  context-free syntax
    CONTENTCOMPLETE -> DefKind          {cons("COMPLETION-DefKind")}
    CONTENTCOMPLETE -> Unique           {cons("COMPLETION-Unique")}
    CONTENTCOMPLETE -> RefClausePart    {cons("COMPLETION-RefClausePart")}
    CONTENTCOMPLETE -> BindingClause    {cons("COMPLETION-BindingClause")}
    CONTENTCOMPLETE -> ImportClausePart {cons("COMPLETION-ImportClausePart")}
    CONTENTCOMPLETE -> Alias            {cons("COMPLETION-Alias")}

  context-free syntax
                                                                -> InDefScopes   {cons("Current")}
    "in" DefScopes                                              -> InDefScopes   {bracket}
                                                                -> IntoDefScopes {cons("Current")}
    "into" DefScopes                                            -> IntoDefScopes {bracket}
    "current" "scope"                                           -> DefScopes     {cons("Current")}
    {DefScope ","}+                                             -> DefScopes     {cons("DefScopes")}
    "subsequent" "scope"                                        -> DefScope      {cons("Subsequent")}
    Term                                                        -> DefScope      {cons("DefScope")}
                                                                -> InRefScope    {cons("Current")}
    "in" RefScope                                               -> InRefScope    {bracket}
                                                                -> FromRefScope  {cons("Current")}
    "from" RefScope                                             -> FromRefScope  {bracket}
    "current" "scope"                                           -> RefScope      {cons("Current")}
    "enclosing" NamespaceRef                                    -> RefScope      {cons("Enclosing")}
    Disambiguator NamespaceRef Term PropertyPattern* InRefScope -> RefScope      {cons("Context")}
    Term                                                        -> RefScope      {cons("RefScope")}
                                                                -> Disambiguator {cons("All")}
    "best"                                                      -> Disambiguator {cons("Best")}

  context-free syntax
    CONTENTCOMPLETE -> InDefScopes   {cons("COMPLETION-InDefScopes")}
    CONTENTCOMPLETE -> IntoDefScopes {cons("COMPLETION-IntoDefScopes")}
    CONTENTCOMPLETE -> DefScopes     {cons("COMPLETION-DefScopes")}
    CONTENTCOMPLETE -> DefScope      {cons("COMPLETION-DefScope")}
    CONTENTCOMPLETE -> InRefScope    {cons("COMPLETION-InRefScope")}
    CONTENTCOMPLETE -> FromRefScope  {cons("COMPLETION-FromRefScope")}
    CONTENTCOMPLETE -> RefScope      {cons("COMPLETION-RefScope")}
    CONTENTCOMPLETE -> Disambiguator {cons("COMPLETION-Disambiguator")}

  context-free syntax
                                                                                  -> Constraints {ast("[]")}
    "where" {Constraint "and"}+                                                   -> Constraints {bracket}
                                                                                  -> Conditions  {ast("[]")}
    "when" {Constraint "and"}+                                                    -> Conditions  {bracket}
    Term "has" PropertyRef Pattern                                                -> Constraint  {cons("PropertyConstraint")}
    NamespaceRef Term "has" PropertyRef Pattern                                   -> Constraint  {cons("RefPropertyConstraint")}
    Term "refers" "to" RestrictedNamespaceRef Pattern PropertyPattern* InRefScope -> Constraint  {cons("ReferenceConstraint")}

  context-free syntax
    CONTENTCOMPLETE -> Constraints {cons("COMPLETION-Constraints")}
    CONTENTCOMPLETE -> Conditions  {cons("COMPLETION-Conditions")}
    CONTENTCOMPLETE -> Constraint  {cons("COMPLETION-Constraint")}

  context-free syntax
    "into" -> Id {reject}

  context-free syntax
    MessageKind Term "on" Term Conditions -> BindingClause {cons("MessageClause")}
    "note"                                -> MessageKind   {cons("Note")}
    "warning"                             -> MessageKind   {cons("Warning")}
    "error"                               -> MessageKind   {cons("Error")}

  context-free syntax
    CONTENTCOMPLETE -> BindingClause {cons("COMPLETION-BindingClause")}
    CONTENTCOMPLETE -> MessageKind   {cons("COMPLETION-MessageKind")}