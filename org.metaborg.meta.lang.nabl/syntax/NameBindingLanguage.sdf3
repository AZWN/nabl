module NameBindingLanguage

imports
  
  common/Layout
  common/Identifiers
  terms/Signatures
  terms/Terms
  formulas/Formulas
  formulas/Propositions
  core/Modules
  core/Namespaces
  core/Properties
  terms/Vars
  
context-free start-symbols

  Start

context-free syntax
  
  Start = Module
  
context-free syntax // namespaces

  RestrictedNamespaceRef.Restricted = <<Restriction*> <NamespaceRef>>
  
  Restriction.Imported = <imported>
  
context-free syntax // properties

  PropertyDef.QualityDef = <
  <PropertyID> of <{NamespaceRef ", "}+>>

QualityRef.QualityRef = <<PropertyID>>

  PropertyTerm.PropertyTerm       = <of <PropertyRef> <Term>>
  PropertyTerm.QualityTerm        = <of quality <QualityRef>>
  PropertyPattern.PropertyPattern = <of <PropFilter> <PropertyRef> <Term>>
  PropertyPattern.QualityPattern  = <of quality <QualityRef>>

  PropFilter.Equal      = <>
  PropFilter.Conformant = <conformant>
  
lexical syntax

  PropertyID     = "quality" {reject}
  SectionKeyword = "binding"
  
context-free syntax // binding rules
    
  ModuleSection.Bindings = <
  binding rules
    <BindingRule*>
  >
  
  BindingRule.BindingRule = <
  <Pattern> <Constraints> : <BindingClause+>> 

context-free syntax // clauses

  BindingClause.DefClause = <
    <DefKind> defines <Unique> <NamespaceRef> <Term> <PropertyTerm*> <InDefScopes> <Constraints>
  > 
  
  DefKind.Explicit = <>
  DefKind.Implicit = <implicitly>
  
  Unique.Unique    = <>
  Unique.Unique    = <unique>
  Unique.NonUnique = <non-unique>
    
  BindingClause.ScopeClause = <
    scopes <{NamespaceRef ", "}+>
  >
   
  BindingClause.NonTransitiveScopeClause = <
    non-transitively scopes <{NamespaceRef ", "}+>
  > 
    
  BindingClause.RefClause     = <
    <{RefClausePart "otherwise\n"}+>
  >
    
  RefClausePart.RefClausePart = <
  refers to <Disambiguator> <NamespaceRef> <Term> <PropertyPattern*> <InRefScope> <Constraints>>
  
  BindingClause.ImportClause = <
    <{ImportClausePart "otherwise\n"}+>
  > 
  
  ImportClausePart.SingleImport = <
  imports <Disambiguator> <NamespaceRef> <Term> <PropertyPattern*> <FromRefScope> <Alias> <IntoDefScopes> <Constraints>>             

  ImportClausePart.WildcardImport = <
  imports <{RestrictedNamespaceRef ", "}+> <PropertyPattern*> <FromRefScope> <IntoDefScopes> <Constraints>> 
  
  Alias.None  = <>
  Alias.Alias = <as <Term>>

  BindingClause.FilterClause = <
    filters <NamespaceRef> <Term> 
      <Filters>
      <Constraints>
  > 

  BindingClause.DisambiguateClause = <
    disambiguates <NamespaceRef> <Term>
      <Filters>
      by <Disambiguator> 
      <Constraints>
   >
  
  Disambiguator.MinimalDistance = <
    minimal distance <Term> <Relation> <Term>
  >
  
context-free syntax // scopes

  InDefScopes.Current   = <>
  InDefScopes           = <in <DefScopes>>   {bracket}
  
  IntoDefScopes.Current = <>
  IntoDefScopes         = <into <DefScopes>> {bracket}

  DefScopes.Current     = <current scope>
  DefScopes.DefScopes   = <<{DefScope ", "}+>> 
  DefScope.Subsequent   = <subsequent scope>
  DefScope.DefScope     = <<Term>>
 
  InRefScope.Current    = <>
  InRefScope            = <in <RefScope>>    {bracket}
  
  FromRefScope.Current   = <>
  FromRefScope           = <from <RefScope>>  {bracket}
  
  RefScope.Current    = <current scope>
  RefScope.Enclosing  = <enclosing <NamespaceRef>>
  RefScope.Context    = <<Disambiguator> <NamespaceRef> <Term> <PropertyPattern*> <InRefScope>>
  RefScope.RefScope   = <<Term>>
  
  Disambiguator.All   = <>
  Disambiguator.Best  = <best>
  
context-free syntax // constraints

  Constraints.NoWhere = <>
  Constraints.Where   = <
    where <Formula>
  > {bracket}
  
  Filters.Filter = <
    with <Formula>
  >
  
  Proposition.PropertyPattern = <<VarRef> has <PropertyRef> <Pattern>> {avoid}
  
lexical syntax

  Id = "into"      {reject}
  Id = "enclosing" {reject} 

template options

  keyword -/- [a-zA-z]
    
 