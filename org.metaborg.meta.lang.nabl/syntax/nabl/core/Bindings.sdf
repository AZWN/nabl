module Bindings
imports terms/Terms nabl/core/Namespaces

exports
  lexical syntax
    "binding" -> Keyword 
    "rules"   -> Keyword 

  context-free syntax
    "binding" "rules" BindingRule* -> ModuleSection {cons("BindingRules")}
    Pattern BindingClause          -> BindingRule   {cons("BindingRule")}

  context-free syntax
    CONTENTCOMPLETE -> ModuleSection {cons("COMPLETION-ModuleSection")}
    CONTENTCOMPLETE -> BindingRule   {cons("COMPLETION-BindingRule")}

  context-free syntax
    DefKind "defines" Unique NamespaceRef Term InDefScopes -> BindingClause {cons("DefClause")}
    "explicitly"                                           -> DefKind       {cons("Explicit")}
    "implicitly"                                           -> DefKind       {cons("Implicit")}
    "unique"                                               -> Unique        {cons("Unique")}
    "non-unique"                                           -> Unique        {cons("NonUnique")}
    "in" "current" "scope"                                 -> InDefScopes   {cons("Current")}
    "in" DefScopes                                         -> InDefScopes   {bracket}
    {DefScope ","}+                                        -> DefScopes     {cons("DefScopes")}
    "subsequent" "scope"                                   -> DefScope      {cons("Subsequent")}
    "term" Term                                            -> DefScope      {cons("DefScope")}

  context-free syntax
    CONTENTCOMPLETE -> BindingClause {cons("COMPLETION-BindingClause")}
    CONTENTCOMPLETE -> DefKind       {cons("COMPLETION-DefKind")}
    CONTENTCOMPLETE -> Unique        {cons("COMPLETION-Unique")}
    CONTENTCOMPLETE -> InDefScopes   {cons("COMPLETION-InDefScopes")}
    CONTENTCOMPLETE -> DefScopes     {cons("COMPLETION-DefScopes")}
    CONTENTCOMPLETE -> DefScope      {cons("COMPLETION-DefScope")}

  context-free syntax
    NamespaceRef Term "scopes" NamespaceRef -> BindingClause {cons("NamedScopeClause")}
    "anonymously" "scopes" NamespaceRef     -> BindingClause {cons("AnonymousScopeClause")}

  context-free syntax
    CONTENTCOMPLETE -> BindingClause {cons("COMPLETION-BindingClause")}

  context-free syntax
    {RefClausePart "otherwise"}+                                                          -> BindingClause {cons("RefClause")}
    "refers" "to" Disambiguator NamespaceRef Term PropertyPattern* InRefScope Constraints -> RefClausePart {cons("RefClausePart")}
    "in" "current" "scope"                                                                -> InRefScope    {cons("Current")}
    "in" RefScope                                                                         -> InRefScope    {bracket}
    "enclosing" NamespaceRef                                                              -> RefScope      {cons("Enclosing")}
    Disambiguator NamespaceRef Term PropertyPattern* InRefScope                           -> RefScope      {cons("Context")}
    Term                                                                                  -> RefScope      {cons("RefScope")}
                                                                                          -> Disambiguator {cons("All")}
    "best"                                                                                -> Disambiguator {cons("Best")}

  context-free syntax
    CONTENTCOMPLETE -> BindingClause {cons("COMPLETION-BindingClause")}
    CONTENTCOMPLETE -> RefClausePart {cons("COMPLETION-RefClausePart")}
    CONTENTCOMPLETE -> InRefScope    {cons("COMPLETION-InRefScope")}
    CONTENTCOMPLETE -> RefScope      {cons("COMPLETION-RefScope")}
    CONTENTCOMPLETE -> Disambiguator {cons("COMPLETION-Disambiguator")}

  context-free syntax
    {ImportClausePart "otherwise"}+                                                                         -> BindingClause    {cons("ImportClause")}
    "imports" Disambiguator NamespaceRef Term PropertyPattern* FromRefScope Alias IntoDefScopes Constraints -> ImportClausePart {cons("SingleImport")}
    "imports" {NamespaceRef ","}+ PropertyPattern* FromRefScope IntoDefScopes Constraints                   -> ImportClausePart {cons("WildcardImport")}
                                                                                                            -> Alias            {cons("None")}
    "as" Term                                                                                               -> Alias            {cons("Alias")}

  context-free syntax
    CONTENTCOMPLETE -> BindingClause    {cons("COMPLETION-BindingClause")}
    CONTENTCOMPLETE -> ImportClausePart {cons("COMPLETION-ImportClausePart")}
    CONTENTCOMPLETE -> Alias            {cons("COMPLETION-Alias")}

  context-free syntax
                     -> IntoDefScopes {cons("Current")}
    "into" DefScopes -> IntoDefScopes {bracket}
                     -> FromRefScope  {cons("Current")}
    "from" RefScope  -> FromRefScope  {bracket}

  context-free syntax
    CONTENTCOMPLETE -> IntoDefScopes {cons("COMPLETION-IntoDefScopes")}
    CONTENTCOMPLETE -> FromRefScope  {cons("COMPLETION-FromRefScope")}