module statixlang

imports

  dynamics/sig-fixes
  ds-signatures/StatixLang-sig
  dynamics/unification
  dynamics/terms

//nabl2/runtime/interpreter/scopegraph-api
//nabl2/runtime/interpreter/scopegraph-impl
//statics/statix

signature
  sorts
    Result

  sort aliases
    CommaTerms = List(Term)
    SpaceTerms = List(Term)

  constructors
    T : List(Constraint) -> Result
    F : Result
    Delay : List(Constraint) -> Result

    CList : List(Constraint) -> Constraint
    Cont1 : List(Rule) * List(Term) -> Constraint
    Cont2 : Sub * /* guard */ Constraint * /* body */ Constraint * /*continuation*/ List(Constraint) -> Constraint
    Subst : Sub * Constraint -> Constraint

  components
    F : Int
    R : Map(String, List(Rule))

  arrows
    analyze(List(Constraint)) --> Result
    solveAll(List(Constraint), Bool, List(Constraint)) --> Result
    UserConstraint -solve-> Result
    Constraint -solve-> Result
    newVar(String, Int) --> Term
    inc(Int) --> Int

rules

  CTrue() -solve-> T([])

  CFalse() -solve-> F()

  CConj(c1, c2) -solve-> T([c1, c2])

  S |- CEqual(t1, t2) -solve-> T([])
    where unify(buildTerm(t1), buildTerm(t2)) --> _

  CNew([]) -solve-> T([])

  CNew([v|vs]) -solve-> T([CEqual(v,newVar("s", f))|cs]) :: F inc(f)
    where CNew(vs) -solve-> T(cs) :: F f

  R r |- C(x, ts) -solve-> T([Cont1(r[x], ts)])

  Cont1([], _) -solve-> F()
  S |- Cont1([Rule(_, C(_, ps), _, guard, body)|rs], ts) -solve-> result
    where Cont1(rs, ts) => next; // shoudl this capture S?
          S {} |- buildTerms(ts) --> ts';
          matchTerms(ps, ts') --> r; case r of { // which S for buildTerms? empty, heads are top-level
            [S]       => T([Cont2(S, guard, body, [next])]) => result
            otherwise => T([next]) => result
          }

  Cont2(S, guard, body, next) -solve-> result
    where S |- solveAll([guard], false, []) --> gresult;
          case gresult of {
            F() => // guard failed, try next rule
              T(next) => result
            T([]) => // guard succeeded, return body
              T([Subst(S, body)]) => result
            Delay(ds) =>
              Delay([Cont2(S, CList(ds), body, next)]) => result
//          otherwise => fail
          }

  Subst(S, c) -solve-> result
    where S |- solveAll([c], false, []) --> cresult;
          case cresult of {
            Delay(ds) =>
              Delay([Subst(S, CList(ds))]) => result
            otherwise => // T([]), F()
              cresult => result
          }

rules

  analyze(C) --> result
    where newUnifier() => U;
          solveAll(C, false, []) :: U --> result

  S |- solveAll([], _, []) --> T([])

  S |- solveAll([], false, ds@[_|_]) --> Delay(ds)

  S |- solveAll([], true, ds@[_|_]) --> result
    where S |- solveAll(ds, false, []) --> result

  S |- solveAll([c|cs], progress, ds) --> result
    where c -solve-> cresult;
          case cresult of {
            F() =>
              F() => result
            T(cs') =>
              solveAll(cs' ++ cs, true, ds) --> result
            Delay(ds') =>
              solveAll(cs, progress, ds ++ ds') --> result
          }

